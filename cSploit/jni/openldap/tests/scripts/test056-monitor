#! /bin/sh
# $OpenLDAP$
## This work is part of OpenLDAP Software <http://www.openldap.org/>.
##
## Copyright 1998-2014 The OpenLDAP Foundation.
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. $SRCDIR/scripts/defines.sh

if test $MONITORDB = "no" ; then 
	echo "Monitor backend not available, test skipped"
	exit 0
fi 

mkdir -p $TESTDIR $DBDIR1

echo "Starting slapd on TCP/IP port $PORT..."
. $CONFFILTER $BACKEND $MONITORDB < $SCHEMACONF > $CONF1
$SLAPD -f $CONF1 -h $URI1 -d $LVL $TIMING > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"

sleep 1

echo "Using ldapsearch to check that slapd is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -h $LOCALHOST -p $PORT1 \
		'objectclass=*' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done

echo "Using ldapsearch to read connection monitor entries..."
$LDAPSEARCH -S "" -b "$CONNECTIONSMONITORDN" -h $LOCALHOST -p $PORT1 \
	'objectclass=*' \
	structuralObjectClass entryDN \
	monitorConnectionProtocol monitorConnectionOpsReceived \
	monitorConnectionOpsExecuting monitorConnectionOpsPending \
	monitorConnectionOpsCompleted monitorConnectionGet \
	monitorConnectionRead monitorConnectionWrite \
	monitorConnectionMask monitorConnectionAuthzDN \
	monitorConnectionListener monitorConnectionLocalAddress \
	> $SEARCHOUT 2>&1
RC=$?

if test $RC != 0 ; then
        echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
        exit $RC
fi

# Compare results, ignoring possible difference of IPv4/IPv6 localhost address
localrewrite='s/=127\.0\.0\.1:/=LOCAL:/; s/=\[::1\]:/=LOCAL:/'
echo "Filtering ldapsearch results..."
sed -e "$localrewrite" < $SEARCHOUT | $LDIFFILTER > $SEARCHFLT
echo "Filtering expected data..."
. $CONFFILTER < $MONITOROUT1 | sed -e "$localrewrite" | $LDIFFILTER > $LDIFFLT
echo "Comparing filter output..."
$CMP $SEARCHFLT $LDIFFLT > $CMPOUT

if test $? != 0 ; then
        echo "comparison failed - connection monitor output is not correct"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
        exit 1
fi

echo "Using ldapsearch to read database monitor entries..."
$LDAPSEARCH -S "" -b "$DATABASESMONITORDN" -h $LOCALHOST -p $PORT1 \
	'objectclass=*' \
	structuralObjectClass entryDN namingContexts readOnly \
	monitorIsShadow monitorContext \
	olmBDBEntryCache olmBDBDNCache olmBDBIDLCache \
	> $SEARCHOUT 2>&1
RC=$?

if test $RC != 0 ; then
        echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
        exit $RC
fi

echo "Filtering ldapsearch results..."
$LDIFFILTER -b monitor < $SEARCHOUT > $SEARCHFLT

TMPMONITOROUT2=$MONITOROUT2
case $BACKEND in
bdb|hdb)
	;;
*)
	TMPMONITOROUT2=$TESTDIR/monitor2.out
	grep -v "olmBDB" $MONITOROUT2 > $TMPMONITOROUT2
	;;
esac

echo "Comparing filter output..."
$CMP $SEARCHFLT $TMPMONITOROUT2 > $CMPOUT

if test $? != 0 ; then
        echo "comparison failed - database monitor output is not correct"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
        exit 1
fi

echo "Using ldapsearch to read statistics monitor entries..."
$LDAPSEARCH -S "" -b "$STATISTICSMONITORDN" -h $LOCALHOST -p $PORT1 \
	'(|(cn=Entries)(cn=PDU)(cn=Referrals))' \
	structuralObjectClass monitorCounter entryDN \
	> $SEARCHOUT 2>&1
RC=$?

if test $RC != 0 ; then
        echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
        exit $RC
fi

echo "Filtering ldapsearch results..."
$LDIFFILTER -b monitor < $SEARCHOUT > $SEARCHFLT

echo "Comparing filter output..."
$CMP $SEARCHFLT $MONITOROUT3 > $CMPOUT

if test $? != 0 ; then
        echo "comparison failed - statistics monitor output is not correct"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
        exit 1
fi

echo "Using ldapsearch to read operation monitor entries..."
$LDAPSEARCH -S "" -b "$OPERATIONSMONITORDN" -h $LOCALHOST -p $PORT1 \
	'objectclass=*' \
	structuralObjectClass monitorOpInitiated monitorOpCompleted entryDN \
	> $SEARCHOUT 2>&1
RC=$?

if test $RC != 0 ; then
        echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
        exit $RC
fi

echo "Filtering ldapsearch results..."
$LDIFFILTER -b monitor < $SEARCHOUT > $SEARCHFLT

echo "Comparing filter output..."
$CMP $SEARCHFLT $MONITOROUT4 > $CMPOUT

if test $? != 0 ; then
        echo "comparison failed - operations monitor output is not correct"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
        exit 1
fi

test $KILLSERVERS != no && kill -HUP $KILLPIDS

echo ">>>>> Test succeeded"

test $KILLSERVERS != no && wait

exit 0

