#! /bin/sh
# $OpenLDAP$ */
## This work is part of OpenLDAP Software <http://www.openldap.org/>.
##
## Copyright 1998-2014 The OpenLDAP Foundation.
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. $SRCDIR/scripts/defines.sh

if test $SYNCPROV = syncprovno; then 
	echo "Syncrepl provider overlay not available, test skipped"
	exit 0
fi 

mkdir -p $TESTDIR $DBDIR1A $DBDIR1B $DBDIR1C $DBDIR2A $DBDIR2B

echo "Running slapadd to build glued slapd databases..."
. $CONFFILTER $BACKEND $MONITORDB < $GLUECONF > $CONF1
$SLAPADD -d $LVL -f $CONF1 -l $LDIFORDERED > $SLAPADDLOG1 2>&1
RC=$?
if test $RC != 0 ; then
	echo "slapadd failed ($RC)!"
	exit $RC
fi

rm -rf $DBDIR1A/* $DBDIR1B/*
cp -pr $DBDIR1C $DBDIR2C

echo "Starting slapd 1 on TCP/IP port $PORT1..."
. $CONFFILTER $BACKEND $MONITORDB < $GLUESYNCCONF1 > $CONF1
$SLAPD -f $CONF1 -h $URI1 -d $LVL $TIMING > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"

sleep 1

echo "Using ldapsearch to check that slapd 1 is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -h $LOCALHOST -p $PORT1 \
		'(objectclass=*)' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done

echo "Starting slapd 2 on TCP/IP port $PORT2..."
. $CONFFILTER $BACKEND $MONITORDB < $GLUESYNCCONF2 > $CONF2
$SLAPD -f $CONF2 -h $URI2 -d $LVL $TIMING > $LOG2 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$KILLPIDS $PID"

sleep 1

echo "Using ldapsearch to check that slapd 2 is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -h $LOCALHOST -p $PORT2 \
		'(objectclass=*)' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done

SUBTREE1="ou=Information Technology Division,ou=People,dc=example,dc=com"
SUBTREE2="ou=Groups,dc=example,dc=com"

echo "Using ldapadd to populate subtree=\"${SUBTREE1}\" on port $PORT1..."
$LDAPADD -D "cn=Manager 1,$BASEDN" -w $PASSWD -h $LOCALHOST -p $PORT1 \
	-f $LDIFORDERED -c \
	> /dev/null 2>&1
RC=$?
case $RC in
0)
	echo "ldapadd should have failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit -1
	;;
10|68)
	# Fine if we get alreadyExists or referrals
	;;
*)
	echo "ldapadd failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
	;;
esac

echo "Using ldapadd to populate subtree=\"${SUBTREE2}\" on port $PORT2..."
$LDAPADD -D "cn=Manager 2,$BASEDN" -w $PASSWD -h $LOCALHOST -p $PORT2 \
	-f $LDIFORDERED -c \
	> /dev/null 2>&1
RC=$?
case $RC in
0)
	echo "ldapadd should have failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit -1
	;;
10|68)
	# Fine if we get alreadyExists or referrals
	;;
*)
	echo "ldapadd failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
	;;
esac

echo "Waiting $SLEEP1 seconds for shadow subtrees to sync..."
sleep $SLEEP1

echo "Filtering original ldif used to create database..."
$LDIFFILTER < $GLUESYNCOUT > $LDIFFLT

for P in $PORT1 $PORT2 ; do
	echo "Using ldapsearch to read all the entries from port $P..."
	$LDAPSEARCH -b "$BASEDN" -h $LOCALHOST -p $P \
		-S "" '(objectclass=*)' > "${SEARCHOUT}.${P}" 2>&1
	RC=$?

	if test $RC != 0 ; then
		echo "ldapsearch failed ($RC)!"
		test $KILLSERVERS != no && kill -HUP $KILLPIDS
		exit $RC
	fi

	echo "Filtering ldapsearch results..."
	$LDIFFILTER < "${SEARCHOUT}.${P}" > $SEARCHFLT
	echo "Comparing filter output..."
	$CMP $SEARCHFLT $LDIFFLT > $CMPOUT

	if test $? != 0 ; then
		echo "comparison failed - database was not created correctly"
		test $KILLSERVERS != no && kill -HUP $KILLPIDS
		exit 1
	fi
done

echo "Testing ldapdelete propagation..."
$LDAPDELETE -D "cn=Manager 1,$BASEDN" -w $PASSWD -H $URI1 "$BABSDN" \
	> $TESTOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapdelete failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

# This usually propagates immediately
sleep 1

$LDAPSEARCH -H $URI2 -b "$BABSDN" > $TESTOUT 2>&1
RC=$?
if test $RC = 0 && test $BACKEND != null ; then
	echo "ldapsearch should have failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit -1
fi

test $KILLSERVERS != no && kill -HUP $KILLPIDS

echo ">>>>> Test succeeded"

test $KILLSERVERS != no && wait

exit 0
