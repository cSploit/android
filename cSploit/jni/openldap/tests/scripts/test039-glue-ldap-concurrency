#! /bin/sh
# $OpenLDAP$
## This work is part of OpenLDAP Software <http://www.openldap.org/>.
##
## Copyright 1998-2014 The OpenLDAP Foundation.
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. $SRCDIR/scripts/defines.sh

echo ""

if test $BACKLDAP = ldapno ; then 
	echo "ldap backend not available, test skipped"
	exit 0
fi

if test $RWM = rwmno ; then 
	echo "rwm (rewrite/remap) overlay not available, test skipped"
	exit 0
fi 

if test x$TESTLOOPS = x ; then
	TESTLOOPS=50
fi

if test x$TESTOLOOPS = x ; then
	TESTOLOOPS=1
fi

if test x$TESTCHILDREN = x ; then
	TESTCHILDREN=20
fi

rm -rf $TESTDIR

mkdir -p $TESTDIR $DBDIR1 $DBDIR2

echo "Starting slapd on TCP/IP port $PORT1..."
. $CONFFILTER $BACKEND $MONITORDB < $METACONF1 > $CONF1
$SLAPD -f $CONF1 -h $URI1 -d $LVL $TIMING > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"

sleep 1

echo "Using ldapsearch to check that slapd is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -h $LOCALHOST -p $PORT1 \
		'objectclass=*' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapadd to populate the database..."
$LDAPADD -D "$MANAGERDN" -h $LOCALHOST -p $PORT1 -w $PASSWD < \
	$LDIFORDERED > $TESTOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Starting slapd on TCP/IP port $PORT2..."
. $CONFFILTER $BACKEND $MONITORDB < $METACONF2 > $CONF2
$SLAPD -f $CONF2 -h $URI2 -d $LVL $TIMING > $LOG2 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$KILLPIDS $PID"

sleep 1

echo "Using ldapsearch to check that slapd is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -h $LOCALHOST -p $PORT2 \
		'objectclass=*' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapadd to populate the database..."
$LDAPADD -D "$METAMANAGERDN" -h $LOCALHOST -p $PORT2 -w $PASSWD < \
	$LDIFMETA >> $TESTOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Starting slapd on TCP/IP port $PORT3..."
. $CONFFILTER $BACKEND $MONITORDB < $GLUELDAPCONF > $CONF3
$SLAPD -f $CONF3 -h $URI3 -d $LVL $TIMING > $LOG3 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$KILLPIDS $PID"

sleep 1

echo "Using ldapsearch to check that slapd is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -h $LOCALHOST -p $PORT3 \
		'objectclass=*' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

cat /dev/null > $SEARCHOUT

mkdir -p $TESTDIR/$DATADIR
METABASEDN="o=Example,c=US"
for f in $DATADIR/do_* ; do
	sed -e "s;$BASEDN;$METABASEDN;" $f > $TESTDIR/$f
done

# add a read that matches only the local database, but selects 
# also the remote as candidate; this should be removed to compare
# execution times with test008...
for f in $TESTDIR/$DATADIR/do_read.* ; do
	echo "ou=Meta,$METABASEDN" >> $f
done

# add a read that matches a referral in the local database only, 
# but selects also the remote as candidate; this should be removed 
# to compare execution times with test008...
for f in $TESTDIR/$DATADIR/do_read.* ; do
	echo "cn=Somewhere,ou=Meta,$METABASEDN" >> $f
done

# add a bind that resolves to a referral
for f in $TESTDIR/$DATADIR/do_bind.* ; do
	echo "cn=Foo,ou=Meta,$METABASEDN" >> $f
	echo "bar" >> $f
	echo "" >> $f
	echo "" >> $f
done

# fix test data to include back-monitor, if available
# NOTE: copies do_* files from $TESTDIR/$DATADIR to $TESTDIR
$MONITORDATA "$MONITORDB" "$TESTDIR/$DATADIR" "$TESTDIR"

echo "Using tester for concurrent server access..."
BINDDN="cn=Manager,o=Local"
PASSWD="secret"
$SLAPDTESTER -P "$PROGDIR" -d "$TESTDIR" -h $LOCALHOST -p $PORT3 \
	-D "$BINDDN" -w $PASSWD \
	-l $TESTLOOPS -L $TESTOLOOPS -j $TESTCHILDREN -r 20 \
	-i '!REFERRAL' -i '*INVALID_CREDENTIALS' -SS
RC=$?

if test $RC != 0 ; then
	echo "slapd-tester failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi 

echo "Using ldapsearch to retrieve all the entries..."
$LDAPSEARCH -S "" -b "$METABASEDN" -h $LOCALHOST -p $PORT3 \
			'(objectClass=*)' > $SEARCHOUT 2>&1
RC=$?

test $KILLSERVERS != no && kill -HUP $KILLPIDS

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	exit $RC
fi

echo "Filtering ldapsearch results..."
$LDIFFILTER < $SEARCHOUT > $SEARCHFLT
echo "Filtering original ldif used to create database..."
$LDIFFILTER < $METACONCURRENCYOUT > $LDIFFLT
echo "Comparing filter output..."
$CMP $SEARCHFLT $LDIFFLT > $CMPOUT

if test $? != 0 ; then
	echo "comparison failed - slapd-ldap search/modification didn't succeed"
	exit 1
fi

echo ">>>>> Test succeeded"

test $KILLSERVERS != no && wait

exit 0
