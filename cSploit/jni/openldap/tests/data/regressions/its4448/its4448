#! /bin/sh
# $OpenLDAP$
## This work is part of OpenLDAP Software <http://www.openldap.org/>.
##
## Copyright 1998-2014 The OpenLDAP Foundation.
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. $SRCDIR/scripts/defines.sh

echo ""

if test $BACKMETA = metano ; then 
	echo "meta backend not available, test skipped"
	exit 0
fi

# to be removed some time...
if test "x$TEST_META" = "xno" ; then
	echo '### Test disabled by "TEST_META=no"; unset TEST_META to re-enable'
	echo ""
	exit 0
else
	echo "### this test is experimental; in case of problems,"
	echo "### set \"TEST_META=no\" to disable, and report thru"
	echo "### the Issue Tracking System <http://www.openldap.org/its/>"
	echo ""
fi

if test x$TESTLOOPS = x ; then
	TESTLOOPS=50
fi

rm -rf $TESTDIR

mkdir -p $TESTDIR $DBDIR1 $DBDIR2

ITS=4448
ITSDIR=$DATADIR/regressions/its$ITS
ITSCONF=$ITSDIR/slapd-meta.conf

# NOTE: this could be added to all tests...
if test "$BACKEND" = "bdb" || test "$BACKEND" = "hdb" ; then
	if test "x$DB_CONFIG" != "x" ; then \
		if test -f $DB_CONFIG ; then
			echo "==> using DB_CONFIG \"$DB_CONFIG\""
			cp $DB_CONFIG $DBDIR1
			cp $DB_CONFIG $DBDIR2
		else
			echo "==> DB_CONFIG must point to a valid file (ignored)"
		fi
	else
		echo "==> set \"DB_CONFIG\" to the DB_CONFIG file you want to use for the test."
	fi
	echo ""
fi

echo "Starting slapd on TCP/IP port $PORT1..."
. $CONFFILTER $BACKEND $MONITORDB < $CONF > $CONF1
$SLAPD -f $CONF1 -h $URI1 -d $LVL $TIMING > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"

sleep 1

echo "Using ldapsearch to check that slapd is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -h $LOCALHOST -p $PORT1 \
		'objectclass=*' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapadd to populate the database..."
$LDAPADD -D "$MANAGERDN" -h $LOCALHOST -p $PORT1 -w $PASSWD < \
	$LDIFORDERED > $TESTOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapadd to add the referral..."
$LDAPADD -D "$MANAGERDN" -h $LOCALHOST -p $PORT1 -w $PASSWD << EOMODS \
	> $TESTOUT 2>&1
dn: cn=Meta,dc=example,dc=com
objectClass: referral
objectClass: extensibleObject
cn: Meta
ref: ${URI2}ou=Meta,dc=example,dc=com
EOMODS

RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Starting slapd on TCP/IP port $PORT2..."
. $CONFFILTER $BACKEND $MONITORDB < $METACONF2 > $CONF2
$SLAPD -f $CONF2 -h $URI2 -d $LVL $TIMING > $LOG2 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$KILLPIDS $PID"

sleep 1

echo "Using ldapsearch to check that slapd is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -h $LOCALHOST -p $PORT2 \
		'objectclass=*' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Using ldapadd to populate the database..."
$LDAPADD -D "$METAMANAGERDN" -h $LOCALHOST -p $PORT2 -w $PASSWD < \
	$LDIFMETA >> $TESTOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

echo "Starting slapd on TCP/IP port $PORT3..."
. $CONFFILTER $BACKEND $MONITORDB < $ITSCONF > $CONF3
$SLAPD -f $CONF3 -h $URI3 -d $LVL $TIMING > $LOG3 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$KILLPIDS $PID"

sleep 1

echo "Using ldapsearch to check that slapd is running..."
for i in 0 1 2 3 4 5; do
	$LDAPSEARCH -s base -b "$MONITOR" -h $LOCALHOST -p $PORT3 \
		'objectclass=*' > /dev/null 2>&1
	RC=$?
	if test $RC = 0 ; then
		break
	fi
	echo "Waiting 5 seconds for slapd to start..."
	sleep 5
done
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi

cat /dev/null > $SEARCHOUT

mkdir -p $TESTDIR/$DATADIR
METABASEDN="o=Example,c=US"
#for f in $DATADIR/do_* ; do
#	sed -e "s;$BASEDN;$METABASEDN;" $f > $TESTDIR/$f
#done

# add a read that matches only the local database, but selects 
# also the remote as candidate; this should be removed to compare
# execution times with test008...
#for f in $TESTDIR/$DATADIR/do_read.* ; do
#	echo "ou=Meta,$METABASEDN" >> $f
#done

# add a read that matches a referral in the local database only, 
# but selects also the remote as candidate; this should be removed 
# to compare execution times with test008...
#for f in $TESTDIR/$DATADIR/do_read.* ; do
#	echo "cn=Somewhere,ou=Meta,$METABASEDN" >> $f
#done

# add a bind that resolves to a referral
#for f in $TESTDIR/$DATADIR/do_bind.* ; do
#	echo "cn=Foo,ou=Meta,$METABASEDN" >> $f
#	echo "bar" >> $f
#	echo "" >> $f
#	echo "" >> $f
#done

echo \
"$METABASEDN
(cn=John Belushi)
$METABASEDN
(cn=Meta)
$METABASEDN
(cn=Foo Bar)
$METABASEDN
(cn=Dan Aykroyd)
$METABASEDN
(cn=John Belushi)
$METABASEDN
(cn=Meta)
$METABASEDN
(cn=Foo Bar)
$METABASEDN
(cn=Dan Aykroyd)
$METABASEDN
(cn=John Belushi)
$METABASEDN
(cn=Meta)
$METABASEDN
(cn=Foo Bar)
$METABASEDN
(cn=Dan Aykroyd)
$METABASEDN
(cn=John Belushi)
$METABASEDN
(cn=Meta)
$METABASEDN
(cn=Foo Bar)
$METABASEDN
(cn=Dan Aykroyd)
$METABASEDN
(cn=John Belushi)
$METABASEDN
(cn=Meta)
$METABASEDN
(cn=Foo Bar)
$METABASEDN
(cn=Dan Aykroyd)
$METABASEDN
(cn=John Belushi)
$METABASEDN
(cn=Meta)
$METABASEDN
(cn=Foo Bar)
$METABASEDN
(cn=Dan Aykroyd)
$METABASEDN
(cn=John Belushi)
$METABASEDN
(cn=Meta)
$METABASEDN
(cn=Foo Bar)
$METABASEDN
(cn=Dan Aykroyd)
$METABASEDN
(cn=John Belushi)
$METABASEDN
(cn=Meta)
$METABASEDN
(cn=Foo Bar)
$METABASEDN
(cn=Dan Aykroyd)" \
> $TESTDIR/$DATADIR/do_search.0

echo "Using tester for concurrent server access..."
$SLAPDTESTER -P "$PROGDIR" -d "$TESTDIR/$DATADIR" -h $LOCALHOST -p $PORT3 \
	-D "cn=Manager,$METABASEDN" -w $PASSWD -l $TESTLOOPS -r 20 -FF
RC=$?

if test $RC != 0 ; then
	echo "slapd-tester failed ($RC)!"
	test $KILLSERVERS != no && kill -HUP $KILLPIDS
	exit $RC
fi 

echo "Using ldapsearch to retrieve all the entries..."
$LDAPSEARCH -S "" -b "$METABASEDN" -h $LOCALHOST -p $PORT3 \
			'(objectClass=*)' > $SEARCHOUT 2>&1
RC=$?

test $KILLSERVERS != no && kill -HUP $KILLPIDS

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	exit $RC
fi

echo "Filtering ldapsearch results..."
$LDIFFILTER < $SEARCHOUT > $SEARCHFLT
echo "Filtering original ldif used to create database..."
$LDIFFILTER < $METACONCURRENCYOUT > $LDIFFLT
echo "Comparing filter output..."
$BCMP $SEARCHFLT $LDIFFLT > $CMPOUT

if test $? != 0 ; then
	echo "comparison failed - slapd-meta search/modification didn't succeed"
	exit 1
fi

echo ">>>>> Test succeeded"

test $KILLSERVERS != no && wait

exit 0
