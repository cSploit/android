#! /bin/sh
# Copyright (c) 2001 IBPhoenix
#
# Author: Pavel Cisar <pcisar@ibphoenix.com>
#
# init.d/firebird
#
#   and symbolic its link
#
# /usr/sbin/rcfirebird
#
# System startup script for the Firebird SuperServer
#
### BEGIN INIT INFO
# Provides: firebird
# Required-Start: $network $remote_fs
# Required-Stop:  
# Default-Start:  2 3 5
# Default-Stop:   0 1 6
# Description:    Start the Firebird database server.
### END INIT INFO

# Source SuSE config
if [ -r /etc/rc.config ]
  then
  . /etc/rc.config
fi

if [ -r /etc/sysconfig/firebird ]
  then
  . /etc/sysconfig/firebird
fi


# Determine the base and follow a runlevel link name.
base=${0##*/}
link=${base#*[SK][0-9][0-9]}

# Force execution if not called by a runlevel directory.
test $link = $base && START_FIREBIRD="yes"
test "$START_FIREBIRD" = yes || exit 0

FIREBIRD=@FB_CONFDIR@
FBRunUser=firebird
INSTANCE=default

makeFbDir() {
	mDir=${1}
	mode=${2}
	if [ ! -d $mDir ]; then
		rm -rf $mDir
		mkdir $mDir
		if [ "$mode" ]; then
			chmod $mode $mDir
		fi
	fi
	chown $FBRunUser:$FBRunUser $mDir
}
runDir=/var/run/firebird
makeFbDir $runDir
lockDir=/tmp/firebird
makeFbDir $lockDir 0770

pidfile="$runDir/$INSTANCE.pid"

export FIREBIRD

ISC_USER=
ISC_PASSWORD=
export ISC_USER ISC_PASSWORD

# Check the files are there and are executable.
FBSBIN=$FIREBIRD/bin
if [ ! -x $FBSBIN/fbguard ]; then
	FBSBIN=@FB_SBINDIR@
fi

[ -x $FBSBIN/fbguard ] || exit 5
[ -x $FBSBIN/firebird ] || exit 5

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num><num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
  start)
	echo -n "Starting Firebird"
	## Start daemon with startproc(8). If this fails
	## the echo return value is set appropriate.

	# NOTE: startproc return 0, even if service is
	# already running to match LSB spec.
	startproc -u $FBRunUser $FBSBIN/fbguard -pidfile $pidfile -forever

	# Remember status and be verbose
	rc_status -v
	;;
  stop)
	echo -n "Shutting down Firebird"
	## Stop daemon with killproc(8) and if this fails
	## set echo the echo return value.

	## I had to use generic approach here - I can't test on suse. AP.
	if [ -f $pidfile ]
	then
		kill `cat $pidfile`
		sleep 1
	fi
		

	# Remember status and be verbose
	rc_status -v
	;;
  try-restart)
	## Stop the service and if this succeeds (i.e. the
	## service was running before), start it again.
	## Note: try-restart is not (yet) part of LSB (as of 0.7.5)
	$0 status >/dev/null &&  $0 restart

	# Remember status and be quiet
	rc_status
	;;
  restart|force-reload)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	echo "Restarting service Firebird"
	$0 stop
	sleep 1
	$0 start

	# Remember status and be quiet
	rc_status
	;;
  reload)

	;;
  status)
	echo -n "Checking for Firebird: "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Status has a slightly different for the status command:
	# 0 - service running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running

	# NOTE: checkproc returns LSB compliant status values.
	checkproc $FBSBIN/fbguard
	rc_status -v
	;;

  *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload}"
	exit 1
	;;
esac
rc_exit
