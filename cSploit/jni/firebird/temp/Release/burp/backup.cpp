/*********** Preprocessed module -- do not edit ***************/
/*********** Preprocessed module -- do not edit ***************/
/*********** Preprocessed module -- do not edit ***************/
/*********** Preprocessed module -- do not edit ***************/
/*********** Preprocessed module -- do not edit ***************/
/***************** gpre version LI-T3.0.0.31129 Firebird 3.0 Alpha 2 **********************/
/*
 *	PROGRAM:	JRD Backup and Restore Program
 *	MODULE:		backup.epp
 *	DESCRIPTION:	Backup routine
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * Toni Martir: Added verbose backup records as BACKUP_VERBOSE_INTERVAL
 * 2001.07.06 Sean Leyne - Code Cleanup, removed "#ifdef READONLY_DATABASE"
 *                         conditionals, as the engine now fully supports
 *                         readonly databases.
 * 2001.11.20 Claudio Valderrama: fix problem with embedded blanks in
 * generators and use symbol_length effective length calculation from put_text.
 * This minimizes code redundancy and fixes SF Bug #483276.
 * 2001.12.15 Claudio Valderrama: copy should run through symbol_length instead
 * of using just another length calculation algorithm. Callers of put_text, copy
 * and symbol_length (if used directly) should use sizeof. Changed all callers
 * and sizeof() works because the strings are local to the functions. This
 * eliminates the problem with harcoded limits in each call.
 * 2002.10.29 Mike Nordell: UINT64 backup message.
 * 2003.08.17 Claudio Valderrama: Fix SF Bug #750659.
 * 2005.04.29 Claudio Valderrama: Moved symbol_length to misc.cpp.
 */


#include "firebird.h"
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include "../burp/burp.h"
#include "../jrd/ods.h"
#include "../jrd/align.h"
#include "../common/gdsassert.h"
#include "../jrd/constants.h"
#include "../common/stuff.h"
#include "../burp/backu_proto.h"
#include "../burp/burp_proto.h"
#include "../burp/canon_proto.h"
#include "../burp/mvol_proto.h"
#include "../remote/protocol.h"
#ifdef DEBUG
#include "../common/prett_proto.h"
#endif

#include "../common/classes/UserBlob.h"
#include "../common/classes/MsgPrint.h"
#include "../burp/OdsDetection.h"

using MsgFormat::SafeArg;


// For service APIs the follow DB handle is a value stored
// in thread data.  This is also done for other statics generated by
// GPRE.  This is to avoid multiple threading problems with module
// level statics.

/*DATABASE DB = STATIC FILENAME "yachts.lnk" RUNTIME * dbb_file;*/
/**** GDS Preprocessor Definitions ****/
#ifndef JRD_IBASE_H
#include <ibase.h>
#endif

static const ISC_QUAD
   isc_blob_null = {0, 0};	/* initializer for blobs */
static isc_db_handle
   DB = 0;		/* database handle */

static isc_tr_handle
   gds_trans = 0;		/* default transaction handle */
static ISC_STATUS
   isc_status [20],	/* status vector */
   isc_status2 [20];	/* status vector */
static ISC_LONG
   isc_array_length, 	/* array return size */
   SQLCODE;		/* SQL status code */
static const char
   isc_tpb_3 [4] = {1,9,2,6};

static const char
   isc_tpb_2 [5] = {1,9,2,6,20};

static const char
   isc_tpb_1 [4] = {1,9,2,6};

static const char
   isc_tpb_0 [5] = {1,9,2,6,20};

static const short
   isc_4l = 274;
static const char
   isc_4 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 10,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_cstring2, 0,0, 7,0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 19, 'R','D','B','$','U','S','E','R','_','P','R','I','V','I','L','E','G','E','S', 0, 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			blr_parameter2, 0, 0,0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 11, 'R','D','B','$','G','R','A','N','T','O','R', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_field, 0, 8, 'R','D','B','$','U','S','E','R', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','O','B','J','E','C','T','_','T','Y','P','E', 
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','U','S','E','R','_','T','Y','P','E', 
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','G','R','A','N','T','_','O','P','T','I','O','N', 
			blr_parameter, 0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','P','R','I','V','I','L','E','G','E', 
			blr_parameter, 0, 9,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 4,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_4 */

static const short
   isc_16l = 226;
static const char
   isc_16 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 6,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 9, 'R','D','B','$','T','Y','P','E','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','T','Y','P','E','_','N','A','M','E', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 8, 'R','D','B','$','T','Y','P','E', 
			blr_parameter, 0, 5,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 3,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_16 */

static const short
   isc_24l = 252;
static const char
   isc_24 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 4,0, 
	    blr_cstring2, 0,0, 0,4, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 2, 
		  blr_relation, 12, 'R','D','B','$','T','R','I','G','G','E','R','S', 0, 
		  blr_relation, 20, 'R','D','B','$','T','R','I','G','G','E','R','_','M','E','S','S','A','G','E','S', 1, 
		  blr_boolean, 
		     blr_and, 
			blr_eql, 
			   blr_field, 1, 16, 'R','D','B','$','T','R','I','G','G','E','R','_','N','A','M','E', 
			   blr_field, 0, 16, 'R','D','B','$','T','R','I','G','G','E','R','_','N','A','M','E', 
			blr_or, 
			   blr_neq, 
			      blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			      blr_literal, blr_long, 0, 1,0,0,0,
			   blr_missing, 
			      blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 1, 11, 'R','D','B','$','M','E','S','S','A','G','E', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 1, 16, 'R','D','B','$','T','R','I','G','G','E','R','_','N','A','M','E', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_field, 1, 18, 'R','D','B','$','M','E','S','S','A','G','E','_','N','U','M','B','E','R', 
			blr_parameter, 0, 3,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 2,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_24 */

static const short
   isc_30l = 383;
static const char
   isc_30 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 13,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_int64, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 12, 'R','D','B','$','T','R','I','G','G','E','R','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','T','R','I','G','G','E','R','_','S','O','U','R','C','E', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','T','R','I','G','G','E','R','_','B','L','R', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','T','R','I','G','G','E','R','_','T','Y','P','E', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			blr_parameter2, 0, 4,0, 12,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','T','R','I','G','G','E','R','_','N','A','M','E', 
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 9, 'R','D','B','$','F','L','A','G','S', 
			blr_parameter2, 0, 8,0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','T','R','I','G','G','E','R','_','I','N','A','C','T','I','V','E', 
			blr_parameter, 0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter, 0, 10,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','T','R','I','G','G','E','R','_','S','E','Q','U','E','N','C','E', 
			blr_parameter, 0, 11,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 6,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_30 */

static const short
   isc_45l = 501;
static const char
   isc_45 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 21,0, 
	    blr_cstring2, 0,0, 0,1, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_int64, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 12, 'R','D','B','$','T','R','I','G','G','E','R','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','E','N','T','R','Y','P','O','I','N','T', 
			blr_parameter2, 0, 0,0, 10,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','E','N','G','I','N','E','_','N','A','M','E', 
			blr_parameter2, 0, 1,0, 11,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','D','E','B','U','G','_','I','N','F','O', 
			blr_parameter2, 0, 2,0, 12,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','T','R','I','G','G','E','R','_','S','O','U','R','C','E', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','T','R','I','G','G','E','R','_','B','L','R', 
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','T','R','I','G','G','E','R','_','T','Y','P','E', 
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			blr_parameter2, 0, 7,0, 20,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','T','R','I','G','G','E','R','_','N','A','M','E', 
			blr_parameter, 0, 8,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','V','A','L','I','D','_','B','L','R', 
			blr_parameter2, 0, 14,0, 13,0, 
		     blr_assignment, 
			blr_field, 0, 9, 'R','D','B','$','F','L','A','G','S', 
			blr_parameter2, 0, 16,0, 15,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','T','R','I','G','G','E','R','_','I','N','A','C','T','I','V','E', 
			blr_parameter, 0, 17,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter, 0, 18,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','T','R','I','G','G','E','R','_','S','E','Q','U','E','N','C','E', 
			blr_parameter, 0, 19,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 9,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_45 */

static const short
   isc_68l = 116;
static const char
   isc_68 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 2,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_message, 0, 1,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 1, 
		     blr_relation, 9, 'R','D','B','$','R','O','L','E','S', 0, 
		     blr_boolean, 
			blr_eql, 
			   blr_field, 0, 13, 'R','D','B','$','R','O','L','E','_','N','A','M','E', 
			   blr_parameter, 0, 0,0, 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 0,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_parameter, 1, 1,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 0,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_68 */

static const short
   isc_74l = 332;
static const char
   isc_74 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 15,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 0,1, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_cstring2, 3,0, 2,0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 7, 'R','D','B','$','M','A','P', 0, 
		  blr_boolean, 
		     blr_eql, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_literal, blr_long, 0, 0,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter2, 0, 0,0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 10, 'R','D','B','$','M','A','P','_','T','O', 
			blr_parameter2, 0, 1,0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 12, 'R','D','B','$','M','A','P','_','F','R','O','M', 
			blr_parameter2, 0, 2,0, 11,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','M','A','P','_','F','R','O','M','_','T','Y','P','E', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 10, 'R','D','B','$','M','A','P','_','D','B', 
			blr_parameter2, 0, 4,0, 12,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','M','A','P','_','P','L','U','G','I','N', 
			blr_parameter2, 0, 5,0, 13,0, 
		     blr_assignment, 
			blr_field, 0, 12, 'R','D','B','$','M','A','P','_','N','A','M','E', 
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','M','A','P','_','T','O','_','T','Y','P','E', 
			blr_parameter, 0, 10,0, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','M','A','P','_','U','S','I','N','G', 
			blr_parameter, 0, 14,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 7,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_74 */

static const short
   isc_91l = 111;
static const char
   isc_91 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 3,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 9, 'R','D','B','$','R','O','L','E','S', 0, 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','O','W','N','E','R','_','N','A','M','E', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','R','O','L','E','_','N','A','M','E', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 2,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 2,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_91 */

static const short
   isc_96l = 187;
static const char
   isc_96 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 5,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 9, 'R','D','B','$','R','O','L','E','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_eql, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 0,0,0,0,
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter2, 0, 0,0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','O','W','N','E','R','_','N','A','M','E', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','R','O','L','E','_','N','A','M','E', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 3,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 3,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_96 */

static const short
   isc_103l = 263;
static const char
   isc_103 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 7,0, 
	    blr_cstring2, 0,0, 0,1, 
	    blr_long, 0, 
	    blr_long, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 9, 'R','D','B','$','F','I','L','E','S', 0, 
		  blr_boolean, 
		     blr_and, 
			blr_not, 
			   blr_missing, 
			      blr_field, 0, 17, 'R','D','B','$','S','H','A','D','O','W','_','N','U','M','B','E','R', 
			blr_neq, 
			   blr_field, 0, 17, 'R','D','B','$','S','H','A','D','O','W','_','N','U','M','B','E','R', 
			   blr_literal, blr_long, 0, 0,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','F','I','L','E','_','N','A','M','E', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','F','I','L','E','_','L','E','N','G','T','H', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','F','I','L','E','_','S','T','A','R','T', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','S','H','A','D','O','W','_','N','U','M','B','E','R', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','F','I','L','E','_','F','L','A','G','S', 
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','F','I','L','E','_','S','E','Q','U','E','N','C','E', 
			blr_parameter, 0, 6,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 3,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_103 */

static const short
   isc_112l = 174;
static const char
   isc_112 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 4,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 20, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S','E','S', 0, 
		  blr_boolean, 
		     blr_not, 
			blr_starting, 
			   blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			   blr_literal, blr_text, 4,0, 'S','Q','L','$',
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 0, 7, 'R','D','B','$','A','C','L', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 3,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 3,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_112 */

static const short
   isc_118l = 414;
static const char
   isc_118 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 15,0, 
	    blr_cstring2, 0,0, 0,1, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 13, 'R','D','B','$','R','E','L','A','T','I','O','N','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','E','X','T','E','R','N','A','L','_','F','I','L','E', 
			blr_parameter2, 0, 0,0, 10,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','O','W','N','E','R','_','N','A','M','E', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 24, 'R','D','B','$','E','X','T','E','R','N','A','L','_','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','V','I','E','W','_','S','O','U','R','C','E', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter2, 0, 5,0, 11,0, 
		     blr_assignment, 
			blr_field, 0, 12, 'R','D','B','$','V','I','E','W','_','B','L','R', 
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			blr_parameter, 0, 7,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','R','E','L','A','T','I','O','N','_','I','D', 
			blr_parameter, 0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 9, 'R','D','B','$','F','L','A','G','S', 
			blr_parameter2, 0, 13,0, 12,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter, 0, 14,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 8,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_118 */

static const short
   isc_135l = 449;
static const char
   isc_135 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 18,0, 
	    blr_cstring2, 0,0, 0,1, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 13, 'R','D','B','$','R','E','L','A','T','I','O','N','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','E','X','T','E','R','N','A','L','_','F','I','L','E', 
			blr_parameter2, 0, 0,0, 12,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','O','W','N','E','R','_','N','A','M','E', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 24, 'R','D','B','$','E','X','T','E','R','N','A','L','_','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','V','I','E','W','_','S','O','U','R','C','E', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter2, 0, 5,0, 13,0, 
		     blr_assignment, 
			blr_field, 0, 12, 'R','D','B','$','V','I','E','W','_','B','L','R', 
			blr_parameter2, 0, 6,0, 17,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			blr_parameter, 0, 7,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','R','E','L','A','T','I','O','N','_','I','D', 
			blr_parameter, 0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','T','Y','P','E', 
			blr_parameter2, 0, 11,0, 10,0, 
		     blr_assignment, 
			blr_field, 0, 9, 'R','D','B','$','F','L','A','G','S', 
			blr_parameter2, 0, 15,0, 14,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter, 0, 16,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 8,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_135 */

static const short
   isc_155l = 365;
static const char
   isc_155 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 8,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 0,0, 4,0, 
	    blr_cstring2, 0,0, 4,0, 
	    blr_cstring2, 0,0, 12,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 2, 
		  blr_relation, 24, 'R','D','B','$','R','E','L','A','T','I','O','N','_','C','O','N','S','T','R','A','I','N','T','S', 0, 
		  blr_relation, 13, 'R','D','B','$','R','E','L','A','T','I','O','N','S', 1, 
		  blr_boolean, 
		     blr_and, 
			blr_eql, 
			   blr_field, 1, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			   blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			blr_or, 
			   blr_missing, 
			      blr_field, 1, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_neq, 
			      blr_field, 1, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			      blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','I','N','D','E','X','_','N','A','M','E', 
			blr_parameter2, 0, 0,0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','C','O','N','S','T','R','A','I','N','T','_','N','A','M','E', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_field, 0, 22, 'R','D','B','$','I','N','I','T','I','A','L','L','Y','_','D','E','F','E','R','R','E','D', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','D','E','F','E','R','R','A','B','L','E', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','C','O','N','S','T','R','A','I','N','T','_','T','Y','P','E', 
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 6,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 6,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_155 */

static const short
   isc_165l = 215;
static const char
   isc_165 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 6,0, 
	    blr_cstring2, 0,0, 8,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 0,0, 12,0, 
	    blr_cstring2, 0,0, 12,0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 19, 'R','D','B','$','R','E','F','_','C','O','N','S','T','R','A','I','N','T','S', 0, 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','M','A','T','C','H','_','O','P','T','I','O','N', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','C','O','N','S','T','_','N','A','M','E','_','U','Q', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','C','O','N','S','T','R','A','I','N','T','_','N','A','M','E', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','L','E','T','E','_','R','U','L','E', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','U','P','D','A','T','E','_','R','U','L','E', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 5,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 5,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_165 */

static const short
   isc_173l = 254;
static const char
   isc_173 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 6,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_message, 0, 1,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 1, 
		     blr_relation, 24, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','P','A','R','A','M','E','T','E','R','S', 0, 
		     blr_boolean, 
			blr_eql, 
			   blr_field, 0, 18, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','N','A','M','E', 
			   blr_parameter, 0, 0,0, 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			   blr_parameter, 1, 0,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','F','I','E','L','D','_','S','O','U','R','C','E', 
			   blr_parameter, 1, 1,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','P','A','R','A','M','E','T','E','R','_','N','A','M','E', 
			   blr_parameter, 1, 2,0, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 3,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','P','A','R','A','M','E','T','E','R','_','T','Y','P','E', 
			   blr_parameter, 1, 4,0, 
			blr_assignment, 
			   blr_field, 0, 20, 'R','D','B','$','P','A','R','A','M','E','T','E','R','_','N','U','M','B','E','R', 
			   blr_parameter, 1, 5,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 3,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_173 */

static const short
   isc_183l = 509;
static const char
   isc_183 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 18,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_message, 0, 2,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 1, 
		     blr_relation, 24, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','P','A','R','A','M','E','T','E','R','S', 0, 
		     blr_boolean, 
			blr_and, 
			   blr_eql, 
			      blr_field, 0, 18, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','N','A','M','E', 
			      blr_parameter, 0, 1,0, 
			   blr_equiv, 
			      blr_field, 0, 16, 'R','D','B','$','P','A','C','K','A','G','E','_','N','A','M','E', 
			      blr_value_if, 
				 blr_eql, 
				    blr_parameter, 0, 0,0, 
				    blr_literal, blr_text, 0,0, 
				 blr_null, 
				 blr_parameter, 0, 0,0, 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			   blr_parameter2, 1, 0,0, 8,0, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			   blr_parameter2, 1, 1,0, 9,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','D','E','F','A','U','L','T','_','S','O','U','R','C','E', 
			   blr_parameter, 1, 2,0, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','D','E','F','A','U','L','T','_','V','A','L','U','E', 
			   blr_parameter, 1, 3,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			   blr_parameter, 1, 4,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','F','I','E','L','D','_','S','O','U','R','C','E', 
			   blr_parameter, 1, 5,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','P','A','R','A','M','E','T','E','R','_','N','A','M','E', 
			   blr_parameter, 1, 6,0, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 7,0, 
			blr_assignment, 
			   blr_field, 0, 23, 'R','D','B','$','P','A','R','A','M','E','T','E','R','_','M','E','C','H','A','N','I','S','M', 
			   blr_parameter2, 1, 11,0, 10,0, 
			blr_assignment, 
			   blr_field, 0, 13, 'R','D','B','$','N','U','L','L','_','F','L','A','G', 
			   blr_parameter2, 1, 13,0, 12,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','I','D', 
			   blr_parameter2, 1, 15,0, 14,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','P','A','R','A','M','E','T','E','R','_','T','Y','P','E', 
			   blr_parameter, 1, 16,0, 
			blr_assignment, 
			   blr_field, 0, 20, 'R','D','B','$','P','A','R','A','M','E','T','E','R','_','N','U','M','B','E','R', 
			   blr_parameter, 1, 17,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 7,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_183 */

static const short
   isc_206l = 346;
static const char
   isc_206 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 10,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 14, 'R','D','B','$','P','R','O','C','E','D','U','R','E','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','O','W','N','E','R','_','N','A','M','E', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter2, 0, 1,0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','B','L','R', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','S','O','U','R','C','E', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','N','A','M','E', 
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 21, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','O','U','T','P','U','T','S', 
			blr_parameter, 0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','I','N','P','U','T','S', 
			blr_parameter, 0, 9,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 6,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_206 */

static const short
   isc_218l = 567;
static const char
   isc_218 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 26,0, 
	    blr_cstring2, 0,0, 0,1, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 14, 'R','D','B','$','P','R','O','C','E','D','U','R','E','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','E','N','T','R','Y','P','O','I','N','T', 
			blr_parameter2, 0, 0,0, 13,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','E','N','G','I','N','E','_','N','A','M','E', 
			blr_parameter2, 0, 1,0, 14,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','D','E','B','U','G','_','I','N','F','O', 
			blr_parameter2, 0, 2,0, 15,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','O','W','N','E','R','_','N','A','M','E', 
			blr_parameter2, 0, 3,0, 20,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter2, 0, 4,0, 21,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','B','L','R', 
			blr_parameter2, 0, 5,0, 22,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','S','O','U','R','C','E', 
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','N','A','M','E', 
			blr_parameter, 0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','P','A','C','K','A','G','E','_','N','A','M','E', 
			blr_parameter2, 0, 9,0, 25,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 10,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','P','R','I','V','A','T','E','_','F','L','A','G', 
			blr_parameter2, 0, 12,0, 11,0, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','V','A','L','I','D','_','B','L','R', 
			blr_parameter2, 0, 17,0, 16,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','T','Y','P','E', 
			blr_parameter2, 0, 19,0, 18,0, 
		     blr_assignment, 
			blr_field, 0, 21, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','O','U','T','P','U','T','S', 
			blr_parameter, 0, 23,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','P','R','O','C','E','D','U','R','E','_','I','N','P','U','T','S', 
			blr_parameter, 0, 24,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 10,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_218 */

static const short
   isc_246l = 288;
static const char
   isc_246 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 12,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 12, 'R','D','B','$','P','A','C','K','A','G','E','S', 0, 
		  blr_boolean, 
		     blr_neq, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter2, 0, 0,0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','O','W','N','E','R','_','N','A','M','E', 
			blr_parameter2, 0, 1,0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter2, 0, 2,0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 23, 'R','D','B','$','P','A','C','K','A','G','E','_','B','O','D','Y','_','S','O','U','R','C','E', 
			blr_parameter2, 0, 3,0, 10,0, 
		     blr_assignment, 
			blr_field, 0, 25, 'R','D','B','$','P','A','C','K','A','G','E','_','H','E','A','D','E','R','_','S','O','U','R','C','E', 
			blr_parameter2, 0, 4,0, 11,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','P','A','C','K','A','G','E','_','N','A','M','E', 
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 6,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 6,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_246 */

static const short
   isc_260l = 868;
static const char
   isc_260 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 36,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 0,0, 128,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 10, 'R','D','B','$','F','I','E','L','D','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','M','I','S','S','I','N','G','_','S','O','U','R','C','E', 
			blr_parameter2, 0, 0,0, 18,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','D','E','F','A','U','L','T','_','S','O','U','R','C','E', 
			blr_parameter2, 0, 1,0, 19,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','C','O','M','P','U','T','E','D','_','S','O','U','R','C','E', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','C','O','M','P','U','T','E','D','_','B','L','R', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 21, 'R','D','B','$','V','A','L','I','D','A','T','I','O','N','_','S','O','U','R','C','E', 
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','V','A','L','I','D','A','T','I','O','N','_','B','L','R', 
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','D','E','F','A','U','L','T','_','V','A','L','U','E', 
			blr_parameter, 0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','M','I','S','S','I','N','G','_','V','A','L','U','E', 
			blr_parameter, 0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','Q','U','E','R','Y','_','H','E','A','D','E','R', 
			blr_parameter, 0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','E','D','I','T','_','S','T','R','I','N','G', 
			blr_parameter2, 0, 10,0, 34,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','Q','U','E','R','Y','_','N','A','M','E', 
			blr_parameter2, 0, 11,0, 35,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			blr_parameter, 0, 12,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 13,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','I','D', 
			blr_parameter2, 0, 15,0, 14,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','I','D', 
			blr_parameter2, 0, 17,0, 16,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','L','E','N','G','T','H', 
			blr_parameter2, 0, 21,0, 20,0, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','N','U','L','L','_','F','L','A','G', 
			blr_parameter2, 0, 23,0, 22,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','D','I','M','E','N','S','I','O','N','S', 
			blr_parameter, 0, 24,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','E','X','T','E','R','N','A','L','_','S','C','A','L','E', 
			blr_parameter, 0, 25,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','E','X','T','E','R','N','A','L','_','T','Y','P','E', 
			blr_parameter, 0, 26,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','E','X','T','E','R','N','A','L','_','L','E','N','G','T','H', 
			blr_parameter, 0, 27,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter, 0, 28,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','G','M','E','N','T','_','L','E','N','G','T','H', 
			blr_parameter, 0, 29,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','F','I','E','L','D','_','S','C','A','L','E', 
			blr_parameter, 0, 30,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','F','I','E','L','D','_','S','U','B','_','T','Y','P','E', 
			blr_parameter, 0, 31,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','F','I','E','L','D','_','L','E','N','G','T','H', 
			blr_parameter, 0, 32,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','T','Y','P','E', 
			blr_parameter, 0, 33,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 13,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_260 */

static const short
   isc_298l = 901;
static const char
   isc_298 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 38,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 0,0, 128,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 10, 'R','D','B','$','F','I','E','L','D','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','M','I','S','S','I','N','G','_','S','O','U','R','C','E', 
			blr_parameter2, 0, 0,0, 20,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','D','E','F','A','U','L','T','_','S','O','U','R','C','E', 
			blr_parameter2, 0, 1,0, 21,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','C','O','M','P','U','T','E','D','_','S','O','U','R','C','E', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','C','O','M','P','U','T','E','D','_','B','L','R', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 21, 'R','D','B','$','V','A','L','I','D','A','T','I','O','N','_','S','O','U','R','C','E', 
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','V','A','L','I','D','A','T','I','O','N','_','B','L','R', 
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','D','E','F','A','U','L','T','_','V','A','L','U','E', 
			blr_parameter, 0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','M','I','S','S','I','N','G','_','V','A','L','U','E', 
			blr_parameter, 0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','Q','U','E','R','Y','_','H','E','A','D','E','R', 
			blr_parameter, 0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','E','D','I','T','_','S','T','R','I','N','G', 
			blr_parameter2, 0, 10,0, 36,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','Q','U','E','R','Y','_','N','A','M','E', 
			blr_parameter2, 0, 11,0, 37,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			blr_parameter, 0, 12,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 13,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','F','I','E','L','D','_','P','R','E','C','I','S','I','O','N', 
			blr_parameter2, 0, 15,0, 14,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','I','D', 
			blr_parameter2, 0, 17,0, 16,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','I','D', 
			blr_parameter2, 0, 19,0, 18,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','L','E','N','G','T','H', 
			blr_parameter2, 0, 23,0, 22,0, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','N','U','L','L','_','F','L','A','G', 
			blr_parameter2, 0, 25,0, 24,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','D','I','M','E','N','S','I','O','N','S', 
			blr_parameter, 0, 26,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','E','X','T','E','R','N','A','L','_','S','C','A','L','E', 
			blr_parameter, 0, 27,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','E','X','T','E','R','N','A','L','_','T','Y','P','E', 
			blr_parameter, 0, 28,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','E','X','T','E','R','N','A','L','_','L','E','N','G','T','H', 
			blr_parameter, 0, 29,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter, 0, 30,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','G','M','E','N','T','_','L','E','N','G','T','H', 
			blr_parameter, 0, 31,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','F','I','E','L','D','_','S','C','A','L','E', 
			blr_parameter, 0, 32,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','F','I','E','L','D','_','S','U','B','_','T','Y','P','E', 
			blr_parameter, 0, 33,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','F','I','E','L','D','_','L','E','N','G','T','H', 
			blr_parameter, 0, 34,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','T','Y','P','E', 
			blr_parameter, 0, 35,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 13,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_298 */

static const short
   isc_338l = 947;
static const char
   isc_338 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 42,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 0,0, 128,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 10, 'R','D','B','$','F','I','E','L','D','S', 0, 
		  blr_boolean, 
		     blr_neq, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','O','W','N','E','R','_','N','A','M','E', 
			blr_parameter2, 0, 0,0, 16,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter2, 0, 1,0, 17,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','M','I','S','S','I','N','G','_','S','O','U','R','C','E', 
			blr_parameter2, 0, 2,0, 24,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','D','E','F','A','U','L','T','_','S','O','U','R','C','E', 
			blr_parameter2, 0, 3,0, 25,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','C','O','M','P','U','T','E','D','_','S','O','U','R','C','E', 
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','C','O','M','P','U','T','E','D','_','B','L','R', 
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 21, 'R','D','B','$','V','A','L','I','D','A','T','I','O','N','_','S','O','U','R','C','E', 
			blr_parameter, 0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','V','A','L','I','D','A','T','I','O','N','_','B','L','R', 
			blr_parameter, 0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','D','E','F','A','U','L','T','_','V','A','L','U','E', 
			blr_parameter, 0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','M','I','S','S','I','N','G','_','V','A','L','U','E', 
			blr_parameter, 0, 10,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','Q','U','E','R','Y','_','H','E','A','D','E','R', 
			blr_parameter, 0, 11,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','E','D','I','T','_','S','T','R','I','N','G', 
			blr_parameter2, 0, 12,0, 40,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','Q','U','E','R','Y','_','N','A','M','E', 
			blr_parameter2, 0, 13,0, 41,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			blr_parameter, 0, 14,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 15,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','F','I','E','L','D','_','P','R','E','C','I','S','I','O','N', 
			blr_parameter2, 0, 19,0, 18,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','I','D', 
			blr_parameter2, 0, 21,0, 20,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','I','D', 
			blr_parameter2, 0, 23,0, 22,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','L','E','N','G','T','H', 
			blr_parameter2, 0, 27,0, 26,0, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','N','U','L','L','_','F','L','A','G', 
			blr_parameter2, 0, 29,0, 28,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','D','I','M','E','N','S','I','O','N','S', 
			blr_parameter, 0, 30,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','E','X','T','E','R','N','A','L','_','S','C','A','L','E', 
			blr_parameter, 0, 31,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','E','X','T','E','R','N','A','L','_','T','Y','P','E', 
			blr_parameter, 0, 32,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','E','X','T','E','R','N','A','L','_','L','E','N','G','T','H', 
			blr_parameter, 0, 33,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter, 0, 34,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','G','M','E','N','T','_','L','E','N','G','T','H', 
			blr_parameter, 0, 35,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','F','I','E','L','D','_','S','C','A','L','E', 
			blr_parameter, 0, 36,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','F','I','E','L','D','_','S','U','B','_','T','Y','P','E', 
			blr_parameter, 0, 37,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','F','I','E','L','D','_','L','E','N','G','T','H', 
			blr_parameter, 0, 38,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','T','Y','P','E', 
			blr_parameter, 0, 39,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 15,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_338 */

static const short
   isc_382l = 141;
static const char
   isc_382 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 2,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 14, 'R','D','B','$','G','E','N','E','R','A','T','O','R','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','G','E','N','E','R','A','T','O','R','_','N','A','M','E', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 1,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 1,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_382 */

static const short
   isc_386l = 170;
static const char
   isc_386 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 4,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 14, 'R','D','B','$','G','E','N','E','R','A','T','O','R','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter2, 0, 0,0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','G','E','N','E','R','A','T','O','R','_','N','A','M','E', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 2,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 2,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_386 */

static const short
   isc_392l = 305;
static const char
   isc_392 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 12,0, 
	    blr_int64, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_long, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 14, 'R','D','B','$','G','E','N','E','R','A','T','O','R','S', 0, 
		  blr_boolean, 
		     blr_neq, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','I','N','I','T','I','A','L','_','V','A','L','U','E', 
			blr_parameter2, 0, 0,0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','O','W','N','E','R','_','N','A','M','E', 
			blr_parameter2, 0, 1,0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter2, 0, 2,0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter2, 0, 3,0, 11,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','G','E','N','E','R','A','T','O','R','_','N','A','M','E', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 23, 'R','D','B','$','G','E','N','E','R','A','T','O','R','_','I','N','C','R','E','M','E','N','T', 
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter, 0, 10,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 6,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_392 */

static const short
   isc_406l = 329;
static const char
   isc_406 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 10,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_message, 0, 1,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 1, 
		     blr_relation, 22, 'R','D','B','$','F','U','N','C','T','I','O','N','_','A','R','G','U','M','E','N','T','S', 0, 
		     blr_boolean, 
			blr_eql, 
			   blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			   blr_parameter, 0, 0,0, 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			   blr_parameter, 1, 0,0, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 1,0, 
			blr_assignment, 
			   blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','I','D', 
			   blr_parameter2, 1, 3,0, 2,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','F','I','E','L','D','_','S','U','B','_','T','Y','P','E', 
			   blr_parameter, 1, 4,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','F','I','E','L','D','_','L','E','N','G','T','H', 
			   blr_parameter, 1, 5,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','F','I','E','L','D','_','S','C','A','L','E', 
			   blr_parameter, 1, 6,0, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','T','Y','P','E', 
			   blr_parameter, 1, 7,0, 
			blr_assignment, 
			   blr_field, 0, 13, 'R','D','B','$','M','E','C','H','A','N','I','S','M', 
			   blr_parameter, 1, 8,0, 
			blr_assignment, 
			   blr_field, 0, 21, 'R','D','B','$','A','R','G','U','M','E','N','T','_','P','O','S','I','T','I','O','N', 
			   blr_parameter, 1, 9,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 1,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_406 */

static const short
   isc_420l = 362;
static const char
   isc_420 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 12,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_message, 0, 1,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 1, 
		     blr_relation, 22, 'R','D','B','$','F','U','N','C','T','I','O','N','_','A','R','G','U','M','E','N','T','S', 0, 
		     blr_boolean, 
			blr_eql, 
			   blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			   blr_parameter, 0, 0,0, 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			   blr_parameter, 1, 0,0, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 1,0, 
			blr_assignment, 
			   blr_field, 0, 19, 'R','D','B','$','F','I','E','L','D','_','P','R','E','C','I','S','I','O','N', 
			   blr_parameter2, 1, 3,0, 2,0, 
			blr_assignment, 
			   blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','I','D', 
			   blr_parameter2, 1, 5,0, 4,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','F','I','E','L','D','_','S','U','B','_','T','Y','P','E', 
			   blr_parameter, 1, 6,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','F','I','E','L','D','_','L','E','N','G','T','H', 
			   blr_parameter, 1, 7,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','F','I','E','L','D','_','S','C','A','L','E', 
			   blr_parameter, 1, 8,0, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','T','Y','P','E', 
			   blr_parameter, 1, 9,0, 
			blr_assignment, 
			   blr_field, 0, 13, 'R','D','B','$','M','E','C','H','A','N','I','S','M', 
			   blr_parameter, 1, 10,0, 
			blr_assignment, 
			   blr_field, 0, 21, 'R','D','B','$','A','R','G','U','M','E','N','T','_','P','O','S','I','T','I','O','N', 
			   blr_parameter, 1, 11,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 1,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_420 */

static const short
   isc_436l = 753;
static const char
   isc_436 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 34,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_message, 0, 2,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 1, 
		     blr_relation, 22, 'R','D','B','$','F','U','N','C','T','I','O','N','_','A','R','G','U','M','E','N','T','S', 0, 
		     blr_boolean, 
			blr_and, 
			   blr_eql, 
			      blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			      blr_parameter, 0, 1,0, 
			   blr_equiv, 
			      blr_field, 0, 16, 'R','D','B','$','P','A','C','K','A','G','E','_','N','A','M','E', 
			      blr_value_if, 
				 blr_eql, 
				    blr_parameter, 0, 0,0, 
				    blr_literal, blr_text, 0,0, 
				 blr_null, 
				 blr_parameter, 0, 0,0, 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			   blr_parameter2, 1, 0,0, 10,0, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			   blr_parameter2, 1, 1,0, 11,0, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			   blr_parameter2, 1, 2,0, 12,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','D','E','F','A','U','L','T','_','S','O','U','R','C','E', 
			   blr_parameter2, 1, 3,0, 19,0, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','D','E','F','A','U','L','T','_','V','A','L','U','E', 
			   blr_parameter2, 1, 4,0, 20,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','F','I','E','L','D','_','S','O','U','R','C','E', 
			   blr_parameter2, 1, 5,0, 21,0, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','A','R','G','U','M','E','N','T','_','N','A','M','E', 
			   blr_parameter2, 1, 6,0, 22,0, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			   blr_parameter, 1, 7,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','P','A','C','K','A','G','E','_','N','A','M','E', 
			   blr_parameter2, 1, 8,0, 33,0, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 9,0, 
			blr_assignment, 
			   blr_field, 0, 22, 'R','D','B','$','A','R','G','U','M','E','N','T','_','M','E','C','H','A','N','I','S','M', 
			   blr_parameter2, 1, 14,0, 13,0, 
			blr_assignment, 
			   blr_field, 0, 13, 'R','D','B','$','N','U','L','L','_','F','L','A','G', 
			   blr_parameter2, 1, 16,0, 15,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','I','D', 
			   blr_parameter2, 1, 18,0, 17,0, 
			blr_assignment, 
			   blr_field, 0, 19, 'R','D','B','$','F','I','E','L','D','_','P','R','E','C','I','S','I','O','N', 
			   blr_parameter2, 1, 24,0, 23,0, 
			blr_assignment, 
			   blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','I','D', 
			   blr_parameter2, 1, 26,0, 25,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','F','I','E','L','D','_','S','U','B','_','T','Y','P','E', 
			   blr_parameter, 1, 27,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','F','I','E','L','D','_','L','E','N','G','T','H', 
			   blr_parameter, 1, 28,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','F','I','E','L','D','_','S','C','A','L','E', 
			   blr_parameter, 1, 29,0, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','T','Y','P','E', 
			   blr_parameter, 1, 30,0, 
			blr_assignment, 
			   blr_field, 0, 13, 'R','D','B','$','M','E','C','H','A','N','I','S','M', 
			   blr_parameter, 1, 31,0, 
			blr_assignment, 
			   blr_field, 0, 21, 'R','D','B','$','A','R','G','U','M','E','N','T','_','P','O','S','I','T','I','O','N', 
			   blr_parameter, 1, 32,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 9,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_436 */

static const short
   isc_475l = 302;
static const char
   isc_475 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 8,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 0,0, 0,1, 
	    blr_cstring2, 0,0, 0,1, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 13, 'R','D','B','$','F','U','N','C','T','I','O','N','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','Q','U','E','R','Y','_','N','A','M','E', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','E','N','T','R','Y','P','O','I','N','T', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','M','O','D','U','L','E','_','N','A','M','E', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','T','Y','P','E', 
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','R','E','T','U','R','N','_','A','R','G','U','M','E','N','T', 
			blr_parameter, 0, 7,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 5,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_475 */

static const short
   isc_485l = 626;
static const char
   isc_485 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 30,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 0,0, 0,1, 
	    blr_cstring2, 0,0, 0,1, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 13, 'R','D','B','$','F','U','N','C','T','I','O','N','S', 0, 
		  blr_boolean, 
		     blr_neq, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','O','W','N','E','R','_','N','A','M','E', 
			blr_parameter2, 0, 0,0, 17,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter2, 0, 1,0, 18,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','D','E','B','U','G','_','I','N','F','O', 
			blr_parameter2, 0, 2,0, 19,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','F','U','N','C','T','I','O','N','_','S','O','U','R','C','E', 
			blr_parameter2, 0, 3,0, 22,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','F','U','N','C','T','I','O','N','_','B','L','R', 
			blr_parameter2, 0, 4,0, 23,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','E','N','G','I','N','E','_','N','A','M','E', 
			blr_parameter2, 0, 5,0, 26,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','Q','U','E','R','Y','_','N','A','M','E', 
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','E','N','T','R','Y','P','O','I','N','T', 
			blr_parameter, 0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','M','O','D','U','L','E','_','N','A','M','E', 
			blr_parameter, 0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			blr_parameter, 0, 10,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','P','A','C','K','A','G','E','_','N','A','M','E', 
			blr_parameter2, 0, 11,0, 29,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 12,0, 
		     blr_assignment, 
			blr_field, 0, 22, 'R','D','B','$','D','E','T','E','R','M','I','N','I','S','T','I','C','_','F','L','A','G', 
			blr_parameter2, 0, 14,0, 13,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','L','E','G','A','C','Y','_','F','L','A','G', 
			blr_parameter2, 0, 16,0, 15,0, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','V','A','L','I','D','_','B','L','R', 
			blr_parameter2, 0, 21,0, 20,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','P','R','I','V','A','T','E','_','F','L','A','G', 
			blr_parameter2, 0, 25,0, 24,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','T','Y','P','E', 
			blr_parameter, 0, 27,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','R','E','T','U','R','N','_','A','R','G','U','M','E','N','T', 
			blr_parameter, 0, 28,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 12,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_485 */

static const short
   isc_517l = 274;
static const char
   isc_517 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 7,0, 
	    blr_cstring2, 0,0, 0,1, 
	    blr_cstring2, 0,0, 0,1, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 11, 'R','D','B','$','F','I','L','T','E','R','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','E','N','T','R','Y','P','O','I','N','T', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','M','O','D','U','L','E','_','N','A','M','E', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','O','U','T','P','U','T','_','S','U','B','_','T','Y','P','E', 
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','I','N','P','U','T','_','S','U','B','_','T','Y','P','E', 
			blr_parameter, 0, 6,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 4,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_517 */

static const short
   isc_526l = 169;
static const char
   isc_526 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 5,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_long, 0, 
	    blr_long, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 20, 'R','D','B','$','F','I','E','L','D','_','D','I','M','E','N','S','I','O','N','S', 0, 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','U','P','P','E','R','_','B','O','U','N','D', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','L','O','W','E','R','_','B','O','U','N','D', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 13, 'R','D','B','$','D','I','M','E','N','S','I','O','N', 
			blr_parameter, 0, 4,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 3,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_526 */

static const short
   isc_533l = 190;
static const char
   isc_533 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 4,0, 
	    blr_quad, 0, 
	    blr_cstring2, 0,0, 0,4, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 14, 'R','D','B','$','E','X','C','E','P','T','I','O','N','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 0, 11, 'R','D','B','$','M','E','S','S','A','G','E', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','E','X','C','E','P','T','I','O','N','_','N','A','M','E', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 3,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 3,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_533 */

static const short
   isc_539l = 236;
static const char
   isc_539 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 8,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 0,0, 0,4, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 14, 'R','D','B','$','E','X','C','E','P','T','I','O','N','S', 0, 
		  blr_boolean, 
		     blr_neq, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','O','W','N','E','R','_','N','A','M','E', 
			blr_parameter2, 0, 0,0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter2, 0, 1,0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_field, 0, 11, 'R','D','B','$','M','E','S','S','A','G','E', 
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','E','X','C','E','P','T','I','O','N','_','N','A','M','E', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 5,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 5,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_539 */

static const short
   isc_549l = 160;
static const char
   isc_549 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 6,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 12, 'R','D','B','$','D','A','T','A','B','A','S','E', 0, 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 22, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','N','A','M','E', 
			blr_parameter2, 0, 0,0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter2, 0, 2,0, 5,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 3,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 3,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_549 */

static const short
   isc_557l = 184;
static const char
   isc_557 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 8,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_long, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 12, 'R','D','B','$','D','A','T','A','B','A','S','E', 0, 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 22, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','N','A','M','E', 
			blr_parameter2, 0, 0,0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter2, 0, 2,0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 10, 'R','D','B','$','L','I','N','G','E','R', 
			blr_parameter2, 0, 3,0, 5,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 4,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 4,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_557 */

static const short
   isc_567l = 319;
static const char
   isc_567 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 10,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 14, 'R','D','B','$','C','O','L','L','A','T','I','O','N','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			blr_parameter2, 0, 0,0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter2, 0, 1,0, 5,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','N','A','M','E', 
			blr_parameter, 0, 2,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 24, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','A','T','T','R','I','B','U','T','E','S', 
			blr_parameter, 0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','I','D', 
			blr_parameter, 0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','I','D', 
			blr_parameter, 0, 9,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 3,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_567 */

static const short
   isc_579l = 396;
static const char
   isc_579 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 14,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 14, 'R','D','B','$','C','O','L','L','A','T','I','O','N','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 23, 'R','D','B','$','S','P','E','C','I','F','I','C','_','A','T','T','R','I','B','U','T','E','S', 
			blr_parameter2, 0, 0,0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 23, 'R','D','B','$','B','A','S','E','_','C','O','L','L','A','T','I','O','N','_','N','A','M','E', 
			blr_parameter2, 0, 1,0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			blr_parameter2, 0, 2,0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter2, 0, 3,0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','N','A','M','E', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 5,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter, 0, 10,0, 
		     blr_assignment, 
			blr_field, 0, 24, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','A','T','T','R','I','B','U','T','E','S', 
			blr_parameter, 0, 11,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','I','D', 
			blr_parameter, 0, 12,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','I','D', 
			blr_parameter, 0, 13,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 5,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_579 */

static const short
   isc_595l = 442;
static const char
   isc_595 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 18,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 14, 'R','D','B','$','C','O','L','L','A','T','I','O','N','S', 0, 
		  blr_boolean, 
		     blr_neq, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_literal, blr_long, 0, 1,0,0,0,
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','O','W','N','E','R','_','N','A','M','E', 
			blr_parameter2, 0, 0,0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter2, 0, 1,0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 23, 'R','D','B','$','S','P','E','C','I','F','I','C','_','A','T','T','R','I','B','U','T','E','S', 
			blr_parameter2, 0, 2,0, 10,0, 
		     blr_assignment, 
			blr_field, 0, 23, 'R','D','B','$','B','A','S','E','_','C','O','L','L','A','T','I','O','N','_','N','A','M','E', 
			blr_parameter2, 0, 3,0, 11,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			blr_parameter2, 0, 4,0, 12,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter2, 0, 5,0, 13,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','N','A','M','E', 
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter, 0, 14,0, 
		     blr_assignment, 
			blr_field, 0, 24, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','A','T','T','R','I','B','U','T','E','S', 
			blr_parameter, 0, 15,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','I','D', 
			blr_parameter, 0, 16,0, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','I','D', 
			blr_parameter, 0, 17,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 7,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_595 */

static const short
   isc_615l = 135;
static const char
   isc_615 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 4,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 21, 'R','D','B','$','C','H','E','C','K','_','C','O','N','S','T','R','A','I','N','T','S', 0, 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 16, 'R','D','B','$','T','R','I','G','G','E','R','_','N','A','M','E', 
			blr_parameter2, 0, 0,0, 3,0, 
		     blr_assignment, 
			blr_field, 0, 19, 'R','D','B','$','C','O','N','S','T','R','A','I','N','T','_','N','A','M','E', 
			blr_parameter, 0, 1,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 2,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 2,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_615 */

static const short
   isc_621l = 465;
static const char
   isc_621 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 15,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_long, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 18, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_missing, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_or, 
			   blr_neq, 
			      blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			      blr_literal, blr_long, 0, 1,0,0,0,
			   blr_neq, 
			      blr_field, 0, 24, 'R','D','B','$','D','E','F','A','U','L','T','_','C','O','L','L','A','T','E','_','N','A','M','E', 
			      blr_field, 0, 22, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','N','A','M','E', 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 24, 'R','D','B','$','D','E','F','A','U','L','T','_','C','O','L','L','A','T','E','_','N','A','M','E', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			blr_parameter2, 0, 1,0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter2, 0, 2,0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','F','O','R','M','_','O','F','_','U','S','E', 
			blr_parameter2, 0, 3,0, 12,0, 
		     blr_assignment, 
			blr_field, 0, 22, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','N','A','M','E', 
			blr_parameter, 0, 4,0, 
		     blr_assignment, 
			blr_field, 0, 24, 'R','D','B','$','N','U','M','B','E','R','_','O','F','_','C','H','A','R','A','C','T','E','R','S', 
			blr_parameter2, 0, 5,0, 11,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 23, 'R','D','B','$','B','Y','T','E','S','_','P','E','R','_','C','H','A','R','A','C','T','E','R', 
			blr_parameter, 0, 7,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','I','D', 
			blr_parameter, 0, 10,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter2, 0, 14,0, 13,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 6,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_621 */

static const short
   isc_638l = 507;
static const char
   isc_638 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 0, 18,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_long, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_begin, 
	    blr_for, 
	       blr_rse, 1, 
		  blr_relation, 18, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','S', 0, 
		  blr_boolean, 
		     blr_or, 
			blr_neq, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_literal, blr_long, 0, 1,0,0,0,
			blr_neq, 
			   blr_field, 0, 24, 'R','D','B','$','D','E','F','A','U','L','T','_','C','O','L','L','A','T','E','_','N','A','M','E', 
			   blr_field, 0, 22, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','N','A','M','E', 
		  blr_end, 
	       blr_send, 0, 
		  blr_begin, 
		     blr_assignment, 
			blr_field, 0, 24, 'R','D','B','$','D','E','F','A','U','L','T','_','C','O','L','L','A','T','E','_','N','A','M','E', 
			blr_parameter, 0, 0,0, 
		     blr_assignment, 
			blr_field, 0, 14, 'R','D','B','$','O','W','N','E','R','_','N','A','M','E', 
			blr_parameter2, 0, 1,0, 9,0, 
		     blr_assignment, 
			blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			blr_parameter2, 0, 2,0, 10,0, 
		     blr_assignment, 
			blr_field, 0, 17, 'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A','M','E', 
			blr_parameter2, 0, 3,0, 12,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			blr_parameter2, 0, 4,0, 13,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','F','O','R','M','_','O','F','_','U','S','E', 
			blr_parameter2, 0, 5,0, 16,0, 
		     blr_assignment, 
			blr_field, 0, 22, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','N','A','M','E', 
			blr_parameter, 0, 6,0, 
		     blr_assignment, 
			blr_field, 0, 24, 'R','D','B','$','N','U','M','B','E','R','_','O','F','_','C','H','A','R','A','C','T','E','R','S', 
			blr_parameter2, 0, 7,0, 15,0, 
		     blr_assignment, 
			blr_literal, blr_long, 0, 1,0,0,0,
			blr_parameter, 0, 8,0, 
		     blr_assignment, 
			blr_field, 0, 23, 'R','D','B','$','B','Y','T','E','S','_','P','E','R','_','C','H','A','R','A','C','T','E','R', 
			blr_parameter, 0, 11,0, 
		     blr_assignment, 
			blr_field, 0, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','I','D', 
			blr_parameter, 0, 14,0, 
		     blr_assignment, 
			blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			blr_parameter, 0, 17,0, 
		     blr_end, 
	    blr_send, 0, 
	       blr_assignment, 
		  blr_literal, blr_long, 0, 0,0,0,0,
		  blr_parameter, 0, 8,0, 
	    blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_638 */

static const short
   isc_658l = 185;
static const char
   isc_658 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 4,0, 
	    blr_cstring2, 3,0, 0,1, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_message, 0, 1,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 1, 
		     blr_relation, 18, 'R','D','B','$','V','I','E','W','_','R','E','L','A','T','I','O','N','S', 0, 
		     blr_boolean, 
			blr_eql, 
			   blr_field, 0, 13, 'R','D','B','$','V','I','E','W','_','N','A','M','E', 
			   blr_parameter, 0, 0,0, 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','C','O','N','T','E','X','T','_','N','A','M','E', 
			   blr_parameter, 1, 0,0, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			   blr_parameter, 1, 1,0, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 2,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','V','I','E','W','_','C','O','N','T','E','X','T', 
			   blr_parameter, 1, 3,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 2,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_658 */

static const short
   isc_666l = 248;
static const char
   isc_666 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 8,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 0,1, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_message, 0, 1,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 1, 
		     blr_relation, 18, 'R','D','B','$','V','I','E','W','_','R','E','L','A','T','I','O','N','S', 0, 
		     blr_boolean, 
			blr_eql, 
			   blr_field, 0, 13, 'R','D','B','$','V','I','E','W','_','N','A','M','E', 
			   blr_parameter, 0, 0,0, 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','P','A','C','K','A','G','E','_','N','A','M','E', 
			   blr_parameter2, 1, 0,0, 4,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','C','O','N','T','E','X','T','_','N','A','M','E', 
			   blr_parameter, 1, 1,0, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			   blr_parameter, 1, 2,0, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 3,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','C','O','N','T','E','X','T','_','T','Y','P','E', 
			   blr_parameter2, 1, 6,0, 5,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','V','I','E','W','_','C','O','N','T','E','X','T', 
			   blr_parameter, 1, 7,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 3,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_666 */

static const short
   isc_678l = 152;
static const char
   isc_678 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 2,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	 blr_message, 0, 1,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 1, 
		     blr_relation, 18, 'R','D','B','$','I','N','D','E','X','_','S','E','G','M','E','N','T','S', 0, 
		     blr_boolean, 
			blr_eql, 
			   blr_field, 0, 14, 'R','D','B','$','I','N','D','E','X','_','N','A','M','E', 
			   blr_parameter, 0, 0,0, 
		     blr_sort, 1, 
			blr_ascending, 
			   blr_field, 0, 18, 'R','D','B','$','F','I','E','L','D','_','P','O','S','I','T','I','O','N', 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			   blr_parameter, 1, 0,0, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 1,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 1,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_678 */

static const short
   isc_684l = 190;
static const char
   isc_684 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 1,0, 
	    blr_short, 0, 
	 blr_message, 0, 2,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 2, 
		     blr_relation, 18, 'R','D','B','$','I','N','D','E','X','_','S','E','G','M','E','N','T','S', 0, 
		     blr_relation, 19, 'R','D','B','$','R','E','L','A','T','I','O','N','_','F','I','E','L','D','S', 1, 
		     blr_boolean, 
			blr_and, 
			   blr_eql, 
			      blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			      blr_field, 1, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			   blr_and, 
			      blr_eql, 
				 blr_field, 0, 14, 'R','D','B','$','I','N','D','E','X','_','N','A','M','E', 
				 blr_parameter, 0, 1,0, 
			      blr_eql, 
				 blr_field, 1, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
				 blr_parameter, 0, 0,0, 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 0,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 0,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_684 */

static const short
   isc_690l = 352;
static const char
   isc_690 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 13,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_message, 0, 1,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 1, 
		     blr_relation, 11, 'R','D','B','$','I','N','D','I','C','E','S', 0, 
		     blr_boolean, 
			blr_eql, 
			   blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			   blr_parameter, 0, 0,0, 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','F','O','R','E','I','G','N','_','K','E','Y', 
			   blr_parameter2, 1, 0,0, 6,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','E','X','P','R','E','S','S','I','O','N','_','B','L','R', 
			   blr_parameter2, 1, 1,0, 7,0, 
			blr_assignment, 
			   blr_field, 0, 21, 'R','D','B','$','E','X','P','R','E','S','S','I','O','N','_','S','O','U','R','C','E', 
			   blr_parameter2, 1, 2,0, 8,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			   blr_parameter, 1, 3,0, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','I','N','D','E','X','_','N','A','M','E', 
			   blr_parameter, 1, 4,0, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 5,0, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','I','N','D','E','X','_','T','Y','P','E', 
			   blr_parameter, 1, 9,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','U','N','I','Q','U','E','_','F','L','A','G', 
			   blr_parameter, 1, 10,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','I','N','D','E','X','_','I','N','A','C','T','I','V','E', 
			   blr_parameter, 1, 11,0, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','S','E','G','M','E','N','T','_','C','O','U','N','T', 
			   blr_parameter, 1, 12,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 5,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_690 */

static const short
   isc_707l = 195;
static const char
   isc_707 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 4,0, 
	    blr_long, 0, 
	    blr_long, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_message, 0, 1,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 1, 
		     blr_relation, 20, 'R','D','B','$','F','I','E','L','D','_','D','I','M','E','N','S','I','O','N','S', 0, 
		     blr_boolean, 
			blr_eql, 
			   blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			   blr_parameter, 0, 0,0, 
		     blr_sort, 1, 
			blr_ascending, 
			   blr_field, 0, 13, 'R','D','B','$','D','I','M','E','N','S','I','O','N', 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','U','P','P','E','R','_','B','O','U','N','D', 
			   blr_parameter, 1, 0,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','L','O','W','E','R','_','B','O','U','N','D', 
			   blr_parameter, 1, 1,0, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 2,0, 
			blr_assignment, 
			   blr_field, 0, 13, 'R','D','B','$','D','I','M','E','N','S','I','O','N', 
			   blr_parameter, 1, 3,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 2,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_707 */

static const short
   isc_715l = 854;
static const char
   isc_715 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 35,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 0,0, 128,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_message, 0, 1,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 2, 
		     blr_relation, 19, 'R','D','B','$','R','E','L','A','T','I','O','N','_','F','I','E','L','D','S', 0, 
		     blr_relation, 10, 'R','D','B','$','F','I','E','L','D','S', 1, 
		     blr_boolean, 
			blr_and, 
			   blr_eql, 
			      blr_field, 0, 16, 'R','D','B','$','F','I','E','L','D','_','S','O','U','R','C','E', 
			      blr_field, 1, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			   blr_eql, 
			      blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			      blr_parameter, 0, 0,0, 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','D','E','F','A','U','L','T','_','S','O','U','R','C','E', 
			   blr_parameter2, 1, 0,0, 17,0, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','D','E','F','A','U','L','T','_','V','A','L','U','E', 
			   blr_parameter2, 1, 1,0, 18,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			   blr_parameter, 1, 2,0, 
			blr_assignment, 
			   blr_field, 1, 16, 'R','D','B','$','C','O','M','P','U','T','E','D','_','B','L','R', 
			   blr_parameter, 1, 3,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','C','O','M','P','L','E','X','_','N','A','M','E', 
			   blr_parameter, 1, 4,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','E','D','I','T','_','S','T','R','I','N','G', 
			   blr_parameter, 1, 5,0, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','Q','U','E','R','Y','_','N','A','M','E', 
			   blr_parameter, 1, 6,0, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','B','A','S','E','_','F','I','E','L','D', 
			   blr_parameter, 1, 7,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','F','I','E','L','D','_','S','O','U','R','C','E', 
			   blr_parameter, 1, 8,0, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			   blr_parameter, 1, 9,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','Q','U','E','R','Y','_','H','E','A','D','E','R', 
			   blr_parameter2, 1, 10,0, 28,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			   blr_parameter2, 1, 11,0, 29,0, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 12,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','I','D', 
			   blr_parameter2, 1, 14,0, 13,0, 
			blr_assignment, 
			   blr_field, 1, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','I','D', 
			   blr_parameter2, 1, 16,0, 15,0, 
			blr_assignment, 
			   blr_field, 0, 13, 'R','D','B','$','N','U','L','L','_','F','L','A','G', 
			   blr_parameter2, 1, 20,0, 19,0, 
			blr_assignment, 
			   blr_field, 1, 14, 'R','D','B','$','D','I','M','E','N','S','I','O','N','S', 
			   blr_parameter, 1, 21,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_parameter, 1, 22,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','U','P','D','A','T','E','_','F','L','A','G', 
			   blr_parameter2, 1, 24,0, 23,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','V','I','E','W','_','C','O','N','T','E','X','T', 
			   blr_parameter, 1, 25,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','F','I','E','L','D','_','P','O','S','I','T','I','O','N', 
			   blr_parameter2, 1, 27,0, 26,0, 
			blr_assignment, 
			   blr_field, 0, 12, 'R','D','B','$','F','I','E','L','D','_','I','D', 
			   blr_parameter, 1, 30,0, 
			blr_assignment, 
			   blr_field, 1, 15, 'R','D','B','$','F','I','E','L','D','_','S','C','A','L','E', 
			   blr_parameter, 1, 31,0, 
			blr_assignment, 
			   blr_field, 1, 16, 'R','D','B','$','F','I','E','L','D','_','L','E','N','G','T','H', 
			   blr_parameter, 1, 32,0, 
			blr_assignment, 
			   blr_field, 1, 18, 'R','D','B','$','F','I','E','L','D','_','S','U','B','_','T','Y','P','E', 
			   blr_parameter, 1, 33,0, 
			blr_assignment, 
			   blr_field, 1, 14, 'R','D','B','$','F','I','E','L','D','_','T','Y','P','E', 
			   blr_parameter, 1, 34,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 12,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_715 */

static const short
   isc_754l = 916;
static const char
   isc_754 [] = {
      blr_version4,
      blr_begin, 
	 blr_message, 1, 38,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 0,0, 128,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_cstring2, 3,0, 32,0, 
	    blr_quad, 0, 
	    blr_quad, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	    blr_short, 0, 
	 blr_message, 0, 1,0, 
	    blr_cstring2, 3,0, 32,0, 
	 blr_receive, 0, 
	    blr_begin, 
	       blr_for, 
		  blr_rse, 2, 
		     blr_relation, 19, 'R','D','B','$','R','E','L','A','T','I','O','N','_','F','I','E','L','D','S', 0, 
		     blr_relation, 10, 'R','D','B','$','F','I','E','L','D','S', 1, 
		     blr_boolean, 
			blr_and, 
			   blr_eql, 
			      blr_field, 0, 16, 'R','D','B','$','F','I','E','L','D','_','S','O','U','R','C','E', 
			      blr_field, 1, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			   blr_eql, 
			      blr_field, 0, 17, 'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A','M','E', 
			      blr_parameter, 0, 0,0, 
		     blr_end, 
		  blr_send, 1, 
		     blr_begin, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','G','E','N','E','R','A','T','O','R','_','N','A','M','E', 
			   blr_parameter2, 1, 0,0, 15,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','D','E','F','A','U','L','T','_','S','O','U','R','C','E', 
			   blr_parameter2, 1, 1,0, 20,0, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','D','E','F','A','U','L','T','_','V','A','L','U','E', 
			   blr_parameter2, 1, 2,0, 21,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S', 
			   blr_parameter, 1, 3,0, 
			blr_assignment, 
			   blr_field, 1, 16, 'R','D','B','$','C','O','M','P','U','T','E','D','_','B','L','R', 
			   blr_parameter, 1, 4,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','C','O','M','P','L','E','X','_','N','A','M','E', 
			   blr_parameter, 1, 5,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','E','D','I','T','_','S','T','R','I','N','G', 
			   blr_parameter, 1, 6,0, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','Q','U','E','R','Y','_','N','A','M','E', 
			   blr_parameter, 1, 7,0, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','B','A','S','E','_','F','I','E','L','D', 
			   blr_parameter, 1, 8,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','F','I','E','L','D','_','S','O','U','R','C','E', 
			   blr_parameter, 1, 9,0, 
			blr_assignment, 
			   blr_field, 0, 14, 'R','D','B','$','F','I','E','L','D','_','N','A','M','E', 
			   blr_parameter, 1, 10,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','Q','U','E','R','Y','_','H','E','A','D','E','R', 
			   blr_parameter2, 1, 11,0, 31,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N', 
			   blr_parameter2, 1, 12,0, 32,0, 
			blr_assignment, 
			   blr_literal, blr_long, 0, 1,0,0,0,
			   blr_parameter, 1, 13,0, 
			blr_assignment, 
			   blr_field, 0, 17, 'R','D','B','$','I','D','E','N','T','I','T','Y','_','T','Y','P','E', 
			   blr_parameter, 1, 14,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','C','O','L','L','A','T','I','O','N','_','I','D', 
			   blr_parameter2, 1, 17,0, 16,0, 
			blr_assignment, 
			   blr_field, 1, 20, 'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S','E','T','_','I','D', 
			   blr_parameter2, 1, 19,0, 18,0, 
			blr_assignment, 
			   blr_field, 0, 13, 'R','D','B','$','N','U','L','L','_','F','L','A','G', 
			   blr_parameter2, 1, 23,0, 22,0, 
			blr_assignment, 
			   blr_field, 1, 14, 'R','D','B','$','D','I','M','E','N','S','I','O','N','S', 
			   blr_parameter, 1, 24,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G', 
			   blr_parameter, 1, 25,0, 
			blr_assignment, 
			   blr_field, 0, 15, 'R','D','B','$','U','P','D','A','T','E','_','F','L','A','G', 
			   blr_parameter2, 1, 27,0, 26,0, 
			blr_assignment, 
			   blr_field, 0, 16, 'R','D','B','$','V','I','E','W','_','C','O','N','T','E','X','T', 
			   blr_parameter, 1, 28,0, 
			blr_assignment, 
			   blr_field, 0, 18, 'R','D','B','$','F','I','E','L','D','_','P','O','S','I','T','I','O','N', 
			   blr_parameter2, 1, 30,0, 29,0, 
			blr_assignment, 
			   blr_field, 0, 12, 'R','D','B','$','F','I','E','L','D','_','I','D', 
			   blr_parameter, 1, 33,0, 
			blr_assignment, 
			   blr_field, 1, 15, 'R','D','B','$','F','I','E','L','D','_','S','C','A','L','E', 
			   blr_parameter, 1, 34,0, 
			blr_assignment, 
			   blr_field, 1, 16, 'R','D','B','$','F','I','E','L','D','_','L','E','N','G','T','H', 
			   blr_parameter, 1, 35,0, 
			blr_assignment, 
			   blr_field, 1, 18, 'R','D','B','$','F','I','E','L','D','_','S','U','B','_','T','Y','P','E', 
			   blr_parameter, 1, 36,0, 
			blr_assignment, 
			   blr_field, 1, 14, 'R','D','B','$','F','I','E','L','D','_','T','Y','P','E', 
			   blr_parameter, 1, 37,0, 
			blr_end, 
	       blr_send, 1, 
		  blr_assignment, 
		     blr_literal, blr_long, 0, 0,0,0,0,
		     blr_parameter, 1, 13,0, 
	       blr_end, 
	 blr_end, 
      blr_eoc
   };	/* end of blr string for request isc_754 */


#define gds_blob_null	isc_blob_null	/* compatibility symbols */
#define gds_status	isc_status
#define gds_status2	isc_status2
#define gds_array_length	isc_array_length
#define gds_count	isc_count
#define gds_slack	isc_slack
#define gds_utility	isc_utility	/* end of compatibility symbols */

#ifndef isc_version4
    Generate a compile-time error.
    Picking up a V3 include file after preprocessing with V4 GPRE.
#endif

/**** end of GPRE definitions ****/


#define DB			tdgbl->db_handle
#define gds_trans	tdgbl->tr_handle
#define isc_status	tdgbl->status_vector

namespace // unnamed, private
{

#define PUT_MESSAGE(attrib, attrib2, message) put_message((attrib), (attrib2), (message), sizeof(message))
#define PUT_TEXT(attribute, text)	put_text ((attribute), (text), sizeof(text))
#define COPY(source, target)       copy ((source), (target), sizeof(target))

inline void put(BurpGlobals* tdgbl, const UCHAR c)
{
	if (--(tdgbl->io_cnt) >= 0)
		*(tdgbl->io_ptr)++ = c;
	else
		MVOL_write(c, &tdgbl->io_cnt, &tdgbl->io_ptr);
}

inline void put(BurpGlobals* tdgbl, const att_type c)
{
	if (--tdgbl->io_cnt >= 0)
		*(tdgbl->io_ptr)++ = UCHAR(c);
	else
		MVOL_write(UCHAR(c), &tdgbl->io_cnt, &tdgbl->io_ptr);
}

inline const UCHAR* put_block(BurpGlobals* tdgbl, const UCHAR* p, ULONG n)
{
	return MVOL_write_block (tdgbl, p, n);
}


void compress(const UCHAR*, ULONG);
int copy(const TEXT*, TEXT*, ULONG);
burp_fld* get_fields(burp_rel*);
SINT64 get_gen_id(const TEXT*, SSHORT);
void get_ranges(burp_fld*);
void put_array(burp_fld*, burp_rel*, ISC_QUAD*);
void put_asciz(const att_type, const TEXT*);
void put_blob(burp_fld*, ISC_QUAD&);
bool put_blr_blob(att_type, ISC_QUAD&);
void put_data(burp_rel*);
void put_index(burp_rel*);
int put_message(att_type, att_type, const TEXT*, const ULONG);
void put_int32(att_type, SLONG);
void put_int64( att_type attribute, SINT64 value);
void put_relation(burp_rel*);
bool put_source_blob(att_type, att_type, ISC_QUAD&);
int put_text(att_type, const TEXT*, SSHORT);
void write_character_sets();
void write_check_constraints();
void write_collations();
void write_database(const TEXT*);
void write_exceptions();
void write_field_dimensions();
void write_filters();
void write_functions();
void write_function_args(const GDS_NAME, GDS_NAME);
void write_global_fields();
void write_generators();
void write_sql_roles();
void write_mapping();
void write_packages();
void write_procedures();
void write_procedure_prms(const GDS_NAME, const GDS_NAME);
void write_ref_constraints();
void write_rel_constraints();
void write_relations();
void write_secclasses();
void write_shadow_files();
void write_triggers();
void write_trigger_messages();
void write_types();
void write_user_privileges();
void general_on_error();


#ifdef DEBUG
UCHAR debug_on = 0;		// able to turn this on in debug mode
#endif


const UCHAR blob_items[] =
{
	isc_info_blob_max_segment,
	isc_info_blob_num_segments,
	isc_info_blob_type,
	isc_info_blob_total_length
};
const UCHAR blr_items[] =
{
	isc_info_blob_max_segment,
	isc_info_blob_total_length
};
const UCHAR source_items[] =
{
	isc_info_blob_max_segment,
	isc_info_blob_total_length,
	isc_info_blob_num_segments
};
const SCHAR db_info_items[] =
{
	isc_info_db_sql_dialect,
	isc_info_page_size,
	isc_info_sweep_interval,
	isc_info_forced_writes,
	isc_info_no_reserve,
	isc_info_set_page_buffers,
	isc_info_db_read_only,
	isc_info_end
};
const SCHAR limbo_tpb[] =
{
	isc_tpb_version1,
	isc_tpb_ignore_limbo
};
const SCHAR limbo_nau_tpb[] =
{
	isc_tpb_version1,
	isc_tpb_ignore_limbo,
	isc_tpb_no_auto_undo
};

} // namespace


int BACKUP_backup(const TEXT* dbb_file, const TEXT* file_name)
{
/**************************************
 *
 *	B A C K U P _ b a c k u p
 *
 **************************************
 *
 * Functional description
 *	Backup a database.
 *
 **************************************/
	ISC_STATUS_ARRAY status_vector;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	tdgbl->gbl_database_file_name = dbb_file;

	tdgbl->io_ptr = NULL;
	tdgbl->io_cnt = 0;
	tdgbl->relations = NULL;
	tdgbl->runtimeODS = 0;

	gds_trans = 0;

	BURP_verbose(130);
	// msg 130 starting transaction

	if (tdgbl->gbl_sw_ignore_limbo)
	{
		if (isc_start_transaction(status_vector, &gds_trans, 1, &DB,
								  sizeof(limbo_nau_tpb), limbo_nau_tpb))
		{
			isc_start_transaction(status_vector, &gds_trans, 1, &DB, sizeof(limbo_tpb), limbo_tpb);
		}
	}
	else
	{
		/*EXEC SQL SET TRANSACTION NO_AUTO_UNDO;*/
		{
		isc_start_transaction (isc_status, (FB_API_HANDLE*) &gds_trans, (short) 1, &DB, (short) 5, isc_tpb_0);
		SQLCODE = isc_sqlcode(isc_status);
		}
		if (isc_status[1])
			/*EXEC SQL SET TRANSACTION;*/
			{
			isc_start_transaction (isc_status, (FB_API_HANDLE*) &gds_trans, (short) 1, &DB, (short) 4, isc_tpb_1);
			SQLCODE = isc_sqlcode(isc_status);
			}
	}

	if (!gds_trans)
	{
		/*EXEC SQL SET TRANSACTION NAME gds_trans NO_AUTO_UNDO;*/
		{
		isc_start_transaction (isc_status, (FB_API_HANDLE*) &gds_trans, (short) 1, &DB, (short) 5, isc_tpb_2);
		SQLCODE = isc_sqlcode(isc_status);
		}
		if (isc_status[1])
			/*EXEC SQL SET TRANSACTION NAME gds_trans;*/
			{
			isc_start_transaction (isc_status, (FB_API_HANDLE*) &gds_trans, (short) 1, &DB, (short) 4, isc_tpb_3);
			SQLCODE = isc_sqlcode(isc_status);
			}
	}


	// decide what type of database we've got

	detectRuntimeODS();
	if (tdgbl->runtimeODS < DB_VERSION_OLDEST_SUPPORTED)
	{
		BURP_error(348, true, SafeArg() << tdgbl->runtimeODS);
		// msg 348 database format @1 is too old to backup
	}

	// Write burp record first with other valuable information
	// In case of split operation, write a 'split' header first to all the files

	if (tdgbl->action->act_action == ACT_backup_split)
	{
		for (burp_fil* fil = tdgbl->gbl_sw_files; fil; fil = fil->fil_next)
		{
			tdgbl->action->act_file = fil;
			if (!MVOL_split_hdr_write())
			{
				BURP_error(269, true, tdgbl->action->act_file->fil_name.c_str());
				// msg 269 can't write a header record to file %s
			}
		}
		tdgbl->action->act_file = tdgbl->gbl_sw_files;
	}

	MVOL_init_write(file_name, &tdgbl->io_cnt, &tdgbl->io_ptr);

	// Write database record

	write_database(dbb_file);

	// Write global fields

	BURP_verbose(150);
	// msg 150  writing global fields
	write_global_fields();

	write_field_dimensions();

	BURP_verbose(162);
	// msg 162  writing shadow files
	write_shadow_files();

	// Write Character Sets
	BURP_verbose(msgVerbose_write_charsets);
	write_character_sets();

	// Write Collations
	BURP_verbose(msgVerbose_write_collations);
	write_collations();

	if (tdgbl->runtimeODS >= DB_VERSION_DDL12)
	{
		// Write packages
		BURP_verbose(336);	// msg 336 writing packages
		write_packages();
	}

	// Write functions
	BURP_verbose(148);
	// msg 148 writing functions
	write_functions();

	// Write relations

	BURP_verbose(154);
	// msg 154 writing tables

	write_relations();

	// Write types
	BURP_verbose(161);
	// msg 161  writing types
	write_types();

	// Write filters
	BURP_verbose(146);
	// msg 146 writing filters
	write_filters();

	// Write generators

	BURP_verbose(164);
	// msg 164  writing id generators
	write_generators();

	// Write procedures
	BURP_verbose(192);
	// msg 192 writing stored procedures
	write_procedures();

	// Write exceptions
	BURP_verbose(197);
	// msg 197 writing exceptions
	write_exceptions();

	// Now go back and write all data

	for (burp_rel* relation = tdgbl->relations; relation; relation = relation->rel_next)
	{
		put(tdgbl, (UCHAR) rec_relation_data);
		PUT_TEXT(att_relation_name, relation->rel_name);
		put(tdgbl, att_end);

		if (!(relation->rel_flags & REL_view) && !(relation->rel_flags & REL_external))
		{
			put_index(relation);
			if (!(tdgbl->gbl_sw_meta || tdgbl->skipRelation(relation->rel_name)))
				put_data(relation);
		}

		put(tdgbl, (UCHAR) rec_relation_end);
	}

	// now for the new triggers in rdb$triggers
	BURP_verbose(159);
	// msg 159  writing triggers
	write_triggers();
	BURP_verbose(158);
	// msg 158 writing trigger messages
	write_trigger_messages();
	write_user_privileges();

	// Last, but not least, go back and add any access control lists

	BURP_verbose(347); // msg 347 writing security classes
	write_secclasses();

	// Write relation constraints
	BURP_verbose(206);
	// msg 206 writing relation constraints
	write_rel_constraints();

	// Write referential constraints
	BURP_verbose(209);
	// msg 209 writing referential constraints
	write_ref_constraints();

	// Write check constraints
	BURP_verbose(210);
	// msg 210 writing check constraints
	write_check_constraints();

	if (tdgbl->runtimeODS >= DB_VERSION_DDL9)
	{
		// Write SQL roles
		BURP_verbose(248);
		// msg 248 writing SQL roles
		write_sql_roles();
	}

	if (tdgbl->runtimeODS >= DB_VERSION_DDL11)
	{
		// Write names mapping
		BURP_verbose(296);
		// msg 296 writing mapping
		write_mapping();
	}

	// Finish up

	put(tdgbl, (UCHAR) rec_end);
	FB_UINT64 cumul_count = MVOL_fini_write(&tdgbl->io_cnt, &tdgbl->io_ptr);
	tdgbl->action->act_action = ACT_backup_fini;
	BURP_verbose(176, SafeArg() << cumul_count);
	// msg 176 closing file, committing, and finishing.  %ld bytes written

	/*COMMIT;*/
	{
	isc_commit_transaction (isc_status, (FB_API_HANDLE*) &gds_trans);;
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	if (gds_trans)
		/*COMMIT gds_trans;*/
		{
		isc_commit_transaction (isc_status, (FB_API_HANDLE*) &gds_trans);;
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	/*FINISH*/
	{
	if (DB)
	   isc_detach_database (isc_status, &DB);;
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	return FINI_OK;
}

namespace // unnamed, private
{

void compress(const UCHAR* data, ULONG length)
{
/**************************************
 *
 *	c o m p r e s s
 *
 **************************************
 *
 * Functional description
 *	Write out data in compressed form.
 *
 **************************************/
	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	const UCHAR* p = data;
	const UCHAR* end = p + length;
	const UCHAR* q = NULL;

	while (p < end)
	{
		for (q = p + 2; q < end && (q[-2] != q[-1] || q[-1] != q[0]); q++)
			;
		USHORT run = (q < end) ? q - p - 2 : end - p;
		if (run)
		{
			for (; run > 127; run -= 127)
			{
				USHORT len = 127;
				put(tdgbl, (UCHAR) len);
				p = put_block(tdgbl, p, len);
			}
			if (run)
			{
				put(tdgbl, (UCHAR) run);
				p = put_block(tdgbl, p, run);
			}
		}
		for (q = p; q < end && *q == *p; q++)
			;
		if ((run = q - p) != 0)
		{
			for (; run > 127; run -= 127)
			{
				put(tdgbl, (UCHAR) (-127));
				put(tdgbl, (UCHAR) (*p));
			}
			if (run)
			{
				put(tdgbl, (UCHAR) (-run));
				put(tdgbl, (UCHAR) (*p));
			}
			p = q;
		}
	}
}


int copy( const TEXT* from, TEXT* to, ULONG size_len)
{
/**************************************
 *
 *	c o p y
 *
 **************************************
 *
 * Functional description
 *	Copy a blank or null terminated string into a null terminated
 *	string. It assumes there's enough room in the target.
 *
 **************************************/

	const ULONG len = (ULONG) MISC_symbol_length(from, size_len);

	memcpy(to, from, len);
	to[len] = '\0';

	return (int) len;
}


void general_on_error()
{
/**************************************
 *
 *	g e n e r a l _ o n _ e r r o r
 *
 **************************************
 *
 * Functional description
 *	Handle any general ON_ERROR clause during backup.
 *
 **************************************/
	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	BURP_print_status(true, isc_status);
	BURP_abort();
}


burp_fld* get_fields( burp_rel* relation)
{
   struct isc_718_struct {
          ISC_QUAD isc_719;	/* RDB$DEFAULT_SOURCE */
          ISC_QUAD isc_720;	/* RDB$DEFAULT_VALUE */
          char  isc_721 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_722;	/* RDB$COMPUTED_BLR */
          char  isc_723 [32];	/* RDB$COMPLEX_NAME */
          char  isc_724 [128];	/* RDB$EDIT_STRING */
          char  isc_725 [32];	/* RDB$QUERY_NAME */
          char  isc_726 [32];	/* RDB$BASE_FIELD */
          char  isc_727 [32];	/* RDB$FIELD_SOURCE */
          char  isc_728 [32];	/* RDB$FIELD_NAME */
          ISC_QUAD isc_729;	/* RDB$QUERY_HEADER */
          ISC_QUAD isc_730;	/* RDB$DESCRIPTION */
          short isc_731;	/* isc_utility */
          short isc_732;	/* gds__null_flag */
          short isc_733;	/* RDB$COLLATION_ID */
          short isc_734;	/* gds__null_flag */
          short isc_735;	/* RDB$CHARACTER_SET_ID */
          short isc_736;	/* gds__null_flag */
          short isc_737;	/* gds__null_flag */
          short isc_738;	/* gds__null_flag */
          short isc_739;	/* RDB$NULL_FLAG */
          short isc_740;	/* RDB$DIMENSIONS */
          short isc_741;	/* RDB$SYSTEM_FLAG */
          short isc_742;	/* gds__null_flag */
          short isc_743;	/* RDB$UPDATE_FLAG */
          short isc_744;	/* RDB$VIEW_CONTEXT */
          short isc_745;	/* gds__null_flag */
          short isc_746;	/* RDB$FIELD_POSITION */
          short isc_747;	/* gds__null_flag */
          short isc_748;	/* gds__null_flag */
          short isc_749;	/* RDB$FIELD_ID */
          short isc_750;	/* RDB$FIELD_SCALE */
          short isc_751;	/* RDB$FIELD_LENGTH */
          short isc_752;	/* RDB$FIELD_SUB_TYPE */
          short isc_753;	/* RDB$FIELD_TYPE */
   } isc_718;
   struct isc_716_struct {
          char  isc_717 [32];	/* RDB$RELATION_NAME */
   } isc_716;
   struct isc_757_struct {
          char  isc_758 [32];	/* RDB$GENERATOR_NAME */
          ISC_QUAD isc_759;	/* RDB$DEFAULT_SOURCE */
          ISC_QUAD isc_760;	/* RDB$DEFAULT_VALUE */
          char  isc_761 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_762;	/* RDB$COMPUTED_BLR */
          char  isc_763 [32];	/* RDB$COMPLEX_NAME */
          char  isc_764 [128];	/* RDB$EDIT_STRING */
          char  isc_765 [32];	/* RDB$QUERY_NAME */
          char  isc_766 [32];	/* RDB$BASE_FIELD */
          char  isc_767 [32];	/* RDB$FIELD_SOURCE */
          char  isc_768 [32];	/* RDB$FIELD_NAME */
          ISC_QUAD isc_769;	/* RDB$QUERY_HEADER */
          ISC_QUAD isc_770;	/* RDB$DESCRIPTION */
          short isc_771;	/* isc_utility */
          short isc_772;	/* RDB$IDENTITY_TYPE */
          short isc_773;	/* gds__null_flag */
          short isc_774;	/* gds__null_flag */
          short isc_775;	/* RDB$COLLATION_ID */
          short isc_776;	/* gds__null_flag */
          short isc_777;	/* RDB$CHARACTER_SET_ID */
          short isc_778;	/* gds__null_flag */
          short isc_779;	/* gds__null_flag */
          short isc_780;	/* gds__null_flag */
          short isc_781;	/* RDB$NULL_FLAG */
          short isc_782;	/* RDB$DIMENSIONS */
          short isc_783;	/* RDB$SYSTEM_FLAG */
          short isc_784;	/* gds__null_flag */
          short isc_785;	/* RDB$UPDATE_FLAG */
          short isc_786;	/* RDB$VIEW_CONTEXT */
          short isc_787;	/* gds__null_flag */
          short isc_788;	/* RDB$FIELD_POSITION */
          short isc_789;	/* gds__null_flag */
          short isc_790;	/* gds__null_flag */
          short isc_791;	/* RDB$FIELD_ID */
          short isc_792;	/* RDB$FIELD_SCALE */
          short isc_793;	/* RDB$FIELD_LENGTH */
          short isc_794;	/* RDB$FIELD_SUB_TYPE */
          short isc_795;	/* RDB$FIELD_TYPE */
   } isc_757;
   struct isc_755_struct {
          char  isc_756 [32];	/* RDB$RELATION_NAME */
   } isc_755;
/**************************************
 *
 *	g e t _ f i e l d s
 *
 **************************************
 *
 * Functional description
 *	Get fields for a relation.  Test
 *	capabilities and get system specific
 *
 **************************************/
	burp_fld* field;
	ISC_QUAD* blob_id;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	USHORT count = 1;

	Firebird::HalfStaticArray<burp_fld*, 16> field_list;

	// if we have all capabilities, use the first request to get the
	// most performance out of the latest engine; if we don't
	// have one of the capabilities we must use the second set of
	// requests--this requires more code but it is well worth it
	// for the performance benefits, especially remotely--deej

	if (tdgbl->runtimeODS >= DB_VERSION_DDL12)
	{
		/*FOR (REQUEST_HANDLE tdgbl->handles_get_fields_req_handle1)
			X IN RDB$RELATION_FIELDS CROSS
			Y IN RDB$FIELDS WITH
			X.RDB$FIELD_SOURCE = Y.RDB$FIELD_NAME AND
			X.RDB$RELATION_NAME EQ relation->rel_name*/
		{
                if (!tdgbl->handles_get_fields_req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &tdgbl->handles_get_fields_req_handle1, (short) sizeof(isc_754), (char*) isc_754);
		isc_vtov ((const char*) relation->rel_name, (char*) isc_755.isc_756, 32);
		if (tdgbl->handles_get_fields_req_handle1)
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &tdgbl->handles_get_fields_req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_755, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &tdgbl->handles_get_fields_req_handle1, (short) 1, (short) 442, &isc_757, (short) 0);
		   if (!isc_757.isc_771 || isc_status [1]) break;
		{
			field = (burp_fld*) BURP_alloc_zero(sizeof(burp_fld));
			field->fld_number = count++;
			field->fld_type = /*Y.RDB$FIELD_TYPE*/
					  isc_757.isc_795;
			field->fld_sub_type = /*Y.RDB$FIELD_SUB_TYPE*/
					      isc_757.isc_794;
			field->fld_length = /*Y.RDB$FIELD_LENGTH*/
					    isc_757.isc_793;
			field->fld_scale = /*Y.RDB$FIELD_SCALE*/
					   isc_757.isc_792;
			field->fld_id = /*X.RDB$FIELD_ID*/
					isc_757.isc_791;

			if (!/*X.RDB$DESCRIPTION.NULL*/
			     isc_757.isc_790)
			{
				blob_id = &/*X.RDB$DESCRIPTION*/
					   isc_757.isc_770;
				if (blob_id->gds_quad_low || blob_id->gds_quad_high)
					field->fld_description = /*X.RDB$DESCRIPTION*/
								 isc_757.isc_770;
			}

			if (!/*X.RDB$QUERY_HEADER.NULL*/
			     isc_757.isc_789)
			{
				blob_id = &/*X.RDB$QUERY_HEADER*/
					   isc_757.isc_769;
				if (blob_id->gds_quad_low || blob_id->gds_quad_high)
					field->fld_query_header = /*X.RDB$QUERY_HEADER*/
								  isc_757.isc_769;
			}

			if (/*X.RDB$FIELD_POSITION.NULL*/
			    isc_757.isc_787)
				field->fld_flags |= FLD_position_missing;
			else
				field->fld_position = /*X.RDB$FIELD_POSITION*/
						      isc_757.isc_788;
			field->fld_view_context = /*X.RDB$VIEW_CONTEXT*/
						  isc_757.isc_786;
			if (/*X.RDB$UPDATE_FLAG.NULL*/
			    isc_757.isc_784)
				field->fld_flags |= FLD_update_missing;
			else
				field->fld_update_flag = /*X.RDB$UPDATE_FLAG*/
							 isc_757.isc_785;

			COPY (/*X.RDB$FIELD_NAME*/
			      isc_757.isc_768, field->fld_name);
			COPY (/*X.RDB$FIELD_SOURCE*/
			      isc_757.isc_767, field->fld_source);
			COPY (/*X.RDB$BASE_FIELD*/
			      isc_757.isc_766, field->fld_base);
			COPY (/*X.RDB$QUERY_NAME*/
			      isc_757.isc_765, field->fld_query_name);
			COPY (/*X.RDB$EDIT_STRING*/
			      isc_757.isc_764, field->fld_edit_string);
			COPY (/*X.RDB$COMPLEX_NAME*/
			      isc_757.isc_763, field->fld_complex_name);

			blob_id = &/*Y.RDB$COMPUTED_BLR*/
				   isc_757.isc_762;

			if (blob_id->gds_quad_low || blob_id->gds_quad_high) {
				field->fld_flags |= FLD_computed;
			}

			field->fld_system_flag = /*X.RDB$SYSTEM_FLAG*/
						 isc_757.isc_783;

			COPY (/*X.RDB$SECURITY_CLASS*/
			      isc_757.isc_761, field->fld_security_class);

			// use the fld_flags to mark the field as an array and
			// to differentiate it from other blobs

			if (/*Y.RDB$DIMENSIONS*/
			    isc_757.isc_782)
			{
				field->fld_flags |= FLD_array;
				field->fld_dimensions = /*Y.RDB$DIMENSIONS*/
							isc_757.isc_782;
				if (field->fld_dimensions < 0) {
					BURP_error_redirect (NULL, 52, SafeArg() << field->fld_name);
				}
				// msg 52 array dimension for field %s is invalid
				get_ranges (field);
			}

			if (!/*X.RDB$NULL_FLAG.NULL*/
			     isc_757.isc_780)
			{
				field->fld_null_flag = /*X.RDB$NULL_FLAG*/
						       isc_757.isc_781;
				field->fld_flags |= FLD_null_flag;
			}

			if (!/*X.RDB$DEFAULT_VALUE.NULL*/
			     isc_757.isc_779)
			{
				blob_id = &/*X.RDB$DEFAULT_VALUE*/
					   isc_757.isc_760;
				if (blob_id->gds_quad_low || blob_id->gds_quad_high) {
					field->fld_default_value = /*X.RDB$DEFAULT_VALUE*/
								   isc_757.isc_760;
				}
			}

			if (!/*X.RDB$DEFAULT_SOURCE.NULL*/
			     isc_757.isc_778)
			{
				blob_id = &/*X.RDB$DEFAULT_SOURCE*/
					   isc_757.isc_759;
				if (blob_id->gds_quad_low || blob_id->gds_quad_high) {
					field->fld_default_source = /*X.RDB$DEFAULT_SOURCE*/
								    isc_757.isc_759;
				}
			}

			if (!/*Y.RDB$CHARACTER_SET_ID.NULL*/
			     isc_757.isc_776)
			{
				field->fld_character_set_id = /*Y.RDB$CHARACTER_SET_ID*/
							      isc_757.isc_777;
				field->fld_flags |= FLD_charset_flag;
			}

			if (!/*X.RDB$COLLATION_ID.NULL*/
			     isc_757.isc_774)
			{
				field->fld_collation_id = /*X.RDB$COLLATION_ID*/
							  isc_757.isc_775;
				field->fld_flags |= FLD_collate_flag;
			}

			// ODS 12
			if (!/*X.RDB$GENERATOR_NAME.NULL*/
			     isc_757.isc_773)
			{
				COPY(/*X.RDB$GENERATOR_NAME*/
				     isc_757.isc_758, field->fld_generator);
				field->fld_identity_type = /*X.RDB$IDENTITY_TYPE*/
							   isc_757.isc_772;
			}

			field_list.add(field);
		}
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE tdgbl->handles_get_fields_req_handle1)
			X IN RDB$RELATION_FIELDS CROSS
			Y IN RDB$FIELDS WITH
			X.RDB$FIELD_SOURCE = Y.RDB$FIELD_NAME AND
			X.RDB$RELATION_NAME EQ relation->rel_name*/
		{
                if (!tdgbl->handles_get_fields_req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &tdgbl->handles_get_fields_req_handle1, (short) sizeof(isc_715), (char*) isc_715);
		isc_vtov ((const char*) relation->rel_name, (char*) isc_716.isc_717, 32);
		if (tdgbl->handles_get_fields_req_handle1)
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &tdgbl->handles_get_fields_req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_716, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &tdgbl->handles_get_fields_req_handle1, (short) 1, (short) 406, &isc_718, (short) 0);
		   if (!isc_718.isc_731 || isc_status [1]) break;
		{
			field = (burp_fld*) BURP_alloc_zero(sizeof(burp_fld));
			field->fld_number = count++;
			field->fld_type = /*Y.RDB$FIELD_TYPE*/
					  isc_718.isc_753;
			field->fld_sub_type = /*Y.RDB$FIELD_SUB_TYPE*/
					      isc_718.isc_752;
			field->fld_length = /*Y.RDB$FIELD_LENGTH*/
					    isc_718.isc_751;
			field->fld_scale = /*Y.RDB$FIELD_SCALE*/
					   isc_718.isc_750;
			field->fld_id = /*X.RDB$FIELD_ID*/
					isc_718.isc_749;

			if (!/*X.RDB$DESCRIPTION.NULL*/
			     isc_718.isc_748)
			{
				blob_id = &/*X.RDB$DESCRIPTION*/
					   isc_718.isc_730;
				if (blob_id->gds_quad_low || blob_id->gds_quad_high)
					field->fld_description = /*X.RDB$DESCRIPTION*/
								 isc_718.isc_730;
			}

			if (!/*X.RDB$QUERY_HEADER.NULL*/
			     isc_718.isc_747)
			{
				blob_id = &/*X.RDB$QUERY_HEADER*/
					   isc_718.isc_729;
				if (blob_id->gds_quad_low || blob_id->gds_quad_high)
					field->fld_query_header = /*X.RDB$QUERY_HEADER*/
								  isc_718.isc_729;
			}

			if (/*X.RDB$FIELD_POSITION.NULL*/
			    isc_718.isc_745)
				field->fld_flags |= FLD_position_missing;
			else
				field->fld_position = /*X.RDB$FIELD_POSITION*/
						      isc_718.isc_746;
			field->fld_view_context = /*X.RDB$VIEW_CONTEXT*/
						  isc_718.isc_744;
			if (/*X.RDB$UPDATE_FLAG.NULL*/
			    isc_718.isc_742)
				field->fld_flags |= FLD_update_missing;
			else
				field->fld_update_flag = /*X.RDB$UPDATE_FLAG*/
							 isc_718.isc_743;

			COPY (/*X.RDB$FIELD_NAME*/
			      isc_718.isc_728, field->fld_name);
			COPY (/*X.RDB$FIELD_SOURCE*/
			      isc_718.isc_727, field->fld_source);
			COPY (/*X.RDB$BASE_FIELD*/
			      isc_718.isc_726, field->fld_base);
			COPY (/*X.RDB$QUERY_NAME*/
			      isc_718.isc_725, field->fld_query_name);
			COPY (/*X.RDB$EDIT_STRING*/
			      isc_718.isc_724, field->fld_edit_string);
			COPY (/*X.RDB$COMPLEX_NAME*/
			      isc_718.isc_723, field->fld_complex_name);

			blob_id = &/*Y.RDB$COMPUTED_BLR*/
				   isc_718.isc_722;

			if (blob_id->gds_quad_low || blob_id->gds_quad_high) {
				field->fld_flags |= FLD_computed;
			}

			field->fld_system_flag = /*X.RDB$SYSTEM_FLAG*/
						 isc_718.isc_741;

			COPY (/*X.RDB$SECURITY_CLASS*/
			      isc_718.isc_721, field->fld_security_class);

			// use the fld_flags to mark the field as an array and
			// to differentiate it from other blobs

			if (/*Y.RDB$DIMENSIONS*/
			    isc_718.isc_740)
			{
				field->fld_flags |= FLD_array;
				field->fld_dimensions = /*Y.RDB$DIMENSIONS*/
							isc_718.isc_740;
				if (field->fld_dimensions < 0) {
					BURP_error_redirect (NULL, 52, SafeArg() << field->fld_name);
				}
				// msg 52 array dimension for field %s is invalid
				get_ranges (field);
			}

			if (!/*X.RDB$NULL_FLAG.NULL*/
			     isc_718.isc_738)
			{
				field->fld_null_flag = /*X.RDB$NULL_FLAG*/
						       isc_718.isc_739;
				field->fld_flags |= FLD_null_flag;
			}

			if (!/*X.RDB$DEFAULT_VALUE.NULL*/
			     isc_718.isc_737)
			{
				blob_id = &/*X.RDB$DEFAULT_VALUE*/
					   isc_718.isc_720;
				if (blob_id->gds_quad_low || blob_id->gds_quad_high) {
					field->fld_default_value = /*X.RDB$DEFAULT_VALUE*/
								   isc_718.isc_720;
				}
			}

			if (!/*X.RDB$DEFAULT_SOURCE.NULL*/
			     isc_718.isc_736)
			{
				blob_id = &/*X.RDB$DEFAULT_SOURCE*/
					   isc_718.isc_719;
				if (blob_id->gds_quad_low || blob_id->gds_quad_high) {
					field->fld_default_source = /*X.RDB$DEFAULT_SOURCE*/
								    isc_718.isc_719;
				}
			}

			if (!/*Y.RDB$CHARACTER_SET_ID.NULL*/
			     isc_718.isc_734)
			{
				field->fld_character_set_id = /*Y.RDB$CHARACTER_SET_ID*/
							      isc_718.isc_735;
				field->fld_flags |= FLD_charset_flag;
			}

			if (!/*X.RDB$COLLATION_ID.NULL*/
			     isc_718.isc_732)
			{
				field->fld_collation_id = /*X.RDB$COLLATION_ID*/
							  isc_718.isc_733;
				field->fld_flags |= FLD_collate_flag;
			}

			field_list.add(field);
		}
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR*/
		   }
		}
	}

	burp_fld* fields = NULL;

	while (field_list.getCount())
	{
		field = field_list.pop();
		field->fld_next = fields;
		fields = field;
	}

	return fields;
}


SINT64 get_gen_id( const TEXT* name, SSHORT name_len)
{
/**************************************
 *
 *	g e t _ g e n _ i d
 *
 **************************************
 *
 * Functional description
 *	Read id for a generator;
 *
 **************************************/
	UCHAR blr_buffer[100];	// enough to fit blr

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	FB_API_HANDLE gen_id_reqh = 0;
	UCHAR* blr = blr_buffer;

	// If this is ODS 10 (IB version 6.0) or greater, build BLR to retrieve
	// the 64-bit value of the generator.  If not, build BLR to retrieve the
	// 32-bit value, which we will cast to the expected INT64 format.

	if (tdgbl->runtimeODS >= DB_VERSION_DDL10)
	{
		// build the blr with the right relation name and 64-bit results.
		add_byte(blr, blr_version5);
		add_byte(blr, blr_begin);
		add_byte(blr, blr_message);
		add_byte(blr, 0);
		add_word(blr, 1);
		add_byte(blr, blr_int64);
		add_byte(blr, 0);
		add_byte(blr, blr_send);
		add_byte(blr, 0);
		add_byte(blr, blr_assignment);
		add_byte(blr, blr_gen_id);
		add_byte(blr, name_len);
		while (name_len--)
		{
			const UCHAR c = *name++;
			add_byte(blr, c);
		}
		add_byte(blr, blr_literal);
		add_byte(blr, blr_long);
		add_byte(blr, 0);
		add_word(blr, 0);
		add_word(blr, 0);
		add_byte(blr, blr_parameter);
		add_byte(blr, 0);
		add_word(blr, 0);
		add_byte(blr, blr_end);
		add_byte(blr, blr_eoc);
	}
	else
	{
		// build the blr with the right relation name and 32-bit results
		add_byte(blr, blr_version4);
		add_byte(blr, blr_begin);
		add_byte(blr, blr_message);
		add_byte(blr, 0);
		add_word(blr, 1);
		add_byte(blr, blr_long);
		add_byte(blr, 0);
		add_byte(blr, blr_send);
		add_byte(blr, 0);
		add_byte(blr, blr_assignment);
		add_byte(blr, blr_gen_id);
		add_byte(blr, name_len);
		while (name_len--)
		{
			const UCHAR c = *name++;
			add_byte(blr, c);
		}
		add_byte(blr, blr_literal);
		add_byte(blr, blr_long);
		add_byte(blr, 0);
		add_word(blr, 0);
		add_word(blr, 0);
		add_byte(blr, blr_parameter);
		add_byte(blr, 0);
		add_word(blr, 0);
		add_byte(blr, blr_end);
		add_byte(blr, blr_eoc);
	}

	const SSHORT blr_length = blr - blr_buffer;

#ifdef DEBUG
	if (debug_on)
		fb_print_blr(blr_buffer, blr_length, NULL, NULL, 0);
#endif

	ISC_STATUS_ARRAY status_vector;
	if (isc_compile_request(status_vector, &DB, &gen_id_reqh, blr_length, (const char*) blr_buffer))
	{
		// if there's no gen_id, never mind ...
		return 0;
	}

	// use the same gds_trans generated by gpre
	if (isc_start_request(status_vector, &gen_id_reqh, &gds_trans, 0))
	{
		BURP_error_redirect(status_vector, 25);
		// msg 25 Failed in put_blr_gen_id
	}


	SINT64 read_msg1;
	if (tdgbl->runtimeODS >= DB_VERSION_DDL10)
	{
		if (isc_receive(status_vector, &gen_id_reqh, 0, sizeof(read_msg1), &read_msg1, 0))
		{
			BURP_error_redirect(status_vector, 25);
			// msg 25 Failed in put_blr_gen_id
		}
	}
	else
	{
		SLONG read_msg0;
		if (isc_receive(status_vector, &gen_id_reqh, 0, sizeof(read_msg0), &read_msg0, 0))
		{
			BURP_error_redirect(status_vector, 25);
			// msg 25 Failed in put_blr_gen_id
		}
		read_msg1 = (SINT64) read_msg0;
	}

	isc_release_request(status_vector, &gen_id_reqh);

	return read_msg1;
}


void get_ranges( burp_fld* field)
{
   struct isc_710_struct {
          ISC_LONG isc_711;	/* RDB$UPPER_BOUND */
          ISC_LONG isc_712;	/* RDB$LOWER_BOUND */
          short isc_713;	/* isc_utility */
          short isc_714;	/* RDB$DIMENSION */
   } isc_710;
   struct isc_708_struct {
          char  isc_709 [32];	/* RDB$FIELD_NAME */
   } isc_708;
/**************************************
 *
 *	g e t _ r a n g e s
 *
 **************************************
 *
 * Functional description
 *	Fill in the range low and high bounds by reading
 *      the ranges in rdb$field_dimensions.
 *
 **************************************/
	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	SLONG* rp = field->fld_ranges;
	USHORT count = 0;

	// Get the array dimensions in the rdb$field_dimensions

	/*FOR (REQUEST_HANDLE tdgbl->handles_get_ranges_req_handle1)
		X IN RDB$FIELD_DIMENSIONS
		WITH X.RDB$FIELD_NAME EQ field->fld_source
		SORTED BY X.RDB$DIMENSION*/
	{
        if (!tdgbl->handles_get_ranges_req_handle1)
           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &tdgbl->handles_get_ranges_req_handle1, (short) sizeof(isc_707), (char*) isc_707);
	isc_vtov ((const char*) field->fld_source, (char*) isc_708.isc_709, 32);
	if (tdgbl->handles_get_ranges_req_handle1)
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &tdgbl->handles_get_ranges_req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_708, (short) 0);
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &tdgbl->handles_get_ranges_req_handle1, (short) 1, (short) 12, &isc_710, (short) 0);
	   if (!isc_710.isc_713 || isc_status [1]) break;

		if (count != /*X.RDB$DIMENSION*/
			     isc_710.isc_714)
			BURP_error_redirect (NULL, 52, SafeArg() << field->fld_name);
			// msg 52 array dimension for field %s is invalid
		*rp++ = /*X.RDB$LOWER_BOUND*/
			isc_710.isc_712;
		*rp++ = /*X.RDB$UPPER_BOUND*/
			isc_710.isc_711;
		count++;

	/*END_FOR;*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	if (count != field->fld_dimensions)
		BURP_error_redirect(NULL, 52, SafeArg() << field->fld_name);
		// msg 52 array dimension for field %s is invalid
}


void put_array( burp_fld* field, burp_rel* relation, ISC_QUAD* blob_id)
{
/**************************************
 *
 *	p u t _ a r r a y
 *
 **************************************
 *
 * Functional description
 *	Write out an array.  If, however, it's null, don't even bother.
 *
 **************************************/
	SLONG range_buffer[16];	// enough for 16 dimensions
	UCHAR blr_buffer[200];		// enough for a sdl with 16 dimensions

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	// If the array is null, don't store it.  It will be restored as null.

	if (!blob_id->gds_quad_low && !blob_id->gds_quad_high)
		return;

	lstring xdr_buffer;
	xdr_buffer.lstr_allocated = 0;
	xdr_buffer.lstr_address = NULL;

	UCHAR* blr = blr_buffer;
	const SLONG* const end_ranges = field->fld_ranges + 2 * field->fld_dimensions;

	USHORT field_length = field->fld_length;
	if (tdgbl->gbl_sw_transportable)
		xdr_buffer.lstr_length = field_length + 3;

	// build the sdl

	add_byte(blr, isc_sdl_version1);

	add_byte(blr, isc_sdl_struct);
	add_byte(blr, 1);

	add_byte(blr, field->fld_type);

	switch (field->fld_type)
	{
	case blr_short:
	case blr_long:
	case blr_quad:
	case blr_int64:
		add_byte(blr, field->fld_scale);
		break;
	case blr_text:
	case blr_varying:
		add_word(blr, field->fld_length);
		break;
	}

	if (field->fld_type == blr_varying)
		field_length += sizeof(USHORT);

	add_byte(blr, isc_sdl_rid);
	add_word(blr, relation->rel_id);
	add_byte(blr, isc_sdl_fid);
	add_word(blr, field->fld_id);

	USHORT count = 0;
	for (const SLONG* range = field->fld_ranges; range < end_ranges; range += 2, count++)
	{
		add_byte(blr, isc_sdl_do2);
		add_byte(blr, count);
		add_byte(blr, isc_sdl_long_integer);
		add_long(blr, range[0]);
		add_byte(blr, isc_sdl_long_integer);
		add_long(blr, range[1]);
	}

	add_byte(blr, isc_sdl_element);
	add_byte(blr, 1);
	add_byte(blr, isc_sdl_scalar);
	add_byte(blr, 0);
	add_byte(blr, field->fld_dimensions);

	for (count = 0; count < field->fld_dimensions; count++)
	{
		add_byte(blr, isc_sdl_variable);
		add_byte(blr, count);
	}

	add_byte(blr, isc_sdl_eoc);

#ifdef DEBUG
	if (debug_on)
		PRETTY_print_sdl(blr_buffer, NULL, NULL, 0);
#endif

	const USHORT blr_length = blr - blr_buffer;

	// compute the range size for each dimension = high_range - low_range

	ULONG slice_length = field_length;
	for (const SLONG* range = field->fld_ranges; range < end_ranges; range += 2)
	{
		slice_length *= (range[1] - range[0] + 1);
		if (tdgbl->gbl_sw_transportable)
			xdr_buffer.lstr_length *= (range[1] - range[0] + 1);
	}
	UCHAR* slice = BURP_alloc(slice_length);

	// allocate space for the XDR representation

	if (tdgbl->gbl_sw_transportable)
	{
		xdr_buffer.lstr_address = BURP_alloc(xdr_buffer.lstr_length);
		xdr_buffer.lstr_allocated = xdr_buffer.lstr_length;
	}

	ISC_STATUS_ARRAY status_vector;
	ULONG return_length = 0;
	if (isc_get_slice(status_vector, &DB, &gds_trans, blob_id, blr_length, (const char*) blr_buffer,
					  0,	// param length for subset of an array handling
					  NULL,	// param for subset of an array handling
					  slice_length, slice, (SLONG*) &return_length))
	{
		BURP_print(false, 81, field->fld_name);
		// msg 81 error accessing blob field %s -- continuing
		BURP_print_status(false, status_vector);
#ifdef DEBUG
		PRETTY_print_sdl(blr_buffer, NULL, NULL, 0);
#endif
		// CVC: At this point I would expected calls to deallocate memory
		// See the end of this function.
		BURP_free(slice);
		if (xdr_buffer.lstr_allocated)
			BURP_free(xdr_buffer.lstr_address);
		return;
	}

	if (return_length != slice_length)
	{
		// Ugh.  The full array wasn't returned.  We must recompute the top
		// element to backup.

		SLONG returned_elements = (return_length / field_length) - 1;

		SLONG* returned_range = range_buffer;
		const SLONG* range = end_ranges - 2;
		for (int i1 = 0, i3 = 0;
			 range >= field->fld_ranges; range -= 2, returned_range++, i1++)
		{
			int divisor = 1;
			for (int i2 = (2 * (i1 + 1) + 1); i2 <= field->fld_dimensions * 2; i2 += 2)
			{
				divisor *= (field->fld_ranges[i2] - field->fld_ranges[i2 - 1] + 1);
			}
			*returned_range = (returned_elements - 1) / divisor + field->fld_ranges[i3];
			returned_elements -= (*returned_range - field->fld_ranges[i3]) * divisor;
			i3 += 2;
		}
	}

	put(tdgbl, (UCHAR) rec_array);
	put_int32(att_blob_field_number, field->fld_number);
	put_int32(att_array_dimensions, field->fld_dimensions);

	SLONG* returned_range = range_buffer;
	for (const SLONG* range = field->fld_ranges; range < end_ranges; range += 2, returned_range++)
	{
		put_int32(att_array_range_low, (int) range[0]);
		if (return_length == slice_length)
			put_int32(att_array_range_high, (int) range[1]);
		else
			put_int32(att_array_range_high, (int) *returned_range);
	}

	put(tdgbl, att_blob_data);
	put(tdgbl, (UCHAR) (return_length));
	put(tdgbl, (UCHAR) (return_length >> 8));
	put(tdgbl, (UCHAR) (return_length >> 16));
	put(tdgbl, (UCHAR) (return_length >> 24));

	if (return_length)
	{
		const UCHAR* p;
		if (tdgbl->gbl_sw_transportable)
		{
			lstring xdr_slice;
			xdr_slice.lstr_allocated = xdr_slice.lstr_length = return_length;
			xdr_slice.lstr_address = slice;
			return_length = CAN_slice(&xdr_buffer, &xdr_slice, TRUE, /*blr_length,*/ blr_buffer);
			put(tdgbl, att_xdr_array);
			put(tdgbl, (UCHAR) (return_length));
			put(tdgbl, (UCHAR) (return_length >> 8));
			put(tdgbl, (UCHAR) (return_length >> 16));
			put(tdgbl, (UCHAR) (return_length >> 24));
			p = xdr_buffer.lstr_address;
		}
		else
			p = slice;
		put_block(tdgbl, p, return_length);
	}

	BURP_free(slice);
	if (xdr_buffer.lstr_allocated)
		BURP_free(xdr_buffer.lstr_address);
}


void put_asciz( const att_type attribute, const TEXT* string)
{
/**************************************
 *
 *	p u t _ a s c i z
 *
 **************************************
 *
 * Functional description
 *	Write an attribute starting with a null terminated string.
 *	Currently it's only called by write_database with the db's name as param.
 *
 **************************************/
	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	ULONG len = strlen(string);
	// CVC: We'll have to ensure that length < MAX_FILE_NAME_SIZE.
	// For now, we'll truncate.
	// We can't honor operating systems that allow longer file names.
	if (len >= MAX_FILE_NAME_SIZE)
	{
		BURP_print(true, 343, SafeArg() << int(attribute) << "put_asciz()" << (MAX_FILE_NAME_SIZE - 1));
		// msg 343: text for attribute @1 is too large in @2, truncating to @3 bytes
		len = MAX_FILE_NAME_SIZE - 1;
	}

	put(tdgbl, attribute);
	put(tdgbl, (UCHAR) len);
	if (len)
		put_block(tdgbl, (const UCHAR*) string, len);
}


void put_blob( burp_fld* field, ISC_QUAD& blob_id)
{
/**************************************
 *
 *	p u t _ b l o b
 *
 **************************************
 *
 * Functional description
 *	Write out a blob.  If, however, it's null, don't even bother.
 *	This is for user data blobs.
 *
 **************************************/
	ISC_STATUS_ARRAY status_vector;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	// If the blob is null, don't store it.  It will be restored as null.

	if (UserBlob::blobIsNull(blob_id))
		return;

	// Open the blob and get it's vital statistics

	UserBlob blob(status_vector);

	if (!blob.open(DB, gds_trans, blob_id))
	{
		BURP_print(false, 81, field->fld_name);
		// msg 81 error accessing blob field %s -- continuing
		BURP_print_status(false, status_vector);
		return;
	}

	UCHAR blob_info[32];
	if (!blob.getInfo(sizeof(blob_items), blob_items, sizeof(blob_info), blob_info))
	{
		BURP_error_redirect(status_vector, 20);
		// msg 20 isc_blob_info failed
	}

	put(tdgbl, (UCHAR) rec_blob);
	put_int32(att_blob_field_number, field->fld_number);

	ULONG segments = 0, total_length = 0;
	USHORT max_segment = 0;
	int blob_type = 0; // 0 - segmented, 1 - stream
	const UCHAR* p = blob_info;

	UCHAR item;
	while ((item = *p++) != isc_info_end)
	{
		const USHORT l = gds__vax_integer(p, 2);
		p += 2;
		const ULONG n = gds__vax_integer(p, l);
		p += l;
		switch (item)
		{
		case isc_info_blob_max_segment:
			max_segment = n;
			break;

		case isc_info_blob_type:
			blob_type = n;
			break;

		case isc_info_blob_num_segments:
			segments = n;
			break;

		case isc_info_blob_total_length:
			total_length = n;
			break;

		default:
			BURP_error_redirect(NULL, 21, SafeArg() << int(item));
			// msg 21 don't understand blob info item %ld
		}
	}

	// NS: Compute number of chunks we are going to write for stream blob based
	// on total blob length and maximum segment size. This way we tend to
	// preserve maximum internal segment size over backup/restore. I'm not sure
	// this is beneficial, but let's do it for the moment instead of inventing
	// our own chunk size. Note, the number of segments returned by information
	// call for stream blob is always unreliable, even for zero-length blobs
	if (blob_type == 1)
	{
		if (total_length != 0)
			segments = (total_length + max_segment - 1) / max_segment;
		else
			segments = 0;
	}

	put_int32(att_blob_max_segment, max_segment);
	put_int32(att_blob_number_segments, segments);
	put_int32(att_blob_type, blob_type);

	// Allocate a buffer large enough for the largest segment and start grinding.
	UCHAR static_buffer[1024];
	UCHAR* buffer;
	if (!max_segment || max_segment <= sizeof(static_buffer))
		buffer = static_buffer;
	else
		buffer = BURP_alloc(max_segment);

	put(tdgbl, att_blob_data);

	while (segments > 0)
	{
		size_t segment_length;
		blob.getSegment(max_segment, buffer, segment_length);

		const ISC_STATUS status = blob.getCode();
		// Handle the errors. For stream blob isc_segment is not error here.
		if (status && (status != isc_segment || blob_type == 0))
		{
			BURP_error_redirect(status_vector, 22);
			// msg 22 isc_get_segment failed
		}

		put(tdgbl, (UCHAR) (segment_length));
		put(tdgbl, (UCHAR) (segment_length >> 8));
		if (segment_length)
		{
			put_block(tdgbl, buffer, segment_length);
		}
		--segments;
	}

	if (!blob.close())
		BURP_error_redirect(status_vector, 23);
		// msg 23 isc_close_blob failed

	if (buffer != static_buffer)
		BURP_free(buffer);
}


bool put_blr_blob( att_type attribute, ISC_QUAD& blob_id)
{
/**************************************
 *
 *	p u t _ b l r _ b l o b
 *
 **************************************
 *
 * Functional description
 *	Write out a blr blob, if present.  Otherwise do nothing.
 *	Return true if the blob was present, false otherwise.
 *
 **************************************/
	ISC_STATUS_ARRAY status_vector;
	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	// If the blob is null, don't store it.  It will be restored as null.

	if (UserBlob::blobIsNull(blob_id))
		return false;

	// Open the blob and get it's vital statistics

	UserBlob blob(status_vector);

	if (!blob.open(DB, gds_trans, blob_id))
	{
		BURP_error_redirect(status_vector, 24);
		// msg 24 isc_open_blob failed
	}

	UCHAR blob_info[32];
	if (!blob.getInfo(sizeof(blr_items), blr_items, sizeof(blob_info), blob_info))
	{
		BURP_error_redirect(status_vector, 20);
		// msg 20 isc_blob_info failed
	}

	ULONG length = 0;
	USHORT max_segment = 0;
	const UCHAR* p = blob_info;
	UCHAR item;

	while ((item = *p++) != isc_info_end)
	{
		const USHORT l = isc_vax_integer((const char*) p, 2);
		p += 2;
		const ULONG n = isc_vax_integer((const char*) p, l);
		p += l;
		switch (item)
		{
		case isc_info_blob_max_segment:
			max_segment = n;
			break;

		case isc_info_blob_total_length:
			length = n;
			break;

		default:
			BURP_print(true, 79, SafeArg() << int(item));
			// msg 79 don't understand blob info item %ld
			if (!blob.close())
				BURP_error_redirect(status_vector, 23);
				// msg 23 isc_close_blob failed
			return false;
		}
	}

	if (!length)
	{
		if (!blob.close())
			BURP_error_redirect(status_vector, 23);
			// msg 23 isc_close_blob failed
		return false;
	}

	// Rdb sometimes gets the length messed up

	if (length < max_segment)
		length = max_segment;

	put_int32(attribute, (int) length);

	// Allocate a buffer large enough for the largest segment and start grinding.

	UCHAR static_buffer[1024];
	UCHAR* buffer;
	if (!max_segment || max_segment <= sizeof(static_buffer))
		buffer = static_buffer;
	else
		buffer = BURP_alloc(max_segment);

	// The old code didn't accept isc_segment so we check it.
	size_t segment_length;
	while (blob.getSegment(max_segment, buffer, segment_length) && !blob.getCode())
	{
		if (segment_length)
		{
			put_block(tdgbl, buffer, segment_length);
		}
	}

	if (!blob.close())
	{
		BURP_error_redirect(status_vector, 23);
		// msg 23 isc_close_blob failed
	}

	if (buffer != static_buffer)
		BURP_free(buffer);

	return true;
}


void put_data(burp_rel* relation)
{
/**************************************
 *
 *	p u t _ d a t a
 *
 **************************************
 *
 * Functional description
 *	Write relation meta-data and data.
 *
 **************************************/
	burp_fld* field;
	ISC_STATUS_ARRAY status_vector;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	// CVC: A signed short isn't enough if the engine allows near 32K fields,
	// each being char(1) ASCII in the worst case. Looking at BLR generation
	// below, it's clear an extreme case won't compile => blr_length >= 32K.
	// However, SSHORT is the limit for request_length in isc_compile_request.
	SSHORT field_count = 1;

	for (field = relation->rel_fields; field; field = field->fld_next)
	{
		if (!(field->fld_flags & FLD_computed))
		{
			field_count += 2;
		}
	}
	fb_assert(field_count > 0 && field_count * 9 > 0 && field_count * 9 + 200 > 0);

	// Time to generate blr to fetch data.  Make sure we allocate a BLR buffer
	// large enough to handle the per field overhead
	UCHAR* const blr_buffer = BURP_alloc(200 + field_count * 9);
	UCHAR* blr = blr_buffer;
	add_byte(blr, blr_version4);
	add_byte(blr, blr_begin);
	add_byte(blr, blr_message);
	add_byte(blr, 0);				// Message number
	add_word(blr, field_count);		// Number of fields, counting eof

	RCRD_OFFSET offset = 0;
	SSHORT count = 0;   // This is param count.

	for (field = relation->rel_fields; field; field = field->fld_next)
	{
		if (field->fld_flags & FLD_computed)
			continue;
		SSHORT alignment = 4;
		FLD_LENGTH length = field->fld_length;
		SSHORT dtype = field->fld_type;
		if (field->fld_flags & FLD_array)
		{
			dtype = blr_blob;
			length = 8;
		}
		switch (dtype)
		{
		case blr_text:
			alignment = type_alignments[dtype_text];
			add_byte(blr, field->fld_type);
			add_word(blr, field->fld_length);
			break;

		case blr_varying:
			alignment = type_alignments[dtype_varying];
			add_byte(blr, field->fld_type);
			add_word(blr, field->fld_length);
			length += sizeof(USHORT);
			break;

		case blr_short:
			alignment = type_alignments[dtype_short];
			add_byte(blr, field->fld_type);
			add_byte(blr, field->fld_scale);
			break;

		case blr_long:
			alignment = type_alignments[dtype_long];
			add_byte(blr, field->fld_type);
			add_byte(blr, field->fld_scale);
			break;

		case blr_quad:
			alignment = type_alignments[dtype_quad];
			add_byte(blr, field->fld_type);
			add_byte(blr, field->fld_scale);
			break;

		case blr_int64:
			alignment = type_alignments[dtype_int64];
			add_byte(blr, field->fld_type);
			add_byte(blr, field->fld_scale);
			break;

		case blr_double:
			alignment = type_alignments[dtype_double];
			add_byte(blr, field->fld_type);
			break;

		case blr_timestamp:
			alignment = type_alignments[dtype_timestamp];
			add_byte(blr, field->fld_type);
			break;

		case blr_sql_time:
			alignment = type_alignments[dtype_sql_time];
			add_byte(blr, field->fld_type);
			break;

		case blr_sql_date:
			alignment = type_alignments[dtype_sql_date];
			add_byte(blr, field->fld_type);
			break;

		case blr_float:
			alignment = type_alignments[dtype_real];
			add_byte(blr, field->fld_type);
			break;

		case blr_blob:
			alignment = type_alignments[dtype_blob];
			add_byte(blr, blr_quad);
			add_byte(blr, 0);
			break;

		case blr_bool:
			alignment = type_alignments[dtype_boolean];
			add_byte(blr, field->fld_type);
			break;

		default:
			BURP_error_redirect(NULL, 26, SafeArg() << field->fld_type);
			// msg 26 datatype %ld not understood
			break;
		}
		if (alignment)
			offset = FB_ALIGN(offset, alignment);
		field->fld_offset = offset;
		field->fld_parameter = count++;
		offset += length;
	}

	// Next, build fields for null flags

	for (field = relation->rel_fields; field; field = field->fld_next)
	{
		if (field->fld_flags & FLD_computed)
			continue;
		add_byte(blr, blr_short);
		add_byte(blr, 0);
		offset = FB_ALIGN(offset, sizeof(SSHORT));
		field->fld_missing_parameter = count++;
		offset += sizeof(SSHORT);
	}

	// Finally, make up an EOF field

	add_byte(blr, blr_short);			// eof field
	add_byte(blr, 0);					// scale for eof field
	SSHORT eof_parameter = count++;
	RCRD_OFFSET record_length = offset;
	RCRD_OFFSET eof_offset = FB_ALIGN(offset, sizeof(SSHORT));
	// To be used later for the buffer size to receive data
	const FLD_LENGTH length = (USHORT) (eof_offset + sizeof(SSHORT));

	// Build FOR loop, body, and eof handler

	add_byte(blr, blr_for);
	add_byte(blr, blr_rse);
	add_byte(blr, 1);					// count of relations
	add_byte(blr, blr_rid);
	add_word(blr, relation->rel_id);
	add_byte(blr, 0);					// context variable
	add_byte(blr, blr_end);

	add_byte(blr, blr_send);
	add_byte(blr, 0);
	add_byte(blr, blr_begin);
	add_byte(blr, blr_assignment);
	add_byte(blr, blr_literal);
	add_byte(blr, blr_short);
	add_byte(blr, 0);
	add_word(blr, 1);
	add_byte(blr, blr_parameter);
	add_byte(blr, 0);
	add_word(blr, eof_parameter);

	for (field = relation->rel_fields; field; field = field->fld_next)
	{
		if (field->fld_flags & FLD_computed)
			continue;
		add_byte(blr, blr_assignment);
		add_byte(blr, blr_fid);
		add_byte(blr, 0);
		add_word(blr, field->fld_id);
		add_byte(blr, blr_parameter2);
		add_byte(blr, 0);
		add_word(blr, field->fld_parameter);
		add_word(blr, field->fld_missing_parameter);
	}

	add_byte(blr, blr_end);

	add_byte(blr, blr_send);
	add_byte(blr, 0);
	add_byte(blr, blr_assignment);
	add_byte(blr, blr_literal);
	add_byte(blr, blr_short);
	add_byte(blr, 0);
	add_word(blr, 0);
	add_byte(blr, blr_parameter);
	add_byte(blr, 0);
	add_word(blr, eof_parameter);

	add_byte(blr, blr_end);
	add_byte(blr, blr_eoc);

	SSHORT blr_length = blr - blr_buffer;

#ifdef DEBUG
	if (debug_on)
		fb_print_blr(blr_buffer, blr_length, NULL, NULL, 0);
#endif

	// Compile request

	FB_API_HANDLE request = 0;
	if (isc_compile_request(status_vector, &DB, &request, blr_length, (const SCHAR*) blr_buffer))
	{
		BURP_error_redirect(status_vector, 27);
		// msg 27 isc_compile_request failed
		fb_print_blr(blr_buffer, blr_length, NULL, NULL, 0);
	}

	BURP_free(blr_buffer);

	BURP_verbose(142, relation->rel_name);
	// msg 142  writing data for relation %s

	if (isc_start_request(status_vector, &request, &gds_trans, 0))
	{
		BURP_error_redirect(status_vector, 28);
		// msg 28 isc_start_request failed
	}

	// Here is the crux of the problem -- writing data.  All this work
	// for the following small loop.

	UCHAR* buffer = BURP_alloc(length);
	SSHORT* eof = (SSHORT *) (buffer + eof_offset);

	// the XDR representation may be even fluffier
	lstring xdr_buffer;
	if (tdgbl->gbl_sw_transportable)
	{
		xdr_buffer.lstr_length = xdr_buffer.lstr_allocated = length + count * 3;
		xdr_buffer.lstr_address = BURP_alloc(xdr_buffer.lstr_length);
	}
	else
		xdr_buffer.lstr_address = NULL;

	ULONG records = 0;
	while (true)
	{
		if (isc_receive(status_vector, &request, 0, length, buffer, 0))
		{
			BURP_error_redirect(status_vector, 29);
			// msg 29 isc_receive failed
		}
		if (!*eof)
			break;
		records++;
		// Verbose records
		if ((records % tdgbl->verboseInterval) == 0)
			BURP_verbose(108, SafeArg() << records);

		put(tdgbl, (UCHAR) rec_data);
		put_int32(att_data_length, record_length);
		const UCHAR* p;
		if (tdgbl->gbl_sw_transportable)
		{
			record_length = CAN_encode_decode(relation, &xdr_buffer, buffer, TRUE);
			put_int32(att_xdr_length, record_length);
			p = xdr_buffer.lstr_address;
		}
		else
			p = buffer;
		put(tdgbl, att_data_data);
		if (tdgbl->gbl_sw_compress)
			compress(p, record_length);
		else if (record_length)
			put_block(tdgbl, p, record_length);

		// Look for any blobs to write

		for (field = relation->rel_fields; field; field = field->fld_next)
		{
			if (field->fld_type == blr_blob &&
				!(field->fld_flags & FLD_computed) && !(field->fld_flags & FLD_array))
			{
				put_blob(field, *(ISC_QUAD*) (buffer + field->fld_offset));
			}
		}

		// Look for any array to write
		// we got back the blob_id for the array from isc_receive in the second param.
		for (field = relation->rel_fields; field; field = field->fld_next)
		{
			if (field->fld_flags & FLD_array)
			{
				put_array(field, relation, (ISC_QUAD*) (buffer + field->fld_offset));
			}
		}
	}

	BURP_free(buffer);

	if (xdr_buffer.lstr_address)
		BURP_free(xdr_buffer.lstr_address);

	BURP_verbose(108, SafeArg() << records);
	// msg 108 %ld records written

	if (isc_release_request(status_vector, &request))
		BURP_error_redirect(status_vector, 30);
	// msg 30 isc_release_request failed
}


void put_index( burp_rel* relation)
{
   struct isc_681_struct {
          char  isc_682 [32];	/* RDB$FIELD_NAME */
          short isc_683;	/* isc_utility */
   } isc_681;
   struct isc_679_struct {
          char  isc_680 [32];	/* RDB$INDEX_NAME */
   } isc_679;
   struct isc_688_struct {
          short isc_689;	/* isc_utility */
   } isc_688;
   struct isc_685_struct {
          char  isc_686 [32];	/* RDB$RELATION_NAME */
          char  isc_687 [32];	/* RDB$INDEX_NAME */
   } isc_685;
   struct isc_693_struct {
          char  isc_694 [32];	/* RDB$FOREIGN_KEY */
          ISC_QUAD isc_695;	/* RDB$EXPRESSION_BLR */
          ISC_QUAD isc_696;	/* RDB$EXPRESSION_SOURCE */
          ISC_QUAD isc_697;	/* RDB$DESCRIPTION */
          char  isc_698 [32];	/* RDB$INDEX_NAME */
          short isc_699;	/* isc_utility */
          short isc_700;	/* gds__null_flag */
          short isc_701;	/* gds__null_flag */
          short isc_702;	/* gds__null_flag */
          short isc_703;	/* RDB$INDEX_TYPE */
          short isc_704;	/* RDB$UNIQUE_FLAG */
          short isc_705;	/* RDB$INDEX_INACTIVE */
          short isc_706;	/* RDB$SEGMENT_COUNT */
   } isc_693;
   struct isc_691_struct {
          char  isc_692 [32];	/* RDB$RELATION_NAME */
   } isc_691;
/**************************************
 *
 *	p u t _ i n d e x
 *
 **************************************
 *
 * Functional description
 *	Write information about an index.  First
 *	check that all the segments of the
 *	index exist.
 *
 **************************************/
	ULONG count;
	TEXT temp[GDS_NAME_LEN];

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	// if we have all capabilities, use the first request to get the
	// most performance out of the latest engine; if we don't
	// have one of the capabilities we must use the second set of
	// requests--this requires more code but it is well worth it
	// for the performance benefits, especially remotely--deej

	/*FOR (REQUEST_HANDLE tdgbl->handles_put_index_req_handle1)
		X IN RDB$INDICES WITH
		X.RDB$RELATION_NAME EQ relation->rel_name*/
	{
        if (!tdgbl->handles_put_index_req_handle1)
           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &tdgbl->handles_put_index_req_handle1, (short) sizeof(isc_690), (char*) isc_690);
	isc_vtov ((const char*) relation->rel_name, (char*) isc_691.isc_692, 32);
	if (tdgbl->handles_put_index_req_handle1)
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &tdgbl->handles_put_index_req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_691, (short) 0);
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &tdgbl->handles_put_index_req_handle1, (short) 1, (short) 104, &isc_693, (short) 0);
	   if (!isc_693.isc_699 || isc_status [1]) break;

		count = 0;
		/*FOR (REQUEST_HANDLE tdgbl->handles_put_index_req_handle2)
			I_S IN RDB$INDEX_SEGMENTS CROSS
			RFR IN RDB$RELATION_FIELDS WITH
			I_S.RDB$FIELD_NAME = RFR.RDB$FIELD_NAME AND
			I_S.RDB$INDEX_NAME = X.RDB$INDEX_NAME AND
			RFR.RDB$RELATION_NAME = relation->rel_name*/
		{
                if (!tdgbl->handles_put_index_req_handle2)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &tdgbl->handles_put_index_req_handle2, (short) sizeof(isc_684), (char*) isc_684);
		isc_vtov ((const char*) relation->rel_name, (char*) isc_685.isc_686, 32);
		isc_vtov ((const char*) isc_693.isc_698, (char*) isc_685.isc_687, 32);
		if (tdgbl->handles_put_index_req_handle2)
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &tdgbl->handles_put_index_req_handle2, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 64, &isc_685, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &tdgbl->handles_put_index_req_handle2, (short) 1, (short) 2, &isc_688, (short) 0);
		   if (!isc_688.isc_689 || isc_status [1]) break;

			count++;

		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}

		if (count != (ULONG) /*X.RDB$SEGMENT_COUNT*/
				     isc_693.isc_706)
		{
			BURP_print(true, 180, SafeArg() << /*X.RDB$INDEX_NAME*/
							   isc_693.isc_698 << count << /*X.RDB$SEGMENT_COUNT*/
	     isc_693.isc_706);
			continue;
		}

		put(tdgbl, rec_index);
		const ULONG l = PUT_TEXT (att_index_name, /*X.RDB$INDEX_NAME*/
							  isc_693.isc_698);
		MISC_terminate (/*X.RDB$INDEX_NAME*/
				isc_693.isc_698, temp, l, sizeof(temp));
		BURP_verbose (151, temp);
		// msg 151 writing index %s
		put_int32 (att_segment_count, /*X.RDB$SEGMENT_COUNT*/
					      isc_693.isc_706);
		put_int32 (att_index_inactive, /*X.RDB$INDEX_INACTIVE*/
					       isc_693.isc_705);
		put_int32 (att_index_unique_flag, /*X.RDB$UNIQUE_FLAG*/
						  isc_693.isc_704);

		/*FOR (REQUEST_HANDLE tdgbl->handles_put_index_req_handle5)
			Y IN RDB$INDEX_SEGMENTS WITH
			Y.RDB$INDEX_NAME EQ X.RDB$INDEX_NAME
			SORTED BY Y.RDB$FIELD_POSITION*/
		{
                if (!tdgbl->handles_put_index_req_handle5)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &tdgbl->handles_put_index_req_handle5, (short) sizeof(isc_678), (char*) isc_678);
		isc_vtov ((const char*) isc_693.isc_698, (char*) isc_679.isc_680, 32);
		if (tdgbl->handles_put_index_req_handle5)
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &tdgbl->handles_put_index_req_handle5, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_679, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &tdgbl->handles_put_index_req_handle5, (short) 1, (short) 34, &isc_681, (short) 0);
		   if (!isc_681.isc_683 || isc_status [1]) break;

			PUT_TEXT (att_index_field_name, /*Y.RDB$FIELD_NAME*/
							isc_681.isc_682);

		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}

		put_source_blob (att_index_description2, att_index_description, /*X.RDB$DESCRIPTION*/
										isc_693.isc_697);
		put_int32 (att_index_type, /*X.RDB$INDEX_TYPE*/
					   isc_693.isc_703);

		if (!/*X.RDB$EXPRESSION_SOURCE.NULL*/
		     isc_693.isc_702)
			put_source_blob (att_index_expression_source, att_index_expression_source,
							 /*X.RDB$EXPRESSION_SOURCE*/
							 isc_693.isc_696);
		if (!/*X.RDB$EXPRESSION_BLR.NULL*/
		     isc_693.isc_701)
			put_blr_blob (att_index_expression_blr, /*X.RDB$EXPRESSION_BLR*/
								isc_693.isc_695);
		if (!/*X.RDB$FOREIGN_KEY.NULL*/
		     isc_693.isc_700)
			PUT_TEXT (att_index_foreign_key, /*X.RDB$FOREIGN_KEY*/
							 isc_693.isc_694);
		put(tdgbl, att_end);

	/*END_FOR;*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}
}


int put_message( att_type attribute, att_type attribute2, const TEXT* text, const ULONG length)
{
/**************************************
 *
 *	p u t _ m e s s a g e
 *
 **************************************
 *
 * Functional description
 *	Write a variable length text string, with embedded
 *      blanks.  Same as put_text but handles embedded blanks.
 * CVC: As v6 time, put_text handles embedded blanks, too!
 * The only difference is that put_text's length is UCHAR, so
 * in theory put_message can handle much longer input and it's
 * used for exception and trigger's messages (plus update/delete
 * rules for FKs and constraint types, where it's irrelevant
 * which function of the two you use).
 * CVC: Responsability for FKs and constraint types transferred to put_text.
 * This function tries to maintain backwards compatibility where possible.
 *
 **************************************/
	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	ULONG len = 0;
	for (const TEXT* p = text; *p && len < length; p++)
		len++;

	const ULONG newlen = MIN(len, length);
	fb_assert(newlen <= MAX_USHORT);

	// If we can store the message using the old format, we do it.
	if (newlen <= MAX_UCHAR)
	{
		put(tdgbl, attribute);
		put(tdgbl, (UCHAR) newlen);
	}
	else if (newlen <= MAX_USHORT)
	{
		if (!attribute2) // In theory, this never happens, because the caller knows what it's doing.
			BURP_error(314, "");
		put(tdgbl, attribute2);
		USHORT vax_value = (USHORT) newlen;
		vax_value = (USHORT) gds__vax_integer((const UCHAR*) &vax_value, sizeof(vax_value));
		put_block(tdgbl, (const UCHAR*) &vax_value, sizeof(vax_value));
	}
	else
		BURP_error(315, "");

	if (newlen)
		put_block(tdgbl, reinterpret_cast<const UCHAR*>(text), newlen);

	return newlen;
}


void put_int32( att_type attribute, SLONG value)
{
/**************************************
 *
 *	p u t _ i n t 3 2
 *
 **************************************
 *
 * Functional description
 *	Write a numeric value as an attribute.  The number is represented
 *	low byte first, high byte last, as in VAX.
 *
 **************************************/
	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	const SLONG vax_value = (SLONG) isc_vax_integer((const char*) &value, sizeof(value));

	put(tdgbl, attribute);
	put(tdgbl, (UCHAR) sizeof(value));
	put_block(tdgbl, (const UCHAR*) &vax_value, sizeof(vax_value));
}


void put_int64( att_type attribute, SINT64 value)
{
/**************************************
 *
 *	p u t _ i n t 6 4
 *
 **************************************
 *
 * Functional description
 *	Write a 64-bit numeric value as an attribute.
 *      The number is represented low byte first, high byte last, as in VAX.
 *      This function is just like put_int32, except that it handles an
 *      INT64 value, while put_int32 handles a 32-bit value.
 *
 **************************************/
	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	const FB_UINT64 le_value = (FB_UINT64) isc_portable_integer((const UCHAR*) &value, sizeof(value));

	put(tdgbl, attribute);
	put(tdgbl, (UCHAR) sizeof(value));
	put_block(tdgbl, (const UCHAR*) &le_value, sizeof(le_value));
}


void put_relation( burp_rel* relation)
{
   struct isc_661_struct {
          char  isc_662 [256];	/* RDB$CONTEXT_NAME */
          char  isc_663 [32];	/* RDB$RELATION_NAME */
          short isc_664;	/* isc_utility */
          short isc_665;	/* RDB$VIEW_CONTEXT */
   } isc_661;
   struct isc_659_struct {
          char  isc_660 [32];	/* RDB$VIEW_NAME */
   } isc_659;
   struct isc_669_struct {
          char  isc_670 [32];	/* RDB$PACKAGE_NAME */
          char  isc_671 [256];	/* RDB$CONTEXT_NAME */
          char  isc_672 [32];	/* RDB$RELATION_NAME */
          short isc_673;	/* isc_utility */
          short isc_674;	/* gds__null_flag */
          short isc_675;	/* gds__null_flag */
          short isc_676;	/* RDB$CONTEXT_TYPE */
          short isc_677;	/* RDB$VIEW_CONTEXT */
   } isc_669;
   struct isc_667_struct {
          char  isc_668 [32];	/* RDB$VIEW_NAME */
   } isc_667;
/**************************************
 *
 * 	p u t _ r e l a t i o n
 *
 **************************************
 *
 * Functional description
 *	Write relation meta-data and data.
 *
 **************************************/
	TEXT temp[GDS_NAME_LEN];

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	// Write local field information.  This is made slightly more complicated
	// by the requirement that computational fields be aligned.

	burp_fld* aligned = NULL;
	burp_fld* unaligned = NULL;
	burp_fld* aligned4 = NULL;
	burp_fld* aligned8 = NULL;

	burp_fld* fields = get_fields(relation);

	// sort the list of fields into three lists, depending on alignment
	burp_fld* field;
	for (field = fields; field = fields;)
	{
		fields = field->fld_next;
		USHORT l = field->fld_length;
		if (field->fld_type == blr_varying)
			l += sizeof(USHORT);
		if (!(l & 7))
		{
			field->fld_next = aligned8;
			aligned8 = field;
		}
		else if (!(l & 3))
		{
			field->fld_next = aligned4;
			aligned4 = field;
		}
		else if (l & 1)
		{
			field->fld_next = unaligned;
			unaligned = field;
		}
		else
		{
			field->fld_next = aligned;
			aligned = field;
		}
	}

	// Next, merge the aligned and unaligned sub-lists.  In the process,
	// re-create (approximately) the original order of the fields.  This is
	// not strictly required, but it certainly is polite.

	while (field = unaligned)
	{
		unaligned = field->fld_next;
		field->fld_next = relation->rel_fields;
		relation->rel_fields = field;
	}

	while (field = aligned)
	{
		aligned = field->fld_next;
		field->fld_next = relation->rel_fields;
		relation->rel_fields = field;
	}

	while (field = aligned4)
	{
		aligned4 = field->fld_next;
		field->fld_next = relation->rel_fields;
		relation->rel_fields = field;
	}

	while (field = aligned8)
	{
		aligned8 = field->fld_next;
		field->fld_next = relation->rel_fields;
		relation->rel_fields = field;
	}

	// Now write the fields in what will become physical backup order

	for (field = relation->rel_fields; field; field = field->fld_next)
	{
		put(tdgbl, (UCHAR) rec_field);
		const USHORT l = PUT_TEXT(att_field_name, field->fld_name);
		MISC_terminate(field->fld_name, temp, l, sizeof(temp));
		BURP_verbose(144, temp);
		// msg 144  writing field %s
		PUT_TEXT(att_field_source, field->fld_source);
		if (field->fld_query_name[0])
			PUT_TEXT(att_field_query_name, field->fld_query_name);
		if (field->fld_complex_name[0])
			PUT_TEXT(att_field_complex_name, field->fld_complex_name);
		if (field->fld_edit_string[0])
			PUT_TEXT(att_field_edit_string, field->fld_edit_string);
		put_source_blob(att_field_description2, att_field_description, field->fld_description);
		put_source_blob(att_field_query_header, att_field_query_header, field->fld_query_header);
		if (field->fld_security_class[0])
			PUT_TEXT(att_field_security_class, field->fld_security_class);
		if (!(field->fld_flags & FLD_position_missing))
			put_int32(att_field_position, field->fld_position);
		put_int32(att_field_type, field->fld_type);
		put_int32(att_field_length, field->fld_length);
		put_int32(att_field_sub_type, field->fld_sub_type);
		put_int32(att_field_scale, field->fld_scale);
		put_int32(att_field_number, field->fld_number);
		put_int32(att_field_system_flag, field->fld_system_flag);
		if (!(field->fld_flags & FLD_update_missing))
			put_int32(att_field_update_flag, field->fld_update_flag);
		if (field->fld_flags & FLD_null_flag)
			put_int32(att_field_null_flag, field->fld_null_flag);
		if (field->fld_flags & FLD_charset_flag)
			put_int32(att_field_character_set, field->fld_character_set_id);
		if (field->fld_flags & FLD_collate_flag)
			put_int32(att_field_collation_id, field->fld_collation_id);
		put_blr_blob(att_field_default_value, field->fld_default_value);
		put_source_blob(att_field_default_source, att_field_default_source, field->fld_default_source);

		if (relation->rel_flags & REL_view)
		{
			put_int32(att_view_context, field->fld_view_context);
			if (field->fld_base[0])
				PUT_TEXT(att_base_field, field->fld_base);
		}

		if (field->fld_flags & FLD_computed)
			put_int32(att_field_computed_flag, TRUE);

		if (field->fld_flags & FLD_array)
		{
			put_int32(att_field_dimensions, field->fld_dimensions);
			const SLONG* rp = field->fld_ranges;
			for (USHORT n = field->fld_dimensions; n; rp += 2, n--)
			{
				put_int32(att_field_range_low, *rp);
				put_int32(att_field_range_high, *(rp + 1));
			}
		}

		if (field->fld_generator[0])
		{
			PUT_TEXT(att_field_generator_name, field->fld_generator);
			put_int32(att_field_identity_type, field->fld_identity_type);
		}

		put(tdgbl, att_end);
	}

	// Write out view relations (if a view, of course)

	if (relation->rel_flags & REL_view)
	{
		if (tdgbl->runtimeODS >= DB_VERSION_DDL12)
		{
			/*FOR (REQUEST_HANDLE tdgbl->handles_put_relation_req_handle1)
				X IN RDB$VIEW_RELATIONS WITH X.RDB$VIEW_NAME EQ relation->rel_name*/
			{
                        if (!tdgbl->handles_put_relation_req_handle1)
                           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &tdgbl->handles_put_relation_req_handle1, (short) sizeof(isc_666), (char*) isc_666);
			isc_vtov ((const char*) relation->rel_name, (char*) isc_667.isc_668, 32);
			if (tdgbl->handles_put_relation_req_handle1)
                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &tdgbl->handles_put_relation_req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_667, (short) 0);
			if (!isc_status [1]) {
			while (1)
			   {
                           isc_receive (isc_status, (FB_API_HANDLE*) &tdgbl->handles_put_relation_req_handle1, (short) 1, (short) 330, &isc_669, (short) 0);
			   if (!isc_669.isc_673 || isc_status [1]) break;
				put(tdgbl, rec_view);
				PUT_TEXT (att_view_relation_name, /*X.RDB$RELATION_NAME*/
								  isc_669.isc_672);
				put_int32 (att_view_context_id, /*X.RDB$VIEW_CONTEXT*/
								isc_669.isc_677);
				// Will need PUT_MESSAGE if this field grows to more than 255 bytes.
				PUT_TEXT (att_view_context_name, /*X.RDB$CONTEXT_NAME*/
								 isc_669.isc_671);
				if (!/*X.RDB$CONTEXT_TYPE.NULL*/
				     isc_669.isc_675)
					put_int32(att_view_context_type, /*X.RDB$CONTEXT_TYPE*/
									 isc_669.isc_676);
				if (!/*X.RDB$PACKAGE_NAME.NULL*/
				     isc_669.isc_674)
					PUT_TEXT(att_view_context_package, /*X.RDB$PACKAGE_NAME*/
									   isc_669.isc_670);
				put(tdgbl, att_end);
			/*END_FOR*/
			   }
			   };
			/*ON_ERROR*/
			if (isc_status [1])
			   {
				general_on_error();
			/*END_ERROR;*/
			   }
			}
		}
		else
		{
			/*FOR (REQUEST_HANDLE tdgbl->handles_put_relation_req_handle1)
				X IN RDB$VIEW_RELATIONS WITH X.RDB$VIEW_NAME EQ relation->rel_name*/
			{
                        if (!tdgbl->handles_put_relation_req_handle1)
                           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &tdgbl->handles_put_relation_req_handle1, (short) sizeof(isc_658), (char*) isc_658);
			isc_vtov ((const char*) relation->rel_name, (char*) isc_659.isc_660, 32);
			if (tdgbl->handles_put_relation_req_handle1)
                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &tdgbl->handles_put_relation_req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_659, (short) 0);
			if (!isc_status [1]) {
			while (1)
			   {
                           isc_receive (isc_status, (FB_API_HANDLE*) &tdgbl->handles_put_relation_req_handle1, (short) 1, (short) 292, &isc_661, (short) 0);
			   if (!isc_661.isc_664 || isc_status [1]) break;
				put(tdgbl, rec_view);
				PUT_TEXT (att_view_relation_name, /*X.RDB$RELATION_NAME*/
								  isc_661.isc_663);
				put_int32 (att_view_context_id, /*X.RDB$VIEW_CONTEXT*/
								isc_661.isc_665);
				PUT_TEXT (att_view_context_name, /*X.RDB$CONTEXT_NAME*/
								 isc_661.isc_662);
				put(tdgbl, att_end);
			/*END_FOR*/
			   }
			   };
			/*ON_ERROR*/
			if (isc_status [1])
			   {
				general_on_error();
			/*END_ERROR;*/
			   }
			}
		}
	}
	put(tdgbl, (UCHAR) rec_relation_end);
}


bool put_source_blob(att_type attribute, att_type old_attribute, ISC_QUAD& blob_id)
{
/**************************************
 *
 *	p u t _ s o u r c e _ b l o b
 *
 **************************************
 *
 * Functional description
 *	Write out a source blob or query header if present.
 *	Return true is there was the blob was present, false otherwise.
 *	Include the NULL character to separate each segment.
 *
 **************************************/
	ISC_STATUS_ARRAY status_vector;
	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	// If the blob is null, don't store it.  It will be restored as null.

	if (UserBlob::blobIsNull(blob_id))
		return false;

	if (tdgbl->gbl_sw_old_descriptions && attribute != att_field_query_header)
		return put_blr_blob(old_attribute, blob_id);

	// Open the blob and get it's vital statistics

	UserBlob blob(status_vector);

	if (!blob.open(DB, gds_trans, blob_id))
	{
		BURP_error_redirect(status_vector, 24);
		// msg 24 isc_open_blob failed
	}

	UCHAR blob_info[48];
	if (!blob.getInfo(sizeof(source_items), source_items, sizeof(blob_info), blob_info))
	{
		BURP_error_redirect(status_vector, 20);
		// msg 20 isc_blob_info failed
	}

	ULONG length = 0;
	ULONG num_seg = 0;
	USHORT max_segment = 0;
	const UCHAR* p = blob_info;
	UCHAR item;

	while ((item = *p++) != isc_info_end)
	{
		const USHORT l = gds__vax_integer(p, 2);
		p += 2;
		const ULONG n = gds__vax_integer(p, l);
		p += l;
		switch (item)
		{
		case isc_info_blob_max_segment:
			max_segment = n;
			break;

		case isc_info_blob_total_length:
			length = n;
			break;

		case isc_info_blob_num_segments:
			num_seg = n;
			break;

		default:
			BURP_print(true, 79, SafeArg() << int(item));
			// msg 79 don't understand blob info item %ld
			if (!blob.close())
			{
				BURP_error_redirect(status_vector, 23);
				// msg 23 isc_close_blob failed
			}
			return false;
		}
	}

	if (!length)
	{
		if (!blob.close())
		{
			BURP_error_redirect(status_vector, 23);
			// msg 23 isc_close_blob failed
		}
		return false;
	}

	// Rdb sometimes gets the length messed up

	if (length < max_segment)
		length = max_segment;

	fb_assert(FB_UINT64(length) + num_seg <= FB_UINT64(MAX_ULONG));
	put_int32(attribute, length + num_seg);

	// Allocate a buffer large enough for the largest segment and start grinding.

	UCHAR static_buffer[1024];
	UCHAR* buffer;
	if (!max_segment || max_segment <= sizeof(static_buffer))
		buffer = static_buffer;
	else
		buffer = BURP_alloc(max_segment);

	// The old code didn't accept isc_segment so we check it.
	size_t segment_length;
	while (blob.getSegment(max_segment, buffer, segment_length) && !blob.getCode())
	{
		if (segment_length)
		{
			put_block(tdgbl, buffer, segment_length);
		}
		put(tdgbl, (UCHAR) 0);
	}

	if (!blob.close())
		BURP_error_redirect(status_vector, 23);
	// msg 23 isc_close_blob failed

	if (buffer != static_buffer)
		BURP_free(buffer);

	return true;
}


int put_text( att_type attribute, const TEXT* text, SSHORT size_len)
{
/**************************************
 *
 *	p u t _ t e x t
 *
 **************************************
 *
 * Functional description
 * Write a variable length text string, with embedded spaces.
 * Truncate trailing spaces.
 * Now this routine does not truncate trailing spaces, 3-2002 MOD
 * transfering changes from fb1, I believe this is to do with problems
 * with quoted names and embedded spaces.
 * CVC: This routine does trailing spaces truncation, but correctly.
 *
 **************************************/
	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	SSHORT l = (SSHORT) MISC_symbol_length(text, (ULONG) size_len);
	fb_assert(l <= MAX_UCHAR);
	if (l > MAX_UCHAR)
	{
		BURP_print(true, 343, SafeArg() << int(attribute) << "put_text()" << MAX_UCHAR);
		// msg 343: text for attribute @1 is too large in @2, truncating to @3 bytes
		l = MAX_UCHAR;
	}

	put(tdgbl, attribute);
	put(tdgbl, (UCHAR) l);
	if (l)
		put_block(tdgbl, (const UCHAR*) text, l);

	return l;
}


void write_character_sets()
{
   struct isc_622_struct {
          char  isc_623 [32];	/* RDB$DEFAULT_COLLATE_NAME */
          char  isc_624 [32];	/* RDB$FUNCTION_NAME */
          ISC_QUAD isc_625;	/* RDB$DESCRIPTION */
          char  isc_626 [32];	/* RDB$FORM_OF_USE */
          char  isc_627 [32];	/* RDB$CHARACTER_SET_NAME */
          ISC_LONG isc_628;	/* RDB$NUMBER_OF_CHARACTERS */
          short isc_629;	/* isc_utility */
          short isc_630;	/* RDB$BYTES_PER_CHARACTER */
          short isc_631;	/* gds__null_flag */
          short isc_632;	/* gds__null_flag */
          short isc_633;	/* RDB$CHARACTER_SET_ID */
          short isc_634;	/* gds__null_flag */
          short isc_635;	/* gds__null_flag */
          short isc_636;	/* gds__null_flag */
          short isc_637;	/* RDB$SYSTEM_FLAG */
   } isc_622;
   struct isc_639_struct {
          char  isc_640 [32];	/* RDB$DEFAULT_COLLATE_NAME */
          char  isc_641 [32];	/* RDB$OWNER_NAME */
          char  isc_642 [32];	/* RDB$SECURITY_CLASS */
          char  isc_643 [32];	/* RDB$FUNCTION_NAME */
          ISC_QUAD isc_644;	/* RDB$DESCRIPTION */
          char  isc_645 [32];	/* RDB$FORM_OF_USE */
          char  isc_646 [32];	/* RDB$CHARACTER_SET_NAME */
          ISC_LONG isc_647;	/* RDB$NUMBER_OF_CHARACTERS */
          short isc_648;	/* isc_utility */
          short isc_649;	/* gds__null_flag */
          short isc_650;	/* gds__null_flag */
          short isc_651;	/* RDB$BYTES_PER_CHARACTER */
          short isc_652;	/* gds__null_flag */
          short isc_653;	/* gds__null_flag */
          short isc_654;	/* RDB$CHARACTER_SET_ID */
          short isc_655;	/* gds__null_flag */
          short isc_656;	/* gds__null_flag */
          short isc_657;	/* RDB$SYSTEM_FLAG */
   } isc_639;
/**************************************
 *
 *	w r i t e _ c h a r a c t e r _ s e t s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each user defined character set.
 *
 **************************************/
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	if (tdgbl->runtimeODS >= DB_VERSION_DDL12)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$CHARACTER_SETS
			WITH X.RDB$SYSTEM_FLAG NE 1 OR
				 X.RDB$DEFAULT_COLLATE_NAME NE X.RDB$CHARACTER_SET_NAME*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_638), (char*) isc_638);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 224, &isc_639, (short) 0);
		   if (!isc_639.isc_648 || isc_status [1]) break;

			put(tdgbl, rec_charset);
			PUT_TEXT (att_charset_name, /*X.RDB$CHARACTER_SET_NAME*/
						    isc_639.isc_646);

			if (/*X.RDB$SYSTEM_FLAG*/
			    isc_639.isc_657 != 1)
			{
				if (!/*X.RDB$FORM_OF_USE.NULL*/
				     isc_639.isc_656)
					PUT_TEXT (att_charset_form, /*X.RDB$FORM_OF_USE*/
								    isc_639.isc_645);
				if (!/*X.RDB$NUMBER_OF_CHARACTERS.NULL*/
				     isc_639.isc_655)
					put_int32 (att_charset_numchar, /*X.RDB$NUMBER_OF_CHARACTERS*/
									isc_639.isc_647);
				put_int32 (att_charset_id, /*X.RDB$CHARACTER_SET_ID*/
							   isc_639.isc_654);
				if (/*X.RDB$SYSTEM_FLAG*/
				    isc_639.isc_657)
					put_int32 (att_charset_sysflag, /*X.RDB$SYSTEM_FLAG*/
									isc_639.isc_657);
				if (!/*X.RDB$DESCRIPTION.NULL*/
				     isc_639.isc_653)
				{
					put_source_blob (att_charset_description, att_charset_description, /*X.RDB$DESCRIPTION*/
													   isc_639.isc_644);
				}
				if (!/*X.RDB$FUNCTION_NAME.NULL*/
				     isc_639.isc_652)
					PUT_TEXT (att_charset_funct, /*X.RDB$FUNCTION_NAME*/
								     isc_639.isc_643);
				put_int32 (att_charset_bytes_char, /*X.RDB$BYTES_PER_CHARACTER*/
								   isc_639.isc_651);

				// CVC: Not sure if this code goes inside or outside this "if" block.
				if (!/*X.RDB$SECURITY_CLASS.NULL*/
				     isc_639.isc_650)
					PUT_TEXT(att_charset_security_class, /*X.RDB$SECURITY_CLASS*/
									     isc_639.isc_642);
				if (!/*X.RDB$OWNER_NAME.NULL*/
				     isc_639.isc_649)
					PUT_TEXT(att_charset_owner_name, /*X.RDB$OWNER_NAME*/
									 isc_639.isc_641);
			}

			PUT_TEXT (att_charset_coll, /*X.RDB$DEFAULT_COLLATE_NAME*/
						    isc_639.isc_640);
			put(tdgbl, att_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$CHARACTER_SETS
			WITH X.RDB$SYSTEM_FLAG MISSING OR X.RDB$SYSTEM_FLAG NE 1 OR
				 X.RDB$DEFAULT_COLLATE_NAME NE X.RDB$CHARACTER_SET_NAME*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_621), (char*) isc_621);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 158, &isc_622, (short) 0);
		   if (!isc_622.isc_629 || isc_status [1]) break;

			put(tdgbl, rec_charset);
			PUT_TEXT (att_charset_name, /*X.RDB$CHARACTER_SET_NAME*/
						    isc_622.isc_627);

			if (/*X.RDB$SYSTEM_FLAG.NULL*/
			    isc_622.isc_636 || /*X.RDB$SYSTEM_FLAG*/
    isc_622.isc_637 != 1)
			{
				if (!/*X.RDB$FORM_OF_USE.NULL*/
				     isc_622.isc_635)
					PUT_TEXT (att_charset_form, /*X.RDB$FORM_OF_USE*/
								    isc_622.isc_626);
				if (!/*X.RDB$NUMBER_OF_CHARACTERS.NULL*/
				     isc_622.isc_634)
					put_int32 (att_charset_numchar, /*X.RDB$NUMBER_OF_CHARACTERS*/
									isc_622.isc_628);
				put_int32 (att_charset_id, /*X.RDB$CHARACTER_SET_ID*/
							   isc_622.isc_633);
				if (/*X.RDB$SYSTEM_FLAG*/
				    isc_622.isc_637)
					put_int32 (att_charset_sysflag, /*X.RDB$SYSTEM_FLAG*/
									isc_622.isc_637);
				if (!/*X.RDB$DESCRIPTION.NULL*/
				     isc_622.isc_632)
				{
					put_source_blob (att_charset_description, att_charset_description, /*X.RDB$DESCRIPTION*/
													   isc_622.isc_625);
				}
				if (!/*X.RDB$FUNCTION_NAME.NULL*/
				     isc_622.isc_631)
					PUT_TEXT (att_charset_funct, /*X.RDB$FUNCTION_NAME*/
								     isc_622.isc_624);
				put_int32 (att_charset_bytes_char, /*X.RDB$BYTES_PER_CHARACTER*/
								   isc_622.isc_630);
			}

			PUT_TEXT (att_charset_coll, /*X.RDB$DEFAULT_COLLATE_NAME*/
						    isc_622.isc_623);
			put(tdgbl, att_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}

	MISC_release_request_silent(req_handle1);
}


void write_check_constraints()
{
   struct isc_616_struct {
          char  isc_617 [32];	/* RDB$TRIGGER_NAME */
          char  isc_618 [32];	/* RDB$CONSTRAINT_NAME */
          short isc_619;	/* isc_utility */
          short isc_620;	/* gds__null_flag */
   } isc_616;
/**************************************
 *
 *	w r i t e _ c h e c k _ c o n s t r a i n t s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each check constraint.
 *
 **************************************/
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	/*FOR (REQUEST_HANDLE req_handle1)
		X IN RDB$CHECK_CONSTRAINTS*/
	{
        if (!req_handle1)
           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_615), (char*) isc_615);
	if (req_handle1)
           isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 68, &isc_616, (short) 0);
	   if (!isc_616.isc_619 || isc_status [1]) break;
		put(tdgbl, rec_chk_constraint);

		PUT_TEXT (att_chk_constraint_name, /*X.RDB$CONSTRAINT_NAME*/
						   isc_616.isc_618);
		if (!/*X.RDB$TRIGGER_NAME.NULL*/
		     isc_616.isc_620)
			PUT_TEXT (att_chk_trigger_name, /*X.RDB$TRIGGER_NAME*/
							isc_616.isc_617);
		put(tdgbl, att_end);
	/*END_FOR;*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	MISC_release_request_silent(req_handle1);
}


void write_collations()
{
   struct isc_568_struct {
          char  isc_569 [32];	/* RDB$FUNCTION_NAME */
          ISC_QUAD isc_570;	/* RDB$DESCRIPTION */
          char  isc_571 [32];	/* RDB$COLLATION_NAME */
          short isc_572;	/* isc_utility */
          short isc_573;	/* gds__null_flag */
          short isc_574;	/* gds__null_flag */
          short isc_575;	/* RDB$SYSTEM_FLAG */
          short isc_576;	/* RDB$COLLATION_ATTRIBUTES */
          short isc_577;	/* RDB$CHARACTER_SET_ID */
          short isc_578;	/* RDB$COLLATION_ID */
   } isc_568;
   struct isc_580_struct {
          ISC_QUAD isc_581;	/* RDB$SPECIFIC_ATTRIBUTES */
          char  isc_582 [32];	/* RDB$BASE_COLLATION_NAME */
          char  isc_583 [32];	/* RDB$FUNCTION_NAME */
          ISC_QUAD isc_584;	/* RDB$DESCRIPTION */
          char  isc_585 [32];	/* RDB$COLLATION_NAME */
          short isc_586;	/* isc_utility */
          short isc_587;	/* gds__null_flag */
          short isc_588;	/* gds__null_flag */
          short isc_589;	/* gds__null_flag */
          short isc_590;	/* gds__null_flag */
          short isc_591;	/* RDB$SYSTEM_FLAG */
          short isc_592;	/* RDB$COLLATION_ATTRIBUTES */
          short isc_593;	/* RDB$CHARACTER_SET_ID */
          short isc_594;	/* RDB$COLLATION_ID */
   } isc_580;
   struct isc_596_struct {
          char  isc_597 [32];	/* RDB$OWNER_NAME */
          char  isc_598 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_599;	/* RDB$SPECIFIC_ATTRIBUTES */
          char  isc_600 [32];	/* RDB$BASE_COLLATION_NAME */
          char  isc_601 [32];	/* RDB$FUNCTION_NAME */
          ISC_QUAD isc_602;	/* RDB$DESCRIPTION */
          char  isc_603 [32];	/* RDB$COLLATION_NAME */
          short isc_604;	/* isc_utility */
          short isc_605;	/* gds__null_flag */
          short isc_606;	/* gds__null_flag */
          short isc_607;	/* gds__null_flag */
          short isc_608;	/* gds__null_flag */
          short isc_609;	/* gds__null_flag */
          short isc_610;	/* gds__null_flag */
          short isc_611;	/* RDB$SYSTEM_FLAG */
          short isc_612;	/* RDB$COLLATION_ATTRIBUTES */
          short isc_613;	/* RDB$CHARACTER_SET_ID */
          short isc_614;	/* RDB$COLLATION_ID */
   } isc_596;
/**************************************
 *
 *	w r i t e _ c o l l a t i o n s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each user defined collation
 *
 **************************************/
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	if (tdgbl->runtimeODS >= DB_VERSION_DDL12)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$COLLATIONS WITH X.RDB$SYSTEM_FLAG NE 1*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_595), (char*) isc_595);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 198, &isc_596, (short) 0);
		   if (!isc_596.isc_604 || isc_status [1]) break;
			put(tdgbl, rec_collation);
			PUT_TEXT (att_coll_name, /*X.RDB$COLLATION_NAME*/
						 isc_596.isc_603);
			put_int32 (att_coll_id, /*X.RDB$COLLATION_ID*/
						isc_596.isc_614);
			put_int32 (att_coll_cs_id, /*X.RDB$CHARACTER_SET_ID*/
						   isc_596.isc_613);
			put_int32 (att_coll_attr, /*X.RDB$COLLATION_ATTRIBUTES*/
						  isc_596.isc_612);
			if (/*X.RDB$SYSTEM_FLAG*/
			    isc_596.isc_611)
				put_int32 (att_coll_sysflag, /*X.RDB$SYSTEM_FLAG*/
							     isc_596.isc_611);
			if (!/*X.RDB$DESCRIPTION.NULL*/
			     isc_596.isc_610)
				put_source_blob (att_coll_description, att_coll_description, /*X.RDB$DESCRIPTION*/
											     isc_596.isc_602);
			if (!/*X.RDB$FUNCTION_NAME.NULL*/
			     isc_596.isc_609)
				PUT_TEXT (att_coll_funct, /*X.RDB$FUNCTION_NAME*/
							  isc_596.isc_601);
			if (!/*X.RDB$BASE_COLLATION_NAME.NULL*/
			     isc_596.isc_608)
				PUT_TEXT(att_coll_base_collation_name, /*X.RDB$BASE_COLLATION_NAME*/
								       isc_596.isc_600);
			if (!/*X.RDB$SPECIFIC_ATTRIBUTES.NULL*/
			     isc_596.isc_607)
				put_source_blob (att_coll_specific_attr, att_coll_specific_attr, /*X.RDB$SPECIFIC_ATTRIBUTES*/
												 isc_596.isc_599);

			if (!/*X.RDB$SECURITY_CLASS.NULL*/
			     isc_596.isc_606)
				PUT_TEXT(att_coll_security_class, /*X.RDB$SECURITY_CLASS*/
								  isc_596.isc_598);
			if (!/*X.RDB$OWNER_NAME.NULL*/
			     isc_596.isc_605)
				PUT_TEXT(att_coll_owner_name, /*X.RDB$OWNER_NAME*/
							      isc_596.isc_597);

			put(tdgbl, att_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else if (tdgbl->runtimeODS >= DB_VERSION_DDL11)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$COLLATIONS WITH X.RDB$SYSTEM_FLAG MISSING OR X.RDB$SYSTEM_FLAG NE 1*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_579), (char*) isc_579);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 130, &isc_580, (short) 0);
		   if (!isc_580.isc_586 || isc_status [1]) break;
			put(tdgbl, rec_collation);
			PUT_TEXT (att_coll_name, /*X.RDB$COLLATION_NAME*/
						 isc_580.isc_585);
			put_int32 (att_coll_id, /*X.RDB$COLLATION_ID*/
						isc_580.isc_594);
			put_int32 (att_coll_cs_id, /*X.RDB$CHARACTER_SET_ID*/
						   isc_580.isc_593);
			put_int32 (att_coll_attr, /*X.RDB$COLLATION_ATTRIBUTES*/
						  isc_580.isc_592);
			if (/*X.RDB$SYSTEM_FLAG*/
			    isc_580.isc_591)
				put_int32 (att_coll_sysflag, /*X.RDB$SYSTEM_FLAG*/
							     isc_580.isc_591);
			if (!/*X.RDB$DESCRIPTION.NULL*/
			     isc_580.isc_590)
				put_source_blob (att_coll_description, att_coll_description, /*X.RDB$DESCRIPTION*/
											     isc_580.isc_584);
			if (!/*X.RDB$FUNCTION_NAME.NULL*/
			     isc_580.isc_589)
				PUT_TEXT (att_coll_funct, /*X.RDB$FUNCTION_NAME*/
							  isc_580.isc_583);
			if (!/*X.RDB$BASE_COLLATION_NAME.NULL*/
			     isc_580.isc_588)
				PUT_TEXT(att_coll_base_collation_name, /*X.RDB$BASE_COLLATION_NAME*/
								       isc_580.isc_582);
			if (!/*X.RDB$SPECIFIC_ATTRIBUTES.NULL*/
			     isc_580.isc_587)
				put_source_blob (att_coll_specific_attr, att_coll_specific_attr, /*X.RDB$SPECIFIC_ATTRIBUTES*/
												 isc_580.isc_581);
			put(tdgbl, att_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$COLLATIONS WITH X.RDB$SYSTEM_FLAG MISSING OR X.RDB$SYSTEM_FLAG NE 1*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_567), (char*) isc_567);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 86, &isc_568, (short) 0);
		   if (!isc_568.isc_572 || isc_status [1]) break;
			put(tdgbl, rec_collation);
			PUT_TEXT (att_coll_name, /*X.RDB$COLLATION_NAME*/
						 isc_568.isc_571);
			put_int32 (att_coll_id, /*X.RDB$COLLATION_ID*/
						isc_568.isc_578);
			put_int32 (att_coll_cs_id, /*X.RDB$CHARACTER_SET_ID*/
						   isc_568.isc_577);
			put_int32 (att_coll_attr, /*X.RDB$COLLATION_ATTRIBUTES*/
						  isc_568.isc_576);
			if (/*X.RDB$SYSTEM_FLAG*/
			    isc_568.isc_575)
				put_int32 (att_coll_sysflag, /*X.RDB$SYSTEM_FLAG*/
							     isc_568.isc_575);
			if (!/*X.RDB$DESCRIPTION.NULL*/
			     isc_568.isc_574)
				put_source_blob (att_coll_description, att_coll_description, /*X.RDB$DESCRIPTION*/
											     isc_568.isc_570);
			if (!/*X.RDB$FUNCTION_NAME.NULL*/
			     isc_568.isc_573)
				PUT_TEXT (att_coll_funct, /*X.RDB$FUNCTION_NAME*/
							  isc_568.isc_569);
			put(tdgbl, att_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}

	MISC_release_request_silent(req_handle1);
}


void write_database( const TEXT* dbb_file)
{
   struct isc_550_struct {
          char  isc_551 [32];	/* RDB$CHARACTER_SET_NAME */
          ISC_QUAD isc_552;	/* RDB$DESCRIPTION */
          char  isc_553 [32];	/* RDB$SECURITY_CLASS */
          short isc_554;	/* isc_utility */
          short isc_555;	/* gds__null_flag */
          short isc_556;	/* gds__null_flag */
   } isc_550;
   struct isc_558_struct {
          char  isc_559 [32];	/* RDB$CHARACTER_SET_NAME */
          ISC_QUAD isc_560;	/* RDB$DESCRIPTION */
          char  isc_561 [32];	/* RDB$SECURITY_CLASS */
          ISC_LONG isc_562;	/* RDB$LINGER */
          short isc_563;	/* isc_utility */
          short isc_564;	/* gds__null_flag */
          short isc_565;	/* gds__null_flag */
          short isc_566;	/* gds__null_flag */
   } isc_558;
/**************************************
 *
 *	w r i t e _ d a t a b a s e
 *
 **************************************
 *
 * Functional description
 * 	write a physical database record and a
 *	logical database record in the burp file for
 *	the database itself.
 *
 **************************************/
	ISC_STATUS_ARRAY status_vector;
	SCHAR buffer[256];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	put(tdgbl, (UCHAR) rec_physical_db);

	if (isc_database_info(status_vector, &DB, sizeof(db_info_items), db_info_items,
						  sizeof(buffer), buffer))
	{
		BURP_error_redirect(status_vector, 31);
		// msg 31 isc_database_info failed
	}

	USHORT page_size = 0, forced_writes, no_reserve, SQL_dialect, db_read_only;
 	ULONG sweep_interval, page_buffers;
 	USHORT length = 0;
	for (const SCHAR* d = buffer; *d != isc_info_end; d += length)
	{
		const UCHAR item = *d++;
		length = (USHORT) isc_vax_integer(d, 2);
		d += 2;
		switch (item)
		{
		case isc_info_end:
			break;

		case isc_info_page_size:
			page_size = (USHORT) isc_vax_integer(d, length);
			put_int32(att_page_size, page_size);
			break;

		case isc_info_sweep_interval:
			sweep_interval = isc_vax_integer(d, length);
			put_int32(att_sweep_interval, sweep_interval);
			break;

		case isc_info_forced_writes:
			forced_writes = (USHORT) isc_vax_integer(d, length);
			put_int32(att_forced_writes, forced_writes);
			break;

		case isc_info_no_reserve:
			if (no_reserve = (USHORT) isc_vax_integer(d, length))
				put_int32(att_no_reserve, no_reserve);
			break;

		case isc_info_set_page_buffers:
			if (page_buffers = isc_vax_integer(d, length))
				put_int32(att_page_buffers, page_buffers);
			break;

		case isc_info_error:	// old server does not understand new isc_info
			break;				// parameter and returns isc_info_error. skip it

		case isc_info_db_sql_dialect:
			SQL_dialect = (USHORT) isc_vax_integer(d, length);
			put_int32(att_SQL_dialect, SQL_dialect);
			break;

		case isc_info_db_read_only:
			if (db_read_only = (USHORT) isc_vax_integer(d, length))
				put_int32(att_db_read_only, db_read_only);
			break;

		default:
			BURP_error_redirect(status_vector, 31);
			// msg 31 isc_database_info failed
			break;
		}
	}

	put_asciz(att_file_name, dbb_file);

	BURP_verbose(77, SafeArg() << dbb_file << page_size);
	// msg 77 database %s has a page size of %ld bytes.

	put(tdgbl, att_end);

	put(tdgbl, (UCHAR) rec_database);

	if (tdgbl->runtimeODS >= DB_VERSION_DDL12)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			D IN RDB$DATABASE*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_557), (char*) isc_557);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 84, &isc_558, (short) 0);
		   if (!isc_558.isc_563 || isc_status [1]) break;
			if (!/*D.RDB$SECURITY_CLASS.NULL*/
			     isc_558.isc_566)
				PUT_TEXT (att_database_security_class, /*D.RDB$SECURITY_CLASS*/
								       isc_558.isc_561);
			put_source_blob (att_database_description2, att_database_description, /*D.RDB$DESCRIPTION*/
											      isc_558.isc_560);
			if (!/*D.RDB$CHARACTER_SET_NAME.NULL*/
			     isc_558.isc_565)
				PUT_TEXT (att_database_dfl_charset, /*D.RDB$CHARACTER_SET_NAME*/
								    isc_558.isc_559);
			if (!/*D.RDB$LINGER.NULL*/
			     isc_558.isc_564)
				put_int32(att_database_linger, /*D.RDB$LINGER*/
							       isc_558.isc_562);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			D IN RDB$DATABASE*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_549), (char*) isc_549);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 78, &isc_550, (short) 0);
		   if (!isc_550.isc_554 || isc_status [1]) break;
			if (!/*D.RDB$SECURITY_CLASS.NULL*/
			     isc_550.isc_556)
				PUT_TEXT (att_database_security_class, /*D.RDB$SECURITY_CLASS*/
								       isc_550.isc_553);
			put_source_blob (att_database_description2, att_database_description, /*D.RDB$DESCRIPTION*/
											      isc_550.isc_552);
			if (!/*D.RDB$CHARACTER_SET_NAME.NULL*/
			     isc_550.isc_555)
				PUT_TEXT (att_database_dfl_charset, /*D.RDB$CHARACTER_SET_NAME*/
								    isc_550.isc_551);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}

	MISC_release_request_silent(req_handle1);

	put(tdgbl, att_end);
}


void write_exceptions()
{
   struct isc_534_struct {
          ISC_QUAD isc_535;	/* RDB$DESCRIPTION */
          char  isc_536 [1024];	/* RDB$MESSAGE */
          char  isc_537 [32];	/* RDB$EXCEPTION_NAME */
          short isc_538;	/* isc_utility */
   } isc_534;
   struct isc_540_struct {
          char  isc_541 [32];	/* RDB$OWNER_NAME */
          char  isc_542 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_543;	/* RDB$DESCRIPTION */
          char  isc_544 [1024];	/* RDB$MESSAGE */
          char  isc_545 [32];	/* RDB$EXCEPTION_NAME */
          short isc_546;	/* isc_utility */
          short isc_547;	/* gds__null_flag */
          short isc_548;	/* gds__null_flag */
   } isc_540;
/**************************************
 *
 *	w r i t e _ e x c e p t i o n s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each exception.
 *
 **************************************/
	TEXT temp[GDS_NAME_LEN];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	if (tdgbl->runtimeODS >= DB_VERSION_DDL12)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$EXCEPTIONS
			WITH X.RDB$SYSTEM_FLAG NE 1*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_539), (char*) isc_539);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 1134, &isc_540, (short) 0);
		   if (!isc_540.isc_546 || isc_status [1]) break;
			put(tdgbl, rec_exception);
			const SSHORT l = PUT_TEXT (att_exception_name, /*X.RDB$EXCEPTION_NAME*/
								       isc_540.isc_545);
			MISC_terminate (/*X.RDB$EXCEPTION_NAME*/
					isc_540.isc_545, temp, l, sizeof(temp));
			BURP_verbose (198, temp);
			// msg 198 writing exception %s
			PUT_MESSAGE(att_exception_msg, att_exception_msg2, /*X.RDB$MESSAGE*/
									   isc_540.isc_544);
			put_source_blob (att_exception_description2, att_procedure_description, /*X.RDB$DESCRIPTION*/
												isc_540.isc_543);

			if (!/*X.RDB$SECURITY_CLASS.NULL*/
			     isc_540.isc_548)
				PUT_TEXT(att_exception_security_class, /*X.RDB$SECURITY_CLASS*/
								       isc_540.isc_542);
			if (!/*X.RDB$OWNER_NAME.NULL*/
			     isc_540.isc_547)
				PUT_TEXT(att_exception_owner_name, /*X.RDB$OWNER_NAME*/
								   isc_540.isc_541);

			put(tdgbl, att_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$EXCEPTIONS
			WITH X.RDB$SYSTEM_FLAG MISSING OR X.RDB$SYSTEM_FLAG NE 1*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_533), (char*) isc_533);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 1066, &isc_534, (short) 0);
		   if (!isc_534.isc_538 || isc_status [1]) break;
			put(tdgbl, rec_exception);
			const SSHORT l = PUT_TEXT (att_exception_name, /*X.RDB$EXCEPTION_NAME*/
								       isc_534.isc_537);
			MISC_terminate (/*X.RDB$EXCEPTION_NAME*/
					isc_534.isc_537, temp, l, sizeof(temp));
			BURP_verbose (198, temp);
			// msg 198 writing exception %s
			PUT_MESSAGE(att_exception_msg, att_exception_msg2, /*X.RDB$MESSAGE*/
									   isc_534.isc_536);
			put_source_blob (att_exception_description2, att_procedure_description, /*X.RDB$DESCRIPTION*/
												isc_534.isc_535);
			put(tdgbl, att_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}

	MISC_release_request_silent(req_handle1);
}


void write_field_dimensions()
{
   struct isc_527_struct {
          char  isc_528 [32];	/* RDB$FIELD_NAME */
          ISC_LONG isc_529;	/* RDB$UPPER_BOUND */
          ISC_LONG isc_530;	/* RDB$LOWER_BOUND */
          short isc_531;	/* isc_utility */
          short isc_532;	/* RDB$DIMENSION */
   } isc_527;
/**************************************
 *
 *	w r i t e _ f i e l d _ d i m e n s i o n s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each array field dimension.
 *
 **************************************/
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	/*FOR (REQUEST_HANDLE req_handle1)
		X IN RDB$FIELD_DIMENSIONS*/
	{
        if (!req_handle1)
           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_526), (char*) isc_526);
	if (req_handle1)
           isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 44, &isc_527, (short) 0);
	   if (!isc_527.isc_531 || isc_status [1]) break;
		put(tdgbl, rec_field_dimensions);
		PUT_TEXT (att_field_name, /*X.RDB$FIELD_NAME*/
					  isc_527.isc_528);
		put_int32 (att_field_dimensions, /*X.RDB$DIMENSION*/
						 isc_527.isc_532);
		put_int32 (att_field_range_low, /*X.RDB$LOWER_BOUND*/
						isc_527.isc_530);
		put_int32 (att_field_range_high, /*X.RDB$UPPER_BOUND*/
						 isc_527.isc_529);
		put(tdgbl, att_end);
	/*END_FOR;*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	MISC_release_request_silent(req_handle1);
}


void write_filters()
{
   struct isc_518_struct {
          char  isc_519 [256];	/* RDB$ENTRYPOINT */
          char  isc_520 [256];	/* RDB$MODULE_NAME */
          ISC_QUAD isc_521;	/* RDB$DESCRIPTION */
          char  isc_522 [32];	/* RDB$FUNCTION_NAME */
          short isc_523;	/* isc_utility */
          short isc_524;	/* RDB$OUTPUT_SUB_TYPE */
          short isc_525;	/* RDB$INPUT_SUB_TYPE */
   } isc_518;
/**************************************
 *
 *	w r i t e _ f i l t e r s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each filter.
 *
 **************************************/
	TEXT temp[GDS_NAME_LEN];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	/*FOR (REQUEST_HANDLE req_handle1)
		X IN RDB$FILTERS
		WITH X.RDB$SYSTEM_FLAG MISSING OR X.RDB$SYSTEM_FLAG NE 1*/
	{
        if (!req_handle1)
           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_517), (char*) isc_517);
	if (req_handle1)
           isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 558, &isc_518, (short) 0);
	   if (!isc_518.isc_523 || isc_status [1]) break;
		put(tdgbl, rec_filter);
		const SSHORT l = PUT_TEXT (att_filter_name, /*X.RDB$FUNCTION_NAME*/
							    isc_518.isc_522);
		MISC_terminate (/*X.RDB$FUNCTION_NAME*/
				isc_518.isc_522, temp, l, sizeof(temp));
		BURP_verbose (145, temp);
		// msg 145 writing filter %s
		put_source_blob (att_filter_description2, att_filter_description, /*X.RDB$DESCRIPTION*/
										  isc_518.isc_521);
		PUT_TEXT (att_filter_module_name, /*X.RDB$MODULE_NAME*/
						  isc_518.isc_520);
		PUT_TEXT (att_filter_entrypoint, /*X.RDB$ENTRYPOINT*/
						 isc_518.isc_519);
		put_int32 (att_filter_input_sub_type, /*X.RDB$INPUT_SUB_TYPE*/
						      isc_518.isc_525);
		put_int32 (att_filter_output_sub_type, /*X.RDB$OUTPUT_SUB_TYPE*/
						       isc_518.isc_524);
		put(tdgbl, att_end);
	/*END_FOR;*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	MISC_release_request_silent(req_handle1);
}


void write_functions()
{
   struct isc_476_struct {
          char  isc_477 [32];	/* RDB$QUERY_NAME */
          char  isc_478 [256];	/* RDB$ENTRYPOINT */
          char  isc_479 [256];	/* RDB$MODULE_NAME */
          ISC_QUAD isc_480;	/* RDB$DESCRIPTION */
          char  isc_481 [32];	/* RDB$FUNCTION_NAME */
          short isc_482;	/* isc_utility */
          short isc_483;	/* RDB$FUNCTION_TYPE */
          short isc_484;	/* RDB$RETURN_ARGUMENT */
   } isc_476;
   struct isc_486_struct {
          char  isc_487 [32];	/* RDB$OWNER_NAME */
          char  isc_488 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_489;	/* RDB$DEBUG_INFO */
          ISC_QUAD isc_490;	/* RDB$FUNCTION_SOURCE */
          ISC_QUAD isc_491;	/* RDB$FUNCTION_BLR */
          char  isc_492 [32];	/* RDB$ENGINE_NAME */
          char  isc_493 [32];	/* RDB$QUERY_NAME */
          char  isc_494 [256];	/* RDB$ENTRYPOINT */
          char  isc_495 [256];	/* RDB$MODULE_NAME */
          ISC_QUAD isc_496;	/* RDB$DESCRIPTION */
          char  isc_497 [32];	/* RDB$FUNCTION_NAME */
          char  isc_498 [32];	/* RDB$PACKAGE_NAME */
          short isc_499;	/* isc_utility */
          short isc_500;	/* gds__null_flag */
          short isc_501;	/* RDB$DETERMINISTIC_FLAG */
          short isc_502;	/* gds__null_flag */
          short isc_503;	/* RDB$LEGACY_FLAG */
          short isc_504;	/* gds__null_flag */
          short isc_505;	/* gds__null_flag */
          short isc_506;	/* gds__null_flag */
          short isc_507;	/* gds__null_flag */
          short isc_508;	/* RDB$VALID_BLR */
          short isc_509;	/* gds__null_flag */
          short isc_510;	/* gds__null_flag */
          short isc_511;	/* gds__null_flag */
          short isc_512;	/* RDB$PRIVATE_FLAG */
          short isc_513;	/* gds__null_flag */
          short isc_514;	/* RDB$FUNCTION_TYPE */
          short isc_515;	/* RDB$RETURN_ARGUMENT */
          short isc_516;	/* gds__null_flag */
   } isc_486;
/**************************************
 *
 *	w r i t e _ f u n c t i o n s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each function.
 *
 **************************************/
	GDS_NAME func;
	TEXT temp[GDS_NAME_LEN * 2];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	if (tdgbl->runtimeODS >= DB_VERSION_DDL12)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$FUNCTIONS WITH X.RDB$SYSTEM_FLAG NE 1*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_485), (char*) isc_485);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 772, &isc_486, (short) 0);
		   if (!isc_486.isc_499 || isc_status [1]) break;
			put(tdgbl, rec_function);

			SSHORT prefixLen = 0;

			if (!/*X.RDB$PACKAGE_NAME.NULL*/
			     isc_486.isc_516)
			{
				prefixLen = PUT_TEXT(att_function_package_name, /*X.RDB$PACKAGE_NAME*/
										isc_486.isc_498);
				MISC_terminate(/*X.RDB$PACKAGE_NAME*/
					       isc_486.isc_498, temp, prefixLen, sizeof(temp));
				temp[prefixLen++] = '.';
			}

			const SSHORT l = PUT_TEXT (att_function_name, /*X.RDB$FUNCTION_NAME*/
								      isc_486.isc_497);
			MISC_terminate (/*X.RDB$FUNCTION_NAME*/
					isc_486.isc_497, temp + prefixLen, l, sizeof(temp) - prefixLen);
			BURP_verbose (147, temp);
			// msg 147 writing function %.*s
			put_source_blob (att_function_description2, att_function_description, /*X.RDB$DESCRIPTION*/
											      isc_486.isc_496);
			PUT_TEXT (att_function_module_name, /*X.RDB$MODULE_NAME*/
							    isc_486.isc_495);
			PUT_TEXT (att_function_entrypoint, /*X.RDB$ENTRYPOINT*/
							   isc_486.isc_494);
			put_int32 (att_function_return_arg, /*X.RDB$RETURN_ARGUMENT*/
							    isc_486.isc_515);
			put_int32 (att_function_type, /*X.RDB$FUNCTION_TYPE*/
						      isc_486.isc_514);
			PUT_TEXT (att_function_query_name, /*X.RDB$QUERY_NAME*/
							   isc_486.isc_493);

			if (!/*X.RDB$ENGINE_NAME.NULL*/
			     isc_486.isc_513)
				PUT_TEXT(att_function_engine_name, /*X.RDB$ENGINE_NAME*/
								   isc_486.isc_492);
			if (!/*X.RDB$PRIVATE_FLAG.NULL*/
			     isc_486.isc_511)
				put_int32(att_function_private_flag, /*X.RDB$PRIVATE_FLAG*/
								     isc_486.isc_512);
			if (!/*X.RDB$FUNCTION_BLR.NULL*/
			     isc_486.isc_510)
				put_blr_blob(att_function_blr, /*X.RDB$FUNCTION_BLR*/
							       isc_486.isc_491);
			if (!/*X.RDB$FUNCTION_SOURCE.NULL*/
			     isc_486.isc_509)
				put_source_blob(att_function_source, att_function_source, /*X.RDB$FUNCTION_SOURCE*/
											  isc_486.isc_490);
			if (!/*X.RDB$VALID_BLR.NULL*/
			     isc_486.isc_507)
				put_int32(att_function_valid_blr, /*X.RDB$VALID_BLR*/
								  isc_486.isc_508);
			if (!/*X.RDB$DEBUG_INFO.NULL*/
			     isc_486.isc_506)
				put_blr_blob(att_function_debug_info, /*X.RDB$DEBUG_INFO*/
								      isc_486.isc_489);
			if (!/*X.RDB$SECURITY_CLASS.NULL*/
			     isc_486.isc_505)
				PUT_TEXT(att_function_security_class, /*X.RDB$SECURITY_CLASS*/
								      isc_486.isc_488);
			if (!/*X.RDB$OWNER_NAME.NULL*/
			     isc_486.isc_504)
				PUT_TEXT(att_function_owner_name, /*X.RDB$OWNER_NAME*/
								  isc_486.isc_487);
			if (!/*X.RDB$LEGACY_FLAG.NULL*/
			     isc_486.isc_502)
				put_int32(att_function_legacy_flag, /*X.RDB$LEGACY_FLAG*/
								    isc_486.isc_503);
			if (!/*X.RDB$DETERMINISTIC_FLAG.NULL*/
			     isc_486.isc_500)
				put_int32(att_function_deterministic_flag, /*X.RDB$DETERMINISTIC_FLAG*/
									   isc_486.isc_501);

			put(tdgbl, att_end);

			COPY (/*X.RDB$FUNCTION_NAME*/
			      isc_486.isc_497, func);
			write_function_args ((/*X.RDB$PACKAGE_NAME.NULL*/
					      isc_486.isc_516 ? "" : /*X.RDB$PACKAGE_NAME*/
	isc_486.isc_498), func);
			put(tdgbl, rec_function_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$FUNCTIONS WITH X.RDB$SYSTEM_FLAG MISSING OR X.RDB$SYSTEM_FLAG NE 1*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_475), (char*) isc_475);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 590, &isc_476, (short) 0);
		   if (!isc_476.isc_482 || isc_status [1]) break;
			put(tdgbl, rec_function);
			const SSHORT l = PUT_TEXT (att_function_name, /*X.RDB$FUNCTION_NAME*/
								      isc_476.isc_481);
			MISC_terminate (/*X.RDB$FUNCTION_NAME*/
					isc_476.isc_481, temp, l, sizeof(temp));
			BURP_verbose (147, temp);
			// msg 147 writing function %.*s
			put_source_blob (att_function_description2, att_function_description, /*X.RDB$DESCRIPTION*/
											      isc_476.isc_480);
			PUT_TEXT (att_function_module_name, /*X.RDB$MODULE_NAME*/
							    isc_476.isc_479);
			PUT_TEXT (att_function_entrypoint, /*X.RDB$ENTRYPOINT*/
							   isc_476.isc_478);
			put_int32 (att_function_return_arg, /*X.RDB$RETURN_ARGUMENT*/
							    isc_476.isc_484);
			put_int32 (att_function_type, /*X.RDB$FUNCTION_TYPE*/
						      isc_476.isc_483);
			PUT_TEXT (att_function_query_name, /*X.RDB$QUERY_NAME*/
							   isc_476.isc_477);
			put(tdgbl, att_end);
			COPY (/*X.RDB$FUNCTION_NAME*/
			      isc_476.isc_481, func);
			write_function_args ("", func);
			put(tdgbl, rec_function_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}

	MISC_release_request_silent(req_handle1);
}


void write_function_args(const GDS_NAME package, GDS_NAME funcptr)
{
   struct isc_409_struct {
          char  isc_410 [32];	/* RDB$FUNCTION_NAME */
          short isc_411;	/* isc_utility */
          short isc_412;	/* gds__null_flag */
          short isc_413;	/* RDB$CHARACTER_SET_ID */
          short isc_414;	/* RDB$FIELD_SUB_TYPE */
          short isc_415;	/* RDB$FIELD_LENGTH */
          short isc_416;	/* RDB$FIELD_SCALE */
          short isc_417;	/* RDB$FIELD_TYPE */
          short isc_418;	/* RDB$MECHANISM */
          short isc_419;	/* RDB$ARGUMENT_POSITION */
   } isc_409;
   struct isc_407_struct {
          char  isc_408 [32];	/* RDB$FUNCTION_NAME */
   } isc_407;
   struct isc_423_struct {
          char  isc_424 [32];	/* RDB$FUNCTION_NAME */
          short isc_425;	/* isc_utility */
          short isc_426;	/* gds__null_flag */
          short isc_427;	/* RDB$FIELD_PRECISION */
          short isc_428;	/* gds__null_flag */
          short isc_429;	/* RDB$CHARACTER_SET_ID */
          short isc_430;	/* RDB$FIELD_SUB_TYPE */
          short isc_431;	/* RDB$FIELD_LENGTH */
          short isc_432;	/* RDB$FIELD_SCALE */
          short isc_433;	/* RDB$FIELD_TYPE */
          short isc_434;	/* RDB$MECHANISM */
          short isc_435;	/* RDB$ARGUMENT_POSITION */
   } isc_423;
   struct isc_421_struct {
          char  isc_422 [32];	/* RDB$FUNCTION_NAME */
   } isc_421;
   struct isc_440_struct {
          ISC_QUAD isc_441;	/* RDB$DESCRIPTION */
          char  isc_442 [32];	/* RDB$RELATION_NAME */
          char  isc_443 [32];	/* RDB$FIELD_NAME */
          ISC_QUAD isc_444;	/* RDB$DEFAULT_SOURCE */
          ISC_QUAD isc_445;	/* RDB$DEFAULT_VALUE */
          char  isc_446 [32];	/* RDB$FIELD_SOURCE */
          char  isc_447 [32];	/* RDB$ARGUMENT_NAME */
          char  isc_448 [32];	/* RDB$FUNCTION_NAME */
          char  isc_449 [32];	/* RDB$PACKAGE_NAME */
          short isc_450;	/* isc_utility */
          short isc_451;	/* gds__null_flag */
          short isc_452;	/* gds__null_flag */
          short isc_453;	/* gds__null_flag */
          short isc_454;	/* gds__null_flag */
          short isc_455;	/* RDB$ARGUMENT_MECHANISM */
          short isc_456;	/* gds__null_flag */
          short isc_457;	/* RDB$NULL_FLAG */
          short isc_458;	/* gds__null_flag */
          short isc_459;	/* RDB$COLLATION_ID */
          short isc_460;	/* gds__null_flag */
          short isc_461;	/* gds__null_flag */
          short isc_462;	/* gds__null_flag */
          short isc_463;	/* gds__null_flag */
          short isc_464;	/* gds__null_flag */
          short isc_465;	/* RDB$FIELD_PRECISION */
          short isc_466;	/* gds__null_flag */
          short isc_467;	/* RDB$CHARACTER_SET_ID */
          short isc_468;	/* RDB$FIELD_SUB_TYPE */
          short isc_469;	/* RDB$FIELD_LENGTH */
          short isc_470;	/* RDB$FIELD_SCALE */
          short isc_471;	/* RDB$FIELD_TYPE */
          short isc_472;	/* RDB$MECHANISM */
          short isc_473;	/* RDB$ARGUMENT_POSITION */
          short isc_474;	/* gds__null_flag */
   } isc_440;
   struct isc_437_struct {
          char  isc_438 [32];	/* RDB$PACKAGE_NAME */
          char  isc_439 [32];	/* RDB$FUNCTION_NAME */
   } isc_437;
/**************************************
 *
 *	w r i t e _ f u n c t i o n _ a r g s
 *
 **************************************
 *
 * Functional description
 * 	write all arguments for a function.
 *
 **************************************/
	TEXT temp[GDS_NAME_LEN * 2];

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	// if we have all capabilities, use the first request to get the
	// most performance out of the latest engine; if we don't
	// have one of the capabilities we must use the second set of
	// requests--this requires more code but it is well worth it
	// for the performance benefits, especially remotely--deej

	if (tdgbl->runtimeODS >= DB_VERSION_DDL12)
	{
		/*FOR (REQUEST_HANDLE tdgbl->handles_write_function_args_req_handle1)
			X IN RDB$FUNCTION_ARGUMENTS
			WITH X.RDB$FUNCTION_NAME EQ funcptr AND
				 X.RDB$PACKAGE_NAME EQUIV NULLIF(package, '')*/
		{
                if (!tdgbl->handles_write_function_args_req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &tdgbl->handles_write_function_args_req_handle1, (short) sizeof(isc_436), (char*) isc_436);
		isc_vtov ((const char*) package, (char*) isc_437.isc_438, 32);
		isc_vtov ((const char*) funcptr, (char*) isc_437.isc_439, 32);
		if (tdgbl->handles_write_function_args_req_handle1)
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &tdgbl->handles_write_function_args_req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 64, &isc_437, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &tdgbl->handles_write_function_args_req_handle1, (short) 1, (short) 266, &isc_440, (short) 0);
		   if (!isc_440.isc_450 || isc_status [1]) break;

			put(tdgbl, rec_function_arg);

			SSHORT prefixLen = 0;

			if (!/*X.RDB$PACKAGE_NAME.NULL*/
			     isc_440.isc_474)
			{
				prefixLen = PUT_TEXT(att_functionarg_package_name, /*X.RDB$PACKAGE_NAME*/
										   isc_440.isc_449);
				MISC_terminate(/*X.RDB$PACKAGE_NAME*/
					       isc_440.isc_449, temp, prefixLen, sizeof(temp));
				temp[prefixLen++] = '.';
			}

			const SSHORT l = PUT_TEXT (att_functionarg_name, /*X.RDB$FUNCTION_NAME*/
									 isc_440.isc_448);
			MISC_terminate (/*X.RDB$FUNCTION_NAME*/
					isc_440.isc_448, temp + prefixLen, l, sizeof(temp) - prefixLen);
			BURP_verbose (141, temp);
			// msg 141 writing argument for function %s

			put_int32 (att_functionarg_position, /*X.RDB$ARGUMENT_POSITION*/
							     isc_440.isc_473);
			put_int32 (att_functionarg_passing_mechanism, /*X.RDB$MECHANISM*/
								      isc_440.isc_472);
			put_int32 (att_functionarg_field_type, /*X.RDB$FIELD_TYPE*/
							       isc_440.isc_471);
			put_int32 (att_functionarg_field_scale, /*X.RDB$FIELD_SCALE*/
								isc_440.isc_470);
			put_int32 (att_functionarg_field_length, /*X.RDB$FIELD_LENGTH*/
								 isc_440.isc_469);
			put_int32 (att_functionarg_field_sub_type, /*X.RDB$FIELD_SUB_TYPE*/
								   isc_440.isc_468);
			if (!/*X.RDB$CHARACTER_SET_ID.NULL*/
			     isc_440.isc_466)
				put_int32 (att_functionarg_character_set, /*X.RDB$CHARACTER_SET_ID*/
									  isc_440.isc_467);

			if (!/*X.RDB$FIELD_PRECISION.NULL*/
			     isc_440.isc_464)
				put_int32 (att_functionarg_field_precision, /*X.RDB$FIELD_PRECISION*/
									    isc_440.isc_465);

			if (!/*X.RDB$ARGUMENT_NAME.NULL*/
			     isc_440.isc_463)
				PUT_TEXT(att_functionarg_arg_name, /*X.RDB$ARGUMENT_NAME*/
								   isc_440.isc_447);
			if (!/*X.RDB$FIELD_SOURCE.NULL*/
			     isc_440.isc_462)
				PUT_TEXT(att_functionarg_field_source, /*X.RDB$FIELD_SOURCE*/
								       isc_440.isc_446);
			if (!/*X.RDB$DEFAULT_VALUE.NULL*/
			     isc_440.isc_461)
				put_blr_blob(att_functionarg_default_value, /*X.RDB$DEFAULT_VALUE*/
									    isc_440.isc_445);
			if (!/*X.RDB$DEFAULT_SOURCE.NULL*/
			     isc_440.isc_460)
				put_source_blob(att_functionarg_default_source, att_functionarg_default_source,
								/*X.RDB$DEFAULT_SOURCE*/
								isc_440.isc_444);
			if (!/*X.RDB$COLLATION_ID.NULL*/
			     isc_440.isc_458)
				put_int32(att_functionarg_collation_id, /*X.RDB$COLLATION_ID*/
									isc_440.isc_459);
			if (!/*X.RDB$NULL_FLAG.NULL*/
			     isc_440.isc_456)
				put_int32(att_functionarg_null_flag, /*X.RDB$NULL_FLAG*/
								     isc_440.isc_457);
			if (!/*X.RDB$ARGUMENT_MECHANISM.NULL*/
			     isc_440.isc_454)
				put_int32(att_functionarg_type_mechanism, /*X.RDB$ARGUMENT_MECHANISM*/
									  isc_440.isc_455);
			if (!/*X.RDB$FIELD_NAME.NULL*/
			     isc_440.isc_453)
				PUT_TEXT(att_functionarg_field_name, /*X.RDB$FIELD_NAME*/
								     isc_440.isc_443);
			if (!/*X.RDB$RELATION_NAME.NULL*/
			     isc_440.isc_452)
				PUT_TEXT(att_functionarg_relation_name, /*X.RDB$RELATION_NAME*/
									isc_440.isc_442);
			if (!/*X.RDB$DESCRIPTION.NULL*/
			     isc_440.isc_451)
				put_source_blob(att_functionarg_description, att_functionarg_description, /*X.RDB$DESCRIPTION*/
													  isc_440.isc_441);

			put(tdgbl, att_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else if (tdgbl->runtimeODS >= DB_VERSION_DDL10)
	{
		/*FOR (REQUEST_HANDLE tdgbl->handles_write_function_args_req_handle1)
			X IN RDB$FUNCTION_ARGUMENTS WITH
			X.RDB$FUNCTION_NAME EQ funcptr*/
		{
                if (!tdgbl->handles_write_function_args_req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &tdgbl->handles_write_function_args_req_handle1, (short) sizeof(isc_420), (char*) isc_420);
		isc_vtov ((const char*) funcptr, (char*) isc_421.isc_422, 32);
		if (tdgbl->handles_write_function_args_req_handle1)
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &tdgbl->handles_write_function_args_req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_421, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &tdgbl->handles_write_function_args_req_handle1, (short) 1, (short) 54, &isc_423, (short) 0);
		   if (!isc_423.isc_425 || isc_status [1]) break;

			put(tdgbl, rec_function_arg);
			const SSHORT l = PUT_TEXT (att_functionarg_name, /*X.RDB$FUNCTION_NAME*/
									 isc_423.isc_424);
			MISC_terminate (/*X.RDB$FUNCTION_NAME*/
					isc_423.isc_424, temp, l, sizeof(temp));
			BURP_verbose (141, temp);
			// msg 141 writing argument for function %s
			put_int32 (att_functionarg_position, /*X.RDB$ARGUMENT_POSITION*/
							     isc_423.isc_435);
			put_int32 (att_functionarg_passing_mechanism, /*X.RDB$MECHANISM*/
								      isc_423.isc_434);
			put_int32 (att_functionarg_field_type, /*X.RDB$FIELD_TYPE*/
							       isc_423.isc_433);
			put_int32 (att_functionarg_field_scale, /*X.RDB$FIELD_SCALE*/
								isc_423.isc_432);
			put_int32 (att_functionarg_field_length, /*X.RDB$FIELD_LENGTH*/
								 isc_423.isc_431);
			put_int32 (att_functionarg_field_sub_type, /*X.RDB$FIELD_SUB_TYPE*/
								   isc_423.isc_430);
			if (!/*X.RDB$CHARACTER_SET_ID.NULL*/
			     isc_423.isc_428)
				put_int32 (att_functionarg_character_set, /*X.RDB$CHARACTER_SET_ID*/
									  isc_423.isc_429);

			if (!/*X.RDB$FIELD_PRECISION.NULL*/
			     isc_423.isc_426)
				put_int32 (att_functionarg_field_precision, /*X.RDB$FIELD_PRECISION*/
									    isc_423.isc_427);
			put(tdgbl, att_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE tdgbl->handles_write_function_args_req_handle1)
			X IN RDB$FUNCTION_ARGUMENTS WITH
			X.RDB$FUNCTION_NAME EQ funcptr*/
		{
                if (!tdgbl->handles_write_function_args_req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &tdgbl->handles_write_function_args_req_handle1, (short) sizeof(isc_406), (char*) isc_406);
		isc_vtov ((const char*) funcptr, (char*) isc_407.isc_408, 32);
		if (tdgbl->handles_write_function_args_req_handle1)
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &tdgbl->handles_write_function_args_req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_407, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &tdgbl->handles_write_function_args_req_handle1, (short) 1, (short) 50, &isc_409, (short) 0);
		   if (!isc_409.isc_411 || isc_status [1]) break;

			put(tdgbl, rec_function_arg);
			const SSHORT l = PUT_TEXT (att_functionarg_name, /*X.RDB$FUNCTION_NAME*/
									 isc_409.isc_410);
			MISC_terminate (/*X.RDB$FUNCTION_NAME*/
					isc_409.isc_410, temp, l, sizeof(temp));
			BURP_verbose (141, temp);
			// msg 141 writing argument for function %s
			put_int32 (att_functionarg_position, /*X.RDB$ARGUMENT_POSITION*/
							     isc_409.isc_419);
			put_int32 (att_functionarg_passing_mechanism, /*X.RDB$MECHANISM*/
								      isc_409.isc_418);
			put_int32 (att_functionarg_field_type, /*X.RDB$FIELD_TYPE*/
							       isc_409.isc_417);
			put_int32 (att_functionarg_field_scale, /*X.RDB$FIELD_SCALE*/
								isc_409.isc_416);
			put_int32 (att_functionarg_field_length, /*X.RDB$FIELD_LENGTH*/
								 isc_409.isc_415);
			put_int32 (att_functionarg_field_sub_type, /*X.RDB$FIELD_SUB_TYPE*/
								   isc_409.isc_414);

			if (!/*X.RDB$CHARACTER_SET_ID.NULL*/
			     isc_409.isc_412)
				put_int32 (att_functionarg_character_set, /*X.RDB$CHARACTER_SET_ID*/
									  isc_409.isc_413);
			// Note that DB_VERSION_DDL10 canNOT be set if we're in this
			// "else" branch.  Hence there is no need to test that
			// bit and store the RDB$FIELD_PRECISION.

			put(tdgbl, att_end);

		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
}


void write_generators()
{
   struct isc_383_struct {
          char  isc_384 [32];	/* RDB$GENERATOR_NAME */
          short isc_385;	/* isc_utility */
   } isc_383;
   struct isc_387_struct {
          ISC_QUAD isc_388;	/* RDB$DESCRIPTION */
          char  isc_389 [32];	/* RDB$GENERATOR_NAME */
          short isc_390;	/* isc_utility */
          short isc_391;	/* gds__null_flag */
   } isc_387;
   struct isc_393_struct {
          ISC_INT64 isc_394;	/* RDB$INITIAL_VALUE */
          char  isc_395 [32];	/* RDB$OWNER_NAME */
          char  isc_396 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_397;	/* RDB$DESCRIPTION */
          char  isc_398 [32];	/* RDB$GENERATOR_NAME */
          ISC_LONG isc_399;	/* RDB$GENERATOR_INCREMENT */
          short isc_400;	/* isc_utility */
          short isc_401;	/* gds__null_flag */
          short isc_402;	/* gds__null_flag */
          short isc_403;	/* gds__null_flag */
          short isc_404;	/* RDB$SYSTEM_FLAG */
          short isc_405;	/* gds__null_flag */
   } isc_393;
/**************************************
 *
 *	w r i t e _ g e n e r a t o r s
 *
 **************************************
 *
 * Functional description
 *	Write any defined generators.
 *
 **************************************/
	isc_req_handle req_handle1 = 0;
	TEXT temp[GDS_NAME_LEN];

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	if (tdgbl->runtimeODS >= DB_VERSION_DDL12)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$GENERATORS
			WITH X.RDB$SYSTEM_FLAG NE 1*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_392), (char*) isc_392);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 128, &isc_393, (short) 0);
		   if (!isc_393.isc_400 || isc_status [1]) break;
			put(tdgbl, rec_generator);
			const SSHORT l = PUT_TEXT (att_gen_generator, /*X.RDB$GENERATOR_NAME*/
								      isc_393.isc_398);
			SINT64 value = 0;
			if (!tdgbl->gbl_sw_meta)
			{
				value = get_gen_id (/*X.RDB$GENERATOR_NAME*/
						    isc_393.isc_398, l);
				put_int64 (att_gen_value_int64, value);
			}
			if (!/*X.RDB$DESCRIPTION.NULL*/
			     isc_393.isc_405) {
				put_source_blob (att_gen_description, att_gen_description, /*X.RDB$DESCRIPTION*/
											   isc_393.isc_397);
			}

			if (/*X.RDB$SYSTEM_FLAG*/
			    isc_393.isc_404)
				put_int32(att_gen_sysflag, /*X.RDB$SYSTEM_FLAG*/
							   isc_393.isc_404);

			if (!/*X.RDB$SECURITY_CLASS.NULL*/
			     isc_393.isc_403)
				PUT_TEXT(att_gen_security_class, /*X.RDB$SECURITY_CLASS*/
								 isc_393.isc_396);
			if (!/*X.RDB$OWNER_NAME.NULL*/
			     isc_393.isc_402)
				PUT_TEXT(att_gen_owner_name, /*X.RDB$OWNER_NAME*/
							     isc_393.isc_395);
			if (!/*X.RDB$INITIAL_VALUE.NULL*/
			     isc_393.isc_401)
				put_int64(att_gen_init_val, /*X.RDB$INITIAL_VALUE*/
							    isc_393.isc_394);

			put_int32(att_gen_id_increment, /*X.RDB$GENERATOR_INCREMENT*/
							isc_393.isc_399);

			put(tdgbl, att_end);
			MISC_terminate (/*X.RDB$GENERATOR_NAME*/
					isc_393.isc_398, temp, l, sizeof(temp));
			BURP_verbose (165, SafeArg() << temp << value);
			// msg 165 writing generator %s value %ld
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else if (tdgbl->runtimeODS >= DB_VERSION_DDL11)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$GENERATORS
			WITH X.RDB$SYSTEM_FLAG MISSING OR X.RDB$SYSTEM_FLAG NE 1*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_386), (char*) isc_386);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 44, &isc_387, (short) 0);
		   if (!isc_387.isc_390 || isc_status [1]) break;
			put(tdgbl, rec_generator);
			const SSHORT l = PUT_TEXT (att_gen_generator, /*X.RDB$GENERATOR_NAME*/
								      isc_387.isc_389);
			SINT64 value = 0;
			if (!tdgbl->gbl_sw_meta)
			{
				value = get_gen_id (/*X.RDB$GENERATOR_NAME*/
						    isc_387.isc_389, l);
				put_int64 (att_gen_value_int64, value);
			}
			if (!/*X.RDB$DESCRIPTION.NULL*/
			     isc_387.isc_391) {
				put_source_blob (att_gen_description, att_gen_description, /*X.RDB$DESCRIPTION*/
											   isc_387.isc_388);
			}
			put(tdgbl, att_end);
			MISC_terminate (/*X.RDB$GENERATOR_NAME*/
					isc_387.isc_389, temp, l, sizeof(temp));
			BURP_verbose (165, SafeArg() << temp << value);
			// msg 165 writing generator %s value %ld
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$GENERATORS
			WITH X.RDB$SYSTEM_FLAG MISSING OR X.RDB$SYSTEM_FLAG NE 1*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_382), (char*) isc_382);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 34, &isc_383, (short) 0);
		   if (!isc_383.isc_385 || isc_status [1]) break;
			put(tdgbl, rec_generator);
			const SSHORT l = PUT_TEXT (att_gen_generator, /*X.RDB$GENERATOR_NAME*/
								      isc_383.isc_384);
			SINT64 value = 0;
			if (!tdgbl->gbl_sw_meta)
			{
				value = get_gen_id (/*X.RDB$GENERATOR_NAME*/
						    isc_383.isc_384, l);
				put_int64 (att_gen_value_int64, value);
			}
			put(tdgbl, att_end);
			MISC_terminate (/*X.RDB$GENERATOR_NAME*/
					isc_383.isc_384, temp, l, sizeof(temp));
			BURP_verbose (165, SafeArg() << temp << value);
			// msg 165 writing generator %s value %ld
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}

	MISC_release_request_silent(req_handle1);
}


void write_global_fields()
{
   struct isc_261_struct {
          ISC_QUAD isc_262;	/* RDB$MISSING_SOURCE */
          ISC_QUAD isc_263;	/* RDB$DEFAULT_SOURCE */
          ISC_QUAD isc_264;	/* RDB$DESCRIPTION */
          ISC_QUAD isc_265;	/* RDB$COMPUTED_SOURCE */
          ISC_QUAD isc_266;	/* RDB$COMPUTED_BLR */
          ISC_QUAD isc_267;	/* RDB$VALIDATION_SOURCE */
          ISC_QUAD isc_268;	/* RDB$VALIDATION_BLR */
          ISC_QUAD isc_269;	/* RDB$DEFAULT_VALUE */
          ISC_QUAD isc_270;	/* RDB$MISSING_VALUE */
          ISC_QUAD isc_271;	/* RDB$QUERY_HEADER */
          char  isc_272 [128];	/* RDB$EDIT_STRING */
          char  isc_273 [32];	/* RDB$QUERY_NAME */
          char  isc_274 [32];	/* RDB$FIELD_NAME */
          short isc_275;	/* isc_utility */
          short isc_276;	/* gds__null_flag */
          short isc_277;	/* RDB$COLLATION_ID */
          short isc_278;	/* gds__null_flag */
          short isc_279;	/* RDB$CHARACTER_SET_ID */
          short isc_280;	/* gds__null_flag */
          short isc_281;	/* gds__null_flag */
          short isc_282;	/* gds__null_flag */
          short isc_283;	/* RDB$CHARACTER_LENGTH */
          short isc_284;	/* gds__null_flag */
          short isc_285;	/* RDB$NULL_FLAG */
          short isc_286;	/* RDB$DIMENSIONS */
          short isc_287;	/* RDB$EXTERNAL_SCALE */
          short isc_288;	/* RDB$EXTERNAL_TYPE */
          short isc_289;	/* RDB$EXTERNAL_LENGTH */
          short isc_290;	/* RDB$SYSTEM_FLAG */
          short isc_291;	/* RDB$SEGMENT_LENGTH */
          short isc_292;	/* RDB$FIELD_SCALE */
          short isc_293;	/* RDB$FIELD_SUB_TYPE */
          short isc_294;	/* RDB$FIELD_LENGTH */
          short isc_295;	/* RDB$FIELD_TYPE */
          short isc_296;	/* gds__null_flag */
          short isc_297;	/* gds__null_flag */
   } isc_261;
   struct isc_299_struct {
          ISC_QUAD isc_300;	/* RDB$MISSING_SOURCE */
          ISC_QUAD isc_301;	/* RDB$DEFAULT_SOURCE */
          ISC_QUAD isc_302;	/* RDB$DESCRIPTION */
          ISC_QUAD isc_303;	/* RDB$COMPUTED_SOURCE */
          ISC_QUAD isc_304;	/* RDB$COMPUTED_BLR */
          ISC_QUAD isc_305;	/* RDB$VALIDATION_SOURCE */
          ISC_QUAD isc_306;	/* RDB$VALIDATION_BLR */
          ISC_QUAD isc_307;	/* RDB$DEFAULT_VALUE */
          ISC_QUAD isc_308;	/* RDB$MISSING_VALUE */
          ISC_QUAD isc_309;	/* RDB$QUERY_HEADER */
          char  isc_310 [128];	/* RDB$EDIT_STRING */
          char  isc_311 [32];	/* RDB$QUERY_NAME */
          char  isc_312 [32];	/* RDB$FIELD_NAME */
          short isc_313;	/* isc_utility */
          short isc_314;	/* gds__null_flag */
          short isc_315;	/* RDB$FIELD_PRECISION */
          short isc_316;	/* gds__null_flag */
          short isc_317;	/* RDB$COLLATION_ID */
          short isc_318;	/* gds__null_flag */
          short isc_319;	/* RDB$CHARACTER_SET_ID */
          short isc_320;	/* gds__null_flag */
          short isc_321;	/* gds__null_flag */
          short isc_322;	/* gds__null_flag */
          short isc_323;	/* RDB$CHARACTER_LENGTH */
          short isc_324;	/* gds__null_flag */
          short isc_325;	/* RDB$NULL_FLAG */
          short isc_326;	/* RDB$DIMENSIONS */
          short isc_327;	/* RDB$EXTERNAL_SCALE */
          short isc_328;	/* RDB$EXTERNAL_TYPE */
          short isc_329;	/* RDB$EXTERNAL_LENGTH */
          short isc_330;	/* RDB$SYSTEM_FLAG */
          short isc_331;	/* RDB$SEGMENT_LENGTH */
          short isc_332;	/* RDB$FIELD_SCALE */
          short isc_333;	/* RDB$FIELD_SUB_TYPE */
          short isc_334;	/* RDB$FIELD_LENGTH */
          short isc_335;	/* RDB$FIELD_TYPE */
          short isc_336;	/* gds__null_flag */
          short isc_337;	/* gds__null_flag */
   } isc_299;
   struct isc_339_struct {
          char  isc_340 [32];	/* RDB$OWNER_NAME */
          char  isc_341 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_342;	/* RDB$MISSING_SOURCE */
          ISC_QUAD isc_343;	/* RDB$DEFAULT_SOURCE */
          ISC_QUAD isc_344;	/* RDB$DESCRIPTION */
          ISC_QUAD isc_345;	/* RDB$COMPUTED_SOURCE */
          ISC_QUAD isc_346;	/* RDB$COMPUTED_BLR */
          ISC_QUAD isc_347;	/* RDB$VALIDATION_SOURCE */
          ISC_QUAD isc_348;	/* RDB$VALIDATION_BLR */
          ISC_QUAD isc_349;	/* RDB$DEFAULT_VALUE */
          ISC_QUAD isc_350;	/* RDB$MISSING_VALUE */
          ISC_QUAD isc_351;	/* RDB$QUERY_HEADER */
          char  isc_352 [128];	/* RDB$EDIT_STRING */
          char  isc_353 [32];	/* RDB$QUERY_NAME */
          char  isc_354 [32];	/* RDB$FIELD_NAME */
          short isc_355;	/* isc_utility */
          short isc_356;	/* gds__null_flag */
          short isc_357;	/* gds__null_flag */
          short isc_358;	/* gds__null_flag */
          short isc_359;	/* RDB$FIELD_PRECISION */
          short isc_360;	/* gds__null_flag */
          short isc_361;	/* RDB$COLLATION_ID */
          short isc_362;	/* gds__null_flag */
          short isc_363;	/* RDB$CHARACTER_SET_ID */
          short isc_364;	/* gds__null_flag */
          short isc_365;	/* gds__null_flag */
          short isc_366;	/* gds__null_flag */
          short isc_367;	/* RDB$CHARACTER_LENGTH */
          short isc_368;	/* gds__null_flag */
          short isc_369;	/* RDB$NULL_FLAG */
          short isc_370;	/* RDB$DIMENSIONS */
          short isc_371;	/* RDB$EXTERNAL_SCALE */
          short isc_372;	/* RDB$EXTERNAL_TYPE */
          short isc_373;	/* RDB$EXTERNAL_LENGTH */
          short isc_374;	/* RDB$SYSTEM_FLAG */
          short isc_375;	/* RDB$SEGMENT_LENGTH */
          short isc_376;	/* RDB$FIELD_SCALE */
          short isc_377;	/* RDB$FIELD_SUB_TYPE */
          short isc_378;	/* RDB$FIELD_LENGTH */
          short isc_379;	/* RDB$FIELD_TYPE */
          short isc_380;	/* gds__null_flag */
          short isc_381;	/* gds__null_flag */
   } isc_339;
/**************************************
 *
 *	w r i t e _ g l o b a l _ f i e l d s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each global field.
 *
 **************************************/
	TEXT temp[GDS_NAME_LEN];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	// if we have all capabilities, use the first request to get the
	// most performance out of the latest engine; if we don't
	// have one of the capabilities we must use the second set of
	// requests--this requires more code but it is well worth it
	// for the performance benefits, especially remotely--deej

	if (tdgbl->runtimeODS >= DB_VERSION_DDL12)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$FIELDS WITH
			X.RDB$SYSTEM_FLAG NE 1*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_338), (char*) isc_338);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 390, &isc_339, (short) 0);
		   if (!isc_339.isc_355 || isc_status [1]) break;

			put(tdgbl, rec_global_field);
			const SSHORT l = PUT_TEXT (att_field_name, /*X.RDB$FIELD_NAME*/
								   isc_339.isc_354);
			MISC_terminate (/*X.RDB$FIELD_NAME*/
					isc_339.isc_354, temp, l, sizeof(temp));
			BURP_verbose (149, temp);
			// msg 149  writing global field %.*s
			if (!/*X.RDB$QUERY_NAME.NULL*/
			     isc_339.isc_381 && /*X.RDB$QUERY_NAME*/
    isc_339.isc_353 [0] != ' ')
				PUT_TEXT (att_field_query_name, /*X.RDB$QUERY_NAME*/
								isc_339.isc_353);
			if (!/*X.RDB$EDIT_STRING.NULL*/
			     isc_339.isc_380 && /*X.RDB$EDIT_STRING*/
    isc_339.isc_352 [0] != ' ')
				PUT_TEXT (att_field_edit_string, /*X.RDB$EDIT_STRING*/
								 isc_339.isc_352);
			put_source_blob (att_field_query_header, att_field_query_header, /*X.RDB$QUERY_HEADER*/
											 isc_339.isc_351);
			put_int32 (att_field_type, /*X.RDB$FIELD_TYPE*/
						   isc_339.isc_379);
			put_int32 (att_field_length, /*X.RDB$FIELD_LENGTH*/
						     isc_339.isc_378);
			put_int32 (att_field_sub_type, /*X.RDB$FIELD_SUB_TYPE*/
						       isc_339.isc_377);
			put_int32 (att_field_scale, /*X.RDB$FIELD_SCALE*/
						    isc_339.isc_376);
			put_blr_blob (att_field_missing_value, /*X.RDB$MISSING_VALUE*/
							       isc_339.isc_350);
			put_blr_blob (att_field_default_value, /*X.RDB$DEFAULT_VALUE*/
							       isc_339.isc_349);
			put_blr_blob (att_field_validation_blr, /*X.RDB$VALIDATION_BLR*/
								isc_339.isc_348);
			put_source_blob(att_field_validation_source2, att_field_validation_source,
							/*X.RDB$VALIDATION_SOURCE*/
							isc_339.isc_347);
			put_blr_blob (att_field_computed_blr, /*X.RDB$COMPUTED_BLR*/
							      isc_339.isc_346);
			put_source_blob(att_field_computed_source2, att_field_computed_source,
							/*X.RDB$COMPUTED_SOURCE*/
							isc_339.isc_345);
			if (/*X.RDB$SEGMENT_LENGTH*/
			    isc_339.isc_375)
				put_int32 (att_field_segment_length, /*X.RDB$SEGMENT_LENGTH*/
								     isc_339.isc_375);
			if (/*X.RDB$SYSTEM_FLAG*/
			    isc_339.isc_374)
				put_int32 (att_field_system_flag, /*X.RDB$SYSTEM_FLAG*/
								  isc_339.isc_374);
			put_source_blob (att_field_description2, att_field_description, /*X.RDB$DESCRIPTION*/
											isc_339.isc_344);

			if (/*X.RDB$EXTERNAL_LENGTH*/
			    isc_339.isc_373)
				put_int32 (att_field_external_length, /*X.RDB$EXTERNAL_LENGTH*/
								      isc_339.isc_373);
			if (/*X.RDB$EXTERNAL_TYPE*/
			    isc_339.isc_372)
				put_int32 (att_field_external_type, /*X.RDB$EXTERNAL_TYPE*/
								    isc_339.isc_372);
			if (/*X.RDB$EXTERNAL_SCALE*/
			    isc_339.isc_371)
				put_int32 (att_field_external_scale, /*X.RDB$EXTERNAL_SCALE*/
								     isc_339.isc_371);
			if (/*X.RDB$DIMENSIONS*/
			    isc_339.isc_370)
				put_int32 (att_field_dimensions, /*X.RDB$DIMENSIONS*/
								 isc_339.isc_370);
			if (!/*X.RDB$NULL_FLAG.NULL*/
			     isc_339.isc_368)
				put_int32 (att_field_null_flag, /*X.RDB$NULL_FLAG*/
								isc_339.isc_369);
			if (!/*X.RDB$CHARACTER_LENGTH.NULL*/
			     isc_339.isc_366)
				put_int32 (att_field_character_length, /*X.RDB$CHARACTER_LENGTH*/
								       isc_339.isc_367);
			if (!/*X.RDB$DEFAULT_SOURCE.NULL*/
			     isc_339.isc_365)
				put_source_blob(att_field_default_source, att_field_default_source,
								/*X.RDB$DEFAULT_SOURCE*/
								isc_339.isc_343);
			if (!/*X.RDB$MISSING_SOURCE.NULL*/
			     isc_339.isc_364)
				put_source_blob(att_field_missing_source, att_field_missing_source,
								/*X.RDB$MISSING_SOURCE*/
								isc_339.isc_342);
			if (!/*X.RDB$CHARACTER_SET_ID.NULL*/
			     isc_339.isc_362)
				put_int32 (att_field_character_set, /*X.RDB$CHARACTER_SET_ID*/
								    isc_339.isc_363);
			if (!/*X.RDB$COLLATION_ID.NULL*/
			     isc_339.isc_360)
				put_int32 (att_field_collation_id, /*X.RDB$COLLATION_ID*/
								   isc_339.isc_361);
			if (!/*X.RDB$FIELD_PRECISION.NULL*/
			     isc_339.isc_358)
				put_int32 (att_field_precision, /*X.RDB$FIELD_PRECISION*/
								isc_339.isc_359);

			if (!/*X.RDB$SECURITY_CLASS.NULL*/
			     isc_339.isc_357)
				PUT_TEXT(att_field_security_class, /*X.RDB$SECURITY_CLASS*/
								   isc_339.isc_341);
			if (!/*X.RDB$OWNER_NAME.NULL*/
			     isc_339.isc_356)
				PUT_TEXT(att_field_owner_name, /*X.RDB$OWNER_NAME*/
							       isc_339.isc_340);

			put(tdgbl, att_end);

		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else if (tdgbl->runtimeODS >= DB_VERSION_DDL10)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$FIELDS WITH
			X.RDB$SYSTEM_FLAG NE 1 OR
			X.RDB$SYSTEM_FLAG MISSING*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_298), (char*) isc_298);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 322, &isc_299, (short) 0);
		   if (!isc_299.isc_313 || isc_status [1]) break;

			put(tdgbl, rec_global_field);
			const SSHORT l = PUT_TEXT (att_field_name, /*X.RDB$FIELD_NAME*/
								   isc_299.isc_312);
			MISC_terminate (/*X.RDB$FIELD_NAME*/
					isc_299.isc_312, temp, l, sizeof(temp));
			BURP_verbose (149, temp);
			// msg 149  writing global field %.*s
			if (!/*X.RDB$QUERY_NAME.NULL*/
			     isc_299.isc_337 && /*X.RDB$QUERY_NAME*/
    isc_299.isc_311 [0] != ' ')
				PUT_TEXT (att_field_query_name, /*X.RDB$QUERY_NAME*/
								isc_299.isc_311);
			if (!/*X.RDB$EDIT_STRING.NULL*/
			     isc_299.isc_336 && /*X.RDB$EDIT_STRING*/
    isc_299.isc_310 [0] != ' ')
				PUT_TEXT (att_field_edit_string, /*X.RDB$EDIT_STRING*/
								 isc_299.isc_310);
			put_source_blob (att_field_query_header, att_field_query_header, /*X.RDB$QUERY_HEADER*/
											 isc_299.isc_309);
			put_int32 (att_field_type, /*X.RDB$FIELD_TYPE*/
						   isc_299.isc_335);
			put_int32 (att_field_length, /*X.RDB$FIELD_LENGTH*/
						     isc_299.isc_334);
			put_int32 (att_field_sub_type, /*X.RDB$FIELD_SUB_TYPE*/
						       isc_299.isc_333);
			put_int32 (att_field_scale, /*X.RDB$FIELD_SCALE*/
						    isc_299.isc_332);
			put_blr_blob (att_field_missing_value, /*X.RDB$MISSING_VALUE*/
							       isc_299.isc_308);
			put_blr_blob (att_field_default_value, /*X.RDB$DEFAULT_VALUE*/
							       isc_299.isc_307);
			put_blr_blob (att_field_validation_blr, /*X.RDB$VALIDATION_BLR*/
								isc_299.isc_306);
			put_source_blob(att_field_validation_source2, att_field_validation_source,
							/*X.RDB$VALIDATION_SOURCE*/
							isc_299.isc_305);
			put_blr_blob (att_field_computed_blr, /*X.RDB$COMPUTED_BLR*/
							      isc_299.isc_304);
			put_source_blob(att_field_computed_source2, att_field_computed_source,
							/*X.RDB$COMPUTED_SOURCE*/
							isc_299.isc_303);
			if (/*X.RDB$SEGMENT_LENGTH*/
			    isc_299.isc_331)
				put_int32 (att_field_segment_length, /*X.RDB$SEGMENT_LENGTH*/
								     isc_299.isc_331);
			if (/*X.RDB$SYSTEM_FLAG*/
			    isc_299.isc_330)
				put_int32 (att_field_system_flag, /*X.RDB$SYSTEM_FLAG*/
								  isc_299.isc_330);
			put_source_blob (att_field_description2, att_field_description, /*X.RDB$DESCRIPTION*/
											isc_299.isc_302);

			if (/*X.RDB$EXTERNAL_LENGTH*/
			    isc_299.isc_329)
				put_int32 (att_field_external_length, /*X.RDB$EXTERNAL_LENGTH*/
								      isc_299.isc_329);
			if (/*X.RDB$EXTERNAL_TYPE*/
			    isc_299.isc_328)
				put_int32 (att_field_external_type, /*X.RDB$EXTERNAL_TYPE*/
								    isc_299.isc_328);
			if (/*X.RDB$EXTERNAL_SCALE*/
			    isc_299.isc_327)
				put_int32 (att_field_external_scale, /*X.RDB$EXTERNAL_SCALE*/
								     isc_299.isc_327);
			if (/*X.RDB$DIMENSIONS*/
			    isc_299.isc_326)
				put_int32 (att_field_dimensions, /*X.RDB$DIMENSIONS*/
								 isc_299.isc_326);
			if (!/*X.RDB$NULL_FLAG.NULL*/
			     isc_299.isc_324)
				put_int32 (att_field_null_flag, /*X.RDB$NULL_FLAG*/
								isc_299.isc_325);
			if (!/*X.RDB$CHARACTER_LENGTH.NULL*/
			     isc_299.isc_322)
				put_int32 (att_field_character_length, /*X.RDB$CHARACTER_LENGTH*/
								       isc_299.isc_323);
			if (!/*X.RDB$DEFAULT_SOURCE.NULL*/
			     isc_299.isc_321)
				put_source_blob(att_field_default_source, att_field_default_source,
								/*X.RDB$DEFAULT_SOURCE*/
								isc_299.isc_301);
			if (!/*X.RDB$MISSING_SOURCE.NULL*/
			     isc_299.isc_320)
				put_source_blob(att_field_missing_source, att_field_missing_source,
								/*X.RDB$MISSING_SOURCE*/
								isc_299.isc_300);
			if (!/*X.RDB$CHARACTER_SET_ID.NULL*/
			     isc_299.isc_318)
				put_int32 (att_field_character_set, /*X.RDB$CHARACTER_SET_ID*/
								    isc_299.isc_319);
			if (!/*X.RDB$COLLATION_ID.NULL*/
			     isc_299.isc_316)
				put_int32 (att_field_collation_id, /*X.RDB$COLLATION_ID*/
								   isc_299.isc_317);

			if (!/*X.RDB$FIELD_PRECISION.NULL*/
			     isc_299.isc_314)
				put_int32 (att_field_precision, /*X.RDB$FIELD_PRECISION*/
								isc_299.isc_315);

			put(tdgbl, att_end);

		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$FIELDS WITH
			X.RDB$SYSTEM_FLAG NE 1 OR
			X.RDB$SYSTEM_FLAG MISSING*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_260), (char*) isc_260);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 318, &isc_261, (short) 0);
		   if (!isc_261.isc_275 || isc_status [1]) break;

			put(tdgbl, rec_global_field);
			const SSHORT l = PUT_TEXT (att_field_name, /*X.RDB$FIELD_NAME*/
								   isc_261.isc_274);
			MISC_terminate (/*X.RDB$FIELD_NAME*/
					isc_261.isc_274, temp, l, sizeof(temp));
			BURP_verbose (149, temp);
			// msg 149  writing global field %.*s
			if (!/*X.RDB$QUERY_NAME.NULL*/
			     isc_261.isc_297 && /*X.RDB$QUERY_NAME*/
    isc_261.isc_273 [0] != ' ')
				PUT_TEXT (att_field_query_name, /*X.RDB$QUERY_NAME*/
								isc_261.isc_273);
			if (!/*X.RDB$EDIT_STRING.NULL*/
			     isc_261.isc_296 && /*X.RDB$EDIT_STRING*/
    isc_261.isc_272 [0] != ' ')
				PUT_TEXT (att_field_edit_string, /*X.RDB$EDIT_STRING*/
								 isc_261.isc_272);
			put_source_blob (att_field_query_header, att_field_query_header, /*X.RDB$QUERY_HEADER*/
											 isc_261.isc_271);
			put_int32 (att_field_type, /*X.RDB$FIELD_TYPE*/
						   isc_261.isc_295);
			put_int32 (att_field_length, /*X.RDB$FIELD_LENGTH*/
						     isc_261.isc_294);
			put_int32 (att_field_sub_type, /*X.RDB$FIELD_SUB_TYPE*/
						       isc_261.isc_293);
			put_int32 (att_field_scale, /*X.RDB$FIELD_SCALE*/
						    isc_261.isc_292);
			put_blr_blob (att_field_missing_value, /*X.RDB$MISSING_VALUE*/
							       isc_261.isc_270);
			put_blr_blob (att_field_default_value, /*X.RDB$DEFAULT_VALUE*/
							       isc_261.isc_269);
			put_blr_blob (att_field_validation_blr, /*X.RDB$VALIDATION_BLR*/
								isc_261.isc_268);
			put_source_blob(att_field_validation_source2, att_field_validation_source,
							/*X.RDB$VALIDATION_SOURCE*/
							isc_261.isc_267);
			put_blr_blob (att_field_computed_blr, /*X.RDB$COMPUTED_BLR*/
							      isc_261.isc_266);
			put_source_blob (att_field_computed_source2, att_field_computed_source,
				/*X.RDB$COMPUTED_SOURCE*/
				isc_261.isc_265);
			if (/*X.RDB$SEGMENT_LENGTH*/
			    isc_261.isc_291)
				put_int32 (att_field_segment_length, /*X.RDB$SEGMENT_LENGTH*/
								     isc_261.isc_291);
			if (/*X.RDB$SYSTEM_FLAG*/
			    isc_261.isc_290)
				put_int32 (att_field_system_flag, /*X.RDB$SYSTEM_FLAG*/
								  isc_261.isc_290);
			put_source_blob (att_field_description2, att_field_description, /*X.RDB$DESCRIPTION*/
											isc_261.isc_264);
			if (/*X.RDB$EXTERNAL_LENGTH*/
			    isc_261.isc_289)
				put_int32 (att_field_external_length, /*X.RDB$EXTERNAL_LENGTH*/
								      isc_261.isc_289);
			if (/*X.RDB$EXTERNAL_TYPE*/
			    isc_261.isc_288)
				put_int32 (att_field_external_type, /*X.RDB$EXTERNAL_TYPE*/
								    isc_261.isc_288);
			if (/*X.RDB$EXTERNAL_SCALE*/
			    isc_261.isc_287)
				put_int32 (att_field_external_scale, /*X.RDB$EXTERNAL_SCALE*/
								     isc_261.isc_287);
			if (/*X.RDB$DIMENSIONS*/
			    isc_261.isc_286)
				put_int32 (att_field_dimensions, /*X.RDB$DIMENSIONS*/
								 isc_261.isc_286);
			if (!/*X.RDB$NULL_FLAG.NULL*/
			     isc_261.isc_284)
				put_int32 (att_field_null_flag, /*X.RDB$NULL_FLAG*/
								isc_261.isc_285);
			if (!/*X.RDB$CHARACTER_LENGTH.NULL*/
			     isc_261.isc_282)
				put_int32 (att_field_character_length, /*X.RDB$CHARACTER_LENGTH*/
								       isc_261.isc_283);
			if (!/*X.RDB$DEFAULT_SOURCE.NULL*/
			     isc_261.isc_281)
				put_source_blob(att_field_default_source, att_field_default_source,
								/*X.RDB$DEFAULT_SOURCE*/
								isc_261.isc_263);
			if (!/*X.RDB$MISSING_SOURCE.NULL*/
			     isc_261.isc_280)
				put_source_blob(att_field_missing_source, att_field_missing_source,
								/*X.RDB$MISSING_SOURCE*/
								isc_261.isc_262);
			if (!/*X.RDB$CHARACTER_SET_ID.NULL*/
			     isc_261.isc_278)
				put_int32 (att_field_character_set, /*X.RDB$CHARACTER_SET_ID*/
								    isc_261.isc_279);
			if (!/*X.RDB$COLLATION_ID.NULL*/
			     isc_261.isc_276)
				put_int32 (att_field_collation_id, /*X.RDB$COLLATION_ID*/
								   isc_261.isc_277);

			put(tdgbl, att_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}

	MISC_release_request_silent(req_handle1);
}


void write_packages()
{
   struct isc_247_struct {
          ISC_QUAD isc_248;	/* RDB$DESCRIPTION */
          char  isc_249 [32];	/* RDB$OWNER_NAME */
          char  isc_250 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_251;	/* RDB$PACKAGE_BODY_SOURCE */
          ISC_QUAD isc_252;	/* RDB$PACKAGE_HEADER_SOURCE */
          char  isc_253 [32];	/* RDB$PACKAGE_NAME */
          short isc_254;	/* isc_utility */
          short isc_255;	/* gds__null_flag */
          short isc_256;	/* gds__null_flag */
          short isc_257;	/* gds__null_flag */
          short isc_258;	/* gds__null_flag */
          short isc_259;	/* gds__null_flag */
   } isc_247;
/**************************************
 *
 *	w r i t e _ p a c k a g e s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each package.
 *
 **************************************/
	TEXT temp[GDS_NAME_LEN];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	// This code is for DDL12 onwards, so no need to check for null sysflag.
	/*FOR (REQUEST_HANDLE req_handle1)
		X IN RDB$PACKAGES
		WITH X.RDB$SYSTEM_FLAG NE 1*/
	{
        if (!req_handle1)
           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_246), (char*) isc_246);
	if (req_handle1)
           isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 132, &isc_247, (short) 0);
	   if (!isc_247.isc_254 || isc_status [1]) break;
	{
		put(tdgbl, rec_package);
		const SSHORT l = PUT_TEXT(att_package_name, /*X.RDB$PACKAGE_NAME*/
							    isc_247.isc_253);
		MISC_terminate(/*X.RDB$PACKAGE_NAME*/
			       isc_247.isc_253, temp, l, sizeof(temp));

		BURP_verbose(335, temp);	// msg 335 writing package @1

		if (!/*X.RDB$PACKAGE_HEADER_SOURCE.NULL*/
		     isc_247.isc_259)
		{
			put_source_blob(att_package_header_source, att_package_header_source,
				/*X.RDB$PACKAGE_HEADER_SOURCE*/
				isc_247.isc_252);
		}

		if (!/*X.RDB$PACKAGE_BODY_SOURCE.NULL*/
		     isc_247.isc_258)
		{
			put_source_blob(att_package_body_source, att_package_body_source,
				/*X.RDB$PACKAGE_BODY_SOURCE*/
				isc_247.isc_251);
		}

		if (!/*X.RDB$SECURITY_CLASS.NULL*/
		     isc_247.isc_257)
			PUT_TEXT(att_package_security_class, /*X.RDB$SECURITY_CLASS*/
							     isc_247.isc_250);
		if (!/*X.RDB$OWNER_NAME.NULL*/
		     isc_247.isc_256)
			PUT_TEXT(att_package_owner_name, /*X.RDB$OWNER_NAME*/
							 isc_247.isc_249);

		if (!/*X.RDB$DESCRIPTION.NULL*/
		     isc_247.isc_255)
			put_source_blob(att_package_description, att_package_description, /*X.RDB$DESCRIPTION*/
											  isc_247.isc_248);

		put(tdgbl, att_end);
	}
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR*/
	   }
	}

	MISC_release_request_silent(req_handle1);
}


void write_procedures()
{
   struct isc_207_struct {
          char  isc_208 [32];	/* RDB$OWNER_NAME */
          char  isc_209 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_210;	/* RDB$PROCEDURE_BLR */
          ISC_QUAD isc_211;	/* RDB$PROCEDURE_SOURCE */
          ISC_QUAD isc_212;	/* RDB$DESCRIPTION */
          char  isc_213 [32];	/* RDB$PROCEDURE_NAME */
          short isc_214;	/* isc_utility */
          short isc_215;	/* gds__null_flag */
          short isc_216;	/* RDB$PROCEDURE_OUTPUTS */
          short isc_217;	/* RDB$PROCEDURE_INPUTS */
   } isc_207;
   struct isc_219_struct {
          char  isc_220 [256];	/* RDB$ENTRYPOINT */
          char  isc_221 [32];	/* RDB$ENGINE_NAME */
          ISC_QUAD isc_222;	/* RDB$DEBUG_INFO */
          char  isc_223 [32];	/* RDB$OWNER_NAME */
          char  isc_224 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_225;	/* RDB$PROCEDURE_BLR */
          ISC_QUAD isc_226;	/* RDB$PROCEDURE_SOURCE */
          ISC_QUAD isc_227;	/* RDB$DESCRIPTION */
          char  isc_228 [32];	/* RDB$PROCEDURE_NAME */
          char  isc_229 [32];	/* RDB$PACKAGE_NAME */
          short isc_230;	/* isc_utility */
          short isc_231;	/* gds__null_flag */
          short isc_232;	/* RDB$PRIVATE_FLAG */
          short isc_233;	/* gds__null_flag */
          short isc_234;	/* gds__null_flag */
          short isc_235;	/* gds__null_flag */
          short isc_236;	/* gds__null_flag */
          short isc_237;	/* RDB$VALID_BLR */
          short isc_238;	/* gds__null_flag */
          short isc_239;	/* RDB$PROCEDURE_TYPE */
          short isc_240;	/* gds__null_flag */
          short isc_241;	/* gds__null_flag */
          short isc_242;	/* gds__null_flag */
          short isc_243;	/* RDB$PROCEDURE_OUTPUTS */
          short isc_244;	/* RDB$PROCEDURE_INPUTS */
          short isc_245;	/* gds__null_flag */
   } isc_219;
/**************************************
 *
 *	w r i t e _ p r o c e d u r e s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each stored procedure.
 *
 **************************************/
	GDS_NAME proc;
	TEXT temp[GDS_NAME_LEN * 2];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	if (tdgbl->runtimeODS >= DB_VERSION_DDL11_1)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$PROCEDURES
			WITH X.RDB$SYSTEM_FLAG MISSING OR X.RDB$SYSTEM_FLAG NE 1*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_218), (char*) isc_218);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 480, &isc_219, (short) 0);
		   if (!isc_219.isc_230 || isc_status [1]) break;
			put(tdgbl, rec_procedure);

			SSHORT prefixLen = 0;

			if (!/*X.RDB$PACKAGE_NAME.NULL*/
			     isc_219.isc_245)
			{
				prefixLen = PUT_TEXT(att_procedure_package_name, /*X.RDB$PACKAGE_NAME*/
										 isc_219.isc_229);
				MISC_terminate (/*X.RDB$PACKAGE_NAME*/
						isc_219.isc_229, temp, prefixLen, sizeof(temp));
				temp[prefixLen++] = '.';
			}

			const SSHORT len = PUT_TEXT (att_procedure_name, /*X.RDB$PROCEDURE_NAME*/
									 isc_219.isc_228);
			MISC_terminate (/*X.RDB$PROCEDURE_NAME*/
					isc_219.isc_228, temp + prefixLen, len, sizeof(temp) - prefixLen);

			BURP_verbose (193, temp);
			// msg 193 writing stored procedure %.*s
			put_int32 (att_procedure_inputs, /*X.RDB$PROCEDURE_INPUTS*/
							 isc_219.isc_244);
			put_int32 (att_procedure_outputs, /*X.RDB$PROCEDURE_OUTPUTS*/
							  isc_219.isc_243);
			put_source_blob(att_procedure_description2, att_procedure_description, /*X.RDB$DESCRIPTION*/
											       isc_219.isc_227);
			put_source_blob (att_procedure_source2, att_procedure_source, /*X.RDB$PROCEDURE_SOURCE*/
										      isc_219.isc_226);

			if (!/*X.RDB$PROCEDURE_BLR.NULL*/
			     isc_219.isc_242)
				put_blr_blob (att_procedure_blr, /*X.RDB$PROCEDURE_BLR*/
								 isc_219.isc_225);

			if (!/*X.RDB$SECURITY_CLASS.NULL*/
			     isc_219.isc_241)
				PUT_TEXT (att_procedure_security_class, /*X.RDB$SECURITY_CLASS*/
									isc_219.isc_224);
			if (!/*X.RDB$OWNER_NAME.NULL*/
			     isc_219.isc_240)
				PUT_TEXT (att_procedure_owner_name, /*X.RDB$OWNER_NAME*/
								    isc_219.isc_223);
			if (!/*X.RDB$PROCEDURE_TYPE.NULL*/
			     isc_219.isc_238)
				put_int32 (att_procedure_type, /*X.RDB$PROCEDURE_TYPE*/
							       isc_219.isc_239);
			if (!/*X.RDB$VALID_BLR.NULL*/
			     isc_219.isc_236)
				put_int32 (att_procedure_valid_blr, /*X.RDB$VALID_BLR*/
								    isc_219.isc_237);
			if (!/*X.RDB$DEBUG_INFO.NULL*/
			     isc_219.isc_235)
				put_blr_blob (att_procedure_debug_info, /*X.RDB$DEBUG_INFO*/
									isc_219.isc_222);

			if (!/*X.RDB$ENGINE_NAME.NULL*/
			     isc_219.isc_234)
				PUT_TEXT(att_procedure_engine_name, /*X.RDB$ENGINE_NAME*/
								    isc_219.isc_221);

			if (!/*X.RDB$ENTRYPOINT.NULL*/
			     isc_219.isc_233)
				PUT_TEXT(att_procedure_entrypoint, /*X.RDB$ENTRYPOINT*/
								   isc_219.isc_220);

			if (!/*X.RDB$PRIVATE_FLAG.NULL*/
			     isc_219.isc_231)
				put_int32(att_procedure_private_flag, /*X.RDB$PRIVATE_FLAG*/
								      isc_219.isc_232);

			put(tdgbl, att_end);
			COPY(/*X.RDB$PROCEDURE_NAME*/
			     isc_219.isc_228, proc);
			write_procedure_prms ((/*X.RDB$PACKAGE_NAME.NULL*/
					       isc_219.isc_245 ? "" : /*X.RDB$PACKAGE_NAME*/
	isc_219.isc_229), proc);
			put(tdgbl, rec_procedure_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$PROCEDURES
			WITH X.RDB$SYSTEM_FLAG MISSING OR X.RDB$SYSTEM_FLAG NE 1*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_206), (char*) isc_206);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 128, &isc_207, (short) 0);
		   if (!isc_207.isc_214 || isc_status [1]) break;
			put(tdgbl, rec_procedure);
			const SSHORT l = PUT_TEXT (att_procedure_name, /*X.RDB$PROCEDURE_NAME*/
								       isc_207.isc_213);
			MISC_terminate (/*X.RDB$PROCEDURE_NAME*/
					isc_207.isc_213, temp, l, sizeof(temp));
			BURP_verbose (193, temp);
			// msg 193 writing stored procedure %.*s
			put_int32 (att_procedure_inputs, /*X.RDB$PROCEDURE_INPUTS*/
							 isc_207.isc_217);
			put_int32 (att_procedure_outputs, /*X.RDB$PROCEDURE_OUTPUTS*/
							  isc_207.isc_216);
			put_source_blob (att_procedure_description2, att_procedure_description, /*X.RDB$DESCRIPTION*/
												isc_207.isc_212);
			put_source_blob (att_procedure_source2, att_procedure_source, /*X.RDB$PROCEDURE_SOURCE*/
										      isc_207.isc_211);
			put_blr_blob (att_procedure_blr, /*X.RDB$PROCEDURE_BLR*/
							 isc_207.isc_210);
			if (!/*X.RDB$SECURITY_CLASS.NULL*/
			     isc_207.isc_215)
				PUT_TEXT (att_procedure_security_class, /*X.RDB$SECURITY_CLASS*/
									isc_207.isc_209);
			if (!/*X.RDB$SECURITY_CLASS.NULL*/
			     isc_207.isc_215)
				PUT_TEXT (att_procedure_owner_name, /*X.RDB$OWNER_NAME*/
								    isc_207.isc_208);
			put(tdgbl, att_end);
			COPY(/*X.RDB$PROCEDURE_NAME*/
			     isc_207.isc_213, proc);
			write_procedure_prms ("", proc);
			put(tdgbl, rec_procedure_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}

	MISC_release_request_silent(req_handle1);
}


void write_procedure_prms(const GDS_NAME package, const GDS_NAME procptr)
{
   struct isc_176_struct {
          ISC_QUAD isc_177;	/* RDB$DESCRIPTION */
          char  isc_178 [32];	/* RDB$FIELD_SOURCE */
          char  isc_179 [32];	/* RDB$PARAMETER_NAME */
          short isc_180;	/* isc_utility */
          short isc_181;	/* RDB$PARAMETER_TYPE */
          short isc_182;	/* RDB$PARAMETER_NUMBER */
   } isc_176;
   struct isc_174_struct {
          char  isc_175 [32];	/* RDB$PROCEDURE_NAME */
   } isc_174;
   struct isc_187_struct {
          char  isc_188 [32];	/* RDB$RELATION_NAME */
          char  isc_189 [32];	/* RDB$FIELD_NAME */
          ISC_QUAD isc_190;	/* RDB$DEFAULT_SOURCE */
          ISC_QUAD isc_191;	/* RDB$DEFAULT_VALUE */
          ISC_QUAD isc_192;	/* RDB$DESCRIPTION */
          char  isc_193 [32];	/* RDB$FIELD_SOURCE */
          char  isc_194 [32];	/* RDB$PARAMETER_NAME */
          short isc_195;	/* isc_utility */
          short isc_196;	/* gds__null_flag */
          short isc_197;	/* gds__null_flag */
          short isc_198;	/* gds__null_flag */
          short isc_199;	/* RDB$PARAMETER_MECHANISM */
          short isc_200;	/* gds__null_flag */
          short isc_201;	/* RDB$NULL_FLAG */
          short isc_202;	/* gds__null_flag */
          short isc_203;	/* RDB$COLLATION_ID */
          short isc_204;	/* RDB$PARAMETER_TYPE */
          short isc_205;	/* RDB$PARAMETER_NUMBER */
   } isc_187;
   struct isc_184_struct {
          char  isc_185 [32];	/* RDB$PACKAGE_NAME */
          char  isc_186 [32];	/* RDB$PROCEDURE_NAME */
   } isc_184;
/**************************************
 *
 *	w r i t e _ p r o c e d u r e _ p r m s
 *
 **************************************
 *
 * Functional description
 * 	write all parameters of a stored procedure.
 *
 **************************************/
	TEXT temp[GDS_NAME_LEN];

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	if (tdgbl->runtimeODS >= DB_VERSION_DDL11_1)
	{
		/*FOR (REQUEST_HANDLE tdgbl->handles_write_procedure_prms_req_handle1)
			X IN RDB$PROCEDURE_PARAMETERS
			WITH X.RDB$PROCEDURE_NAME EQ procptr AND
				 X.RDB$PACKAGE_NAME EQUIV NULLIF(package, '')*/
		{
                if (!tdgbl->handles_write_procedure_prms_req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &tdgbl->handles_write_procedure_prms_req_handle1, (short) sizeof(isc_183), (char*) isc_183);
		isc_vtov ((const char*) package, (char*) isc_184.isc_185, 32);
		isc_vtov ((const char*) procptr, (char*) isc_184.isc_186, 32);
		if (tdgbl->handles_write_procedure_prms_req_handle1)
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &tdgbl->handles_write_procedure_prms_req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 64, &isc_184, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &tdgbl->handles_write_procedure_prms_req_handle1, (short) 1, (short) 174, &isc_187, (short) 0);
		   if (!isc_187.isc_195 || isc_status [1]) break;
		{
			put(tdgbl, rec_procedure_prm);
			const SSHORT l = PUT_TEXT (att_procedureprm_name, /*X.RDB$PARAMETER_NAME*/
									  isc_187.isc_194);
			MISC_terminate (/*X.RDB$PARAMETER_NAME*/
					isc_187.isc_194, temp, l, sizeof(temp));
			BURP_verbose (194, temp);
			// msg 194 writing parameter %s for stored procedure
			put_int32 (att_procedureprm_number, /*X.RDB$PARAMETER_NUMBER*/
							    isc_187.isc_205);
			put_int32 (att_procedureprm_type, /*X.RDB$PARAMETER_type*/
							  isc_187.isc_204);
			PUT_TEXT (att_procedureprm_field_source, /*X.RDB$FIELD_SOURCE*/
								 isc_187.isc_193);
			put_source_blob(att_procedureprm_description2, att_procedureprm_description,
							/*X.RDB$DESCRIPTION*/
							isc_187.isc_192);
			put_blr_blob (att_procedureprm_default_value, /*X.RDB$DEFAULT_VALUE*/
								      isc_187.isc_191);
			put_source_blob(att_procedureprm_default_source, att_procedureprm_default_source,
							/*X.RDB$DEFAULT_SOURCE*/
							isc_187.isc_190);
			if (!/*X.RDB$COLLATION_ID.NULL*/
			     isc_187.isc_202)
				put_int32 (att_procedureprm_collation_id, /*X.RDB$COLLATION_ID*/
									  isc_187.isc_203);
			if (!/*X.RDB$NULL_FLAG.NULL*/
			     isc_187.isc_200)
				put_int32 (att_procedureprm_null_flag, /*X.RDB$NULL_FLAG*/
								       isc_187.isc_201);
			if (!/*X.RDB$PARAMETER_MECHANISM.NULL*/
			     isc_187.isc_198)
				put_int32 (att_procedureprm_mechanism, /*X.RDB$PARAMETER_MECHANISM*/
								       isc_187.isc_199);

			// DB_VERSION_DDL11_2
			if (!/*X.RDB$FIELD_NAME.NULL*/
			     isc_187.isc_197)
				PUT_TEXT(att_procedureprm_field_name, /*X.RDB$FIELD_NAME*/
								      isc_187.isc_189);
			if (!/*X.RDB$RELATION_NAME.NULL*/
			     isc_187.isc_196)
				PUT_TEXT(att_procedureprm_relation_name, /*X.RDB$RELATION_NAME*/
									 isc_187.isc_188);

			put(tdgbl, att_end);
		}
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE tdgbl->handles_write_procedure_prms_req_handle1)
			X IN RDB$PROCEDURE_PARAMETERS WITH X.RDB$PROCEDURE_NAME EQ procptr*/
		{
                if (!tdgbl->handles_write_procedure_prms_req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &tdgbl->handles_write_procedure_prms_req_handle1, (short) sizeof(isc_173), (char*) isc_173);
		isc_vtov ((const char*) procptr, (char*) isc_174.isc_175, 32);
		if (tdgbl->handles_write_procedure_prms_req_handle1)
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &tdgbl->handles_write_procedure_prms_req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_174, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &tdgbl->handles_write_procedure_prms_req_handle1, (short) 1, (short) 78, &isc_176, (short) 0);
		   if (!isc_176.isc_180 || isc_status [1]) break;
			put(tdgbl, rec_procedure_prm);
			const SSHORT l = PUT_TEXT (att_procedureprm_name, /*X.RDB$PARAMETER_NAME*/
									  isc_176.isc_179);
			MISC_terminate (/*X.RDB$PARAMETER_NAME*/
					isc_176.isc_179, temp, l, sizeof(temp));
			BURP_verbose (194, temp);
			// msg 194 writing parameter %s for stored procedure
			put_int32 (att_procedureprm_number, /*X.RDB$PARAMETER_NUMBER*/
							    isc_176.isc_182);
			put_int32 (att_procedureprm_type, /*X.RDB$PARAMETER_type*/
							  isc_176.isc_181);
			PUT_TEXT (att_procedureprm_field_source, /*X.RDB$FIELD_SOURCE*/
								 isc_176.isc_178);
			put_source_blob(att_procedureprm_description2, att_procedureprm_description,
							/*X.RDB$DESCRIPTION*/
							isc_176.isc_177);
			put(tdgbl, att_end);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
}


void write_ref_constraints()
{
   struct isc_166_struct {
          char  isc_167 [8];	/* RDB$MATCH_OPTION */
          char  isc_168 [32];	/* RDB$CONST_NAME_UQ */
          char  isc_169 [32];	/* RDB$CONSTRAINT_NAME */
          char  isc_170 [12];	/* RDB$DELETE_RULE */
          char  isc_171 [12];	/* RDB$UPDATE_RULE */
          short isc_172;	/* isc_utility */
   } isc_166;
/**************************************
 *
 *	w r i t e _ r e f _ c o n s t r a i n t s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each referential constraint.
 *
 **************************************/
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	/*FOR (REQUEST_HANDLE req_handle1)
		X IN RDB$REF_CONSTRAINTS*/
	{
        if (!req_handle1)
           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_165), (char*) isc_165);
	if (req_handle1)
           isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 98, &isc_166, (short) 0);
	   if (!isc_166.isc_172 || isc_status [1]) break;
		put(tdgbl, rec_ref_constraint);
		PUT_TEXT (att_ref_constraint_name, /*X.RDB$CONSTRAINT_NAME*/
						   isc_166.isc_169);
		PUT_TEXT (att_ref_unique_const_name, /*X.RDB$CONST_NAME_UQ*/
						     isc_166.isc_168);
		PUT_TEXT (att_ref_match_option, /*X.RDB$MATCH_OPTION*/
						isc_166.isc_167);
		PUT_TEXT (att_ref_update_rule, /*X.RDB$UPDATE_RULE*/
					       isc_166.isc_171);
		PUT_TEXT (att_ref_delete_rule, /*X.RDB$DELETE_RULE*/
					       isc_166.isc_170);
		put(tdgbl, att_end);
	/*END_FOR;*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	MISC_release_request_silent(req_handle1);
}


void write_rel_constraints()
{
   struct isc_156_struct {
          char  isc_157 [32];	/* RDB$INDEX_NAME */
          char  isc_158 [32];	/* RDB$RELATION_NAME */
          char  isc_159 [32];	/* RDB$CONSTRAINT_NAME */
          char  isc_160 [4];	/* RDB$INITIALLY_DEFERRED */
          char  isc_161 [4];	/* RDB$DEFERRABLE */
          char  isc_162 [12];	/* RDB$CONSTRAINT_TYPE */
          short isc_163;	/* isc_utility */
          short isc_164;	/* gds__null_flag */
   } isc_156;
/**************************************
 *
 *	w r i t e _ r e l _ c o n s t r a i n t s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each relation constraint.
 *
 **************************************/
	TEXT temp[GDS_NAME_LEN];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	/*FOR (REQUEST_HANDLE req_handle1)
		X IN RDB$RELATION_CONSTRAINTS CROSS
		REL IN RDB$RELATIONS
		WITH REL.RDB$RELATION_NAME EQ X.RDB$RELATION_NAME AND
			 (REL.RDB$SYSTEM_FLAG MISSING OR REL.RDB$SYSTEM_FLAG NE 1)*/
	{
        if (!req_handle1)
           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_155), (char*) isc_155);
	if (req_handle1)
           isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 120, &isc_156, (short) 0);
	   if (!isc_156.isc_163 || isc_status [1]) break;
		put(tdgbl, rec_rel_constraint);
		const SSHORT l = PUT_TEXT (att_rel_constraint_name, /*X.RDB$CONSTRAINT_NAME*/
								    isc_156.isc_159);
		MISC_terminate (/*X.RDB$CONSTRAINT_NAME*/
				isc_156.isc_159, temp, l, sizeof(temp));
		BURP_verbose (207, temp);
		// msg 207 writing constraint %s
		PUT_TEXT (att_rel_constraint_type, /*X.RDB$CONSTRAINT_TYPE*/
						   isc_156.isc_162);
		PUT_TEXT (att_rel_constraint_rel_name, /*X.RDB$RELATION_NAME*/
						       isc_156.isc_158);
		PUT_TEXT (att_rel_constraint_defer, /*X.RDB$DEFERRABLE*/
						    isc_156.isc_161);
		PUT_TEXT (att_rel_constraint_init, /*X.RDB$INITIALLY_DEFERRED*/
						   isc_156.isc_160);
		if (!/*X.RDB$INDEX_NAME.NULL*/
		     isc_156.isc_164)
			PUT_TEXT (att_rel_constraint_index, /*X.RDB$INDEX_NAME*/
							    isc_156.isc_157);
		put(tdgbl, att_end);
	/*END_FOR;*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	MISC_release_request_silent(req_handle1);
}


void write_relations()
{
   struct isc_119_struct {
          char  isc_120 [256];	/* RDB$EXTERNAL_FILE */
          char  isc_121 [32];	/* RDB$OWNER_NAME */
          ISC_QUAD isc_122;	/* RDB$EXTERNAL_DESCRIPTION */
          ISC_QUAD isc_123;	/* RDB$VIEW_SOURCE */
          ISC_QUAD isc_124;	/* RDB$DESCRIPTION */
          char  isc_125 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_126;	/* RDB$VIEW_BLR */
          char  isc_127 [32];	/* RDB$RELATION_NAME */
          short isc_128;	/* isc_utility */
          short isc_129;	/* RDB$RELATION_ID */
          short isc_130;	/* gds__null_flag */
          short isc_131;	/* gds__null_flag */
          short isc_132;	/* gds__null_flag */
          short isc_133;	/* RDB$FLAGS */
          short isc_134;	/* RDB$SYSTEM_FLAG */
   } isc_119;
   struct isc_136_struct {
          char  isc_137 [256];	/* RDB$EXTERNAL_FILE */
          char  isc_138 [32];	/* RDB$OWNER_NAME */
          ISC_QUAD isc_139;	/* RDB$EXTERNAL_DESCRIPTION */
          ISC_QUAD isc_140;	/* RDB$VIEW_SOURCE */
          ISC_QUAD isc_141;	/* RDB$DESCRIPTION */
          char  isc_142 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_143;	/* RDB$VIEW_BLR */
          char  isc_144 [32];	/* RDB$RELATION_NAME */
          short isc_145;	/* isc_utility */
          short isc_146;	/* RDB$RELATION_ID */
          short isc_147;	/* gds__null_flag */
          short isc_148;	/* RDB$RELATION_TYPE */
          short isc_149;	/* gds__null_flag */
          short isc_150;	/* gds__null_flag */
          short isc_151;	/* gds__null_flag */
          short isc_152;	/* RDB$FLAGS */
          short isc_153;	/* RDB$SYSTEM_FLAG */
          short isc_154;	/* gds__null_flag */
   } isc_136;
/**************************************
 *
 *	w r i t e _ r e l a t i o n s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each relation.
 *
 **************************************/
	TEXT temp[GDS_NAME_LEN];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	// if we have all capabilities, use the first request to get the
	// most performance out of the latest engine; if we don't
	// have one of the capabilities we must use the second set of
	// requests--this requires more code but it is well worth it
	// for the performance benefits, especially remotely--deej

	if (tdgbl->runtimeODS >= DB_VERSION_DDL11_1)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$RELATIONS WITH X.RDB$SYSTEM_FLAG NE 1 OR
			X.RDB$SYSTEM_FLAG MISSING*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_135), (char*) isc_135);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 404, &isc_136, (short) 0);
		   if (!isc_136.isc_145 || isc_status [1]) break;

			SSHORT flags = 0;
			put(tdgbl, rec_relation);
			const SSHORT l = PUT_TEXT (att_relation_name, /*X.RDB$RELATION_NAME*/
								      isc_136.isc_144);
			MISC_terminate (/*X.RDB$RELATION_NAME*/
					isc_136.isc_144, temp, l, sizeof(temp));
			if (/*X.RDB$VIEW_BLR.NULL*/
			    isc_136.isc_154)
				BURP_verbose(153, temp); // msg 153 writing table @1
			else
				BURP_verbose(345, temp); // msg 345 writing view @1

			// RDB$VIEW_BLR must be the first blob field in the backup file.
			// RESTORE.EPP makes this assumption in get_relation().

			if (put_blr_blob (att_relation_view_blr, /*X.RDB$VIEW_BLR*/
								 isc_136.isc_143))
				flags |= REL_view;
			if (/*X.RDB$SYSTEM_FLAG*/
			    isc_136.isc_153)
				put_int32 (att_relation_system_flag, /*X.RDB$SYSTEM_FLAG*/
								     isc_136.isc_153);
			if (!/*X.RDB$FLAGS.NULL*/
			     isc_136.isc_151)
				put_int32 (att_relation_flags, /*X.RDB$FLAGS*/
							       isc_136.isc_152);
			if (!/*X.RDB$SECURITY_CLASS.NULL*/
			     isc_136.isc_150)
				PUT_TEXT (att_relation_security_class, /*X.RDB$SECURITY_CLASS*/
								       isc_136.isc_142);

			put_source_blob (att_relation_description2, att_relation_description,
				/*X.RDB$DESCRIPTION*/
				isc_136.isc_141);
			put_source_blob (att_relation_view_source2, att_relation_view_source, /*X.RDB$VIEW_SOURCE*/
											      isc_136.isc_140);

			put_source_blob(att_relation_ext_description2, att_relation_ext_description,
							/*X.RDB$EXTERNAL_DESCRIPTION*/
							isc_136.isc_139);
			PUT_TEXT (att_relation_owner_name, /*X.RDB$OWNER_NAME*/
							   isc_136.isc_138);
			if (!/*X.RDB$EXTERNAL_FILE.NULL*/
			     isc_136.isc_149)
			{
				if (!tdgbl->gbl_sw_convert_ext_tables)
				{
					PUT_TEXT(att_relation_ext_file_name, /*X.RDB$EXTERNAL_FILE*/
									     isc_136.isc_137);
					flags |= REL_external;
				}
			}

			if (!/*X.RDB$RELATION_TYPE.NULL*/
			     isc_136.isc_147)
				put_int32 (att_relation_type, /*X.RDB$RELATION_TYPE*/
							      isc_136.isc_148);

			put(tdgbl, att_end);
			burp_rel* relation = (burp_rel*) BURP_alloc_zero (sizeof(burp_rel));
			relation->rel_next = tdgbl->relations;
			tdgbl->relations = relation;
			relation->rel_id = /*X.RDB$RELATION_ID*/
					   isc_136.isc_146;
			relation->rel_name_length = COPY(/*X.RDB$RELATION_NAME*/
							 isc_136.isc_144, relation->rel_name);
			relation->rel_flags |= flags;
			put_relation (relation);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$RELATIONS WITH X.RDB$SYSTEM_FLAG NE 1 OR
			X.RDB$SYSTEM_FLAG MISSING*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_118), (char*) isc_118);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 398, &isc_119, (short) 0);
		   if (!isc_119.isc_128 || isc_status [1]) break;

			SSHORT flags = 0;
			put(tdgbl, rec_relation);
			const SSHORT l = PUT_TEXT(att_relation_name, /*X.RDB$RELATION_NAME*/
								     isc_119.isc_127);
			MISC_terminate (/*X.RDB$RELATION_NAME*/
					isc_119.isc_127, temp, l, sizeof(temp));
			BURP_verbose (153, temp);
			// msg 153 writing table %.*s

			// RDB$VIEW_BLR must be the first blob field in the backup file.
			// RESTORE.EPP makes this assumption in get_relation().

			if (put_blr_blob (att_relation_view_blr, /*X.RDB$VIEW_BLR*/
								 isc_119.isc_126))
				flags |= REL_view;
			if (/*X.RDB$SYSTEM_FLAG*/
			    isc_119.isc_134)
				put_int32 (att_relation_system_flag, /*X.RDB$SYSTEM_FLAG*/
								     isc_119.isc_134);
			if (!/*X.RDB$FLAGS.NULL*/
			     isc_119.isc_132)
				put_int32 (att_relation_flags, /*X.RDB$FLAGS*/
							       isc_119.isc_133);
			if (!/*X.RDB$SECURITY_CLASS.NULL*/
			     isc_119.isc_131)
				PUT_TEXT(att_relation_security_class, /*X.RDB$SECURITY_CLASS*/
								      isc_119.isc_125);
			put_source_blob (att_relation_description2, att_relation_description, /*X.RDB$DESCRIPTION*/
											      isc_119.isc_124);
			put_source_blob (att_relation_view_source2, att_relation_view_source, /*X.RDB$VIEW_SOURCE*/
											      isc_119.isc_123);
			put_source_blob(att_relation_ext_description2, att_relation_ext_description,
							/*X.RDB$EXTERNAL_DESCRIPTION*/
							isc_119.isc_122);
			PUT_TEXT(att_relation_owner_name, /*X.RDB$OWNER_NAME*/
							  isc_119.isc_121);
			if (!/*X.RDB$EXTERNAL_FILE.NULL*/
			     isc_119.isc_130)
			{
				if (!tdgbl->gbl_sw_convert_ext_tables)
				{
					PUT_TEXT(att_relation_ext_file_name, /*X.RDB$EXTERNAL_FILE*/
									     isc_119.isc_120);
					flags |= REL_external;
				}
			}
			put(tdgbl, att_end);
			burp_rel* relation = (burp_rel*) BURP_alloc_zero (sizeof(burp_rel));
			relation->rel_next = tdgbl->relations;
			tdgbl->relations = relation;
			relation->rel_id = /*X.RDB$RELATION_ID*/
					   isc_119.isc_129;
			relation->rel_name_length = COPY(/*X.RDB$RELATION_NAME*/
							 isc_119.isc_127, relation->rel_name);
			relation->rel_flags |= flags;
			put_relation (relation);
		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}

	MISC_release_request_silent(req_handle1);
}


void write_secclasses()
{
   struct isc_113_struct {
          ISC_QUAD isc_114;	/* RDB$DESCRIPTION */
          ISC_QUAD isc_115;	/* RDB$ACL */
          char  isc_116 [32];	/* RDB$SECURITY_CLASS */
          short isc_117;	/* isc_utility */
   } isc_113;
	TEXT temp[GDS_NAME_LEN];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	/*FOR (REQUEST_HANDLE req_handle1)
		X IN RDB$SECURITY_CLASSES WITH X.RDB$SECURITY_CLASS NOT STARTING "SQL$"*/
	{
        if (!req_handle1)
           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_112), (char*) isc_112);
	if (req_handle1)
           isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 50, &isc_113, (short) 0);
	   if (!isc_113.isc_117 || isc_status [1]) break;
		put(tdgbl, rec_security_class);
		const ULONG l = PUT_TEXT (att_class_security_class, /*X.RDB$SECURITY_CLASS*/
								    isc_113.isc_116);
		MISC_terminate (/*X.RDB$SECURITY_CLASS*/
				isc_113.isc_116, temp, l, sizeof(temp));
		BURP_verbose (155, temp);
		// msg 155 writing security class @1
		put_blr_blob (att_class_acl, /*X.RDB$ACL*/
					     isc_113.isc_115);
		put_source_blob (att_class_description2, att_class_description, /*X.RDB$DESCRIPTION*/
										isc_113.isc_114);
		put(tdgbl, att_end);
	/*END_FOR;*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	MISC_release_request_silent(req_handle1);
}


void write_shadow_files()
{
   struct isc_104_struct {
          char  isc_105 [256];	/* RDB$FILE_NAME */
          ISC_LONG isc_106;	/* RDB$FILE_LENGTH */
          ISC_LONG isc_107;	/* RDB$FILE_START */
          short isc_108;	/* isc_utility */
          short isc_109;	/* RDB$SHADOW_NUMBER */
          short isc_110;	/* RDB$FILE_FLAGS */
          short isc_111;	/* RDB$FILE_SEQUENCE */
   } isc_104;
/**************************************
 *
 *	w r i t e _ s h a d o w _ f i l e s
 *
 **************************************
 *
 * Functional description
 *	Write out files to use as shadows.
 *
 **************************************/
	TEXT temp[GDS_NAME_LEN];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	/*FOR (REQUEST_HANDLE req_handle1)
		X IN RDB$FILES
		WITH X.RDB$SHADOW_NUMBER NOT MISSING
		AND X.RDB$SHADOW_NUMBER NE 0*/
	{
        if (!req_handle1)
           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_103), (char*) isc_103);
	if (req_handle1)
           isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 272, &isc_104, (short) 0);
	   if (!isc_104.isc_108 || isc_status [1]) break;
		put(tdgbl, rec_files);
		const SSHORT l = PUT_TEXT (att_file_filename, /*X.RDB$FILE_NAME*/
							      isc_104.isc_105);
		MISC_terminate (/*X.RDB$FILE_NAME*/
				isc_104.isc_105, temp, l, sizeof(temp));
		BURP_verbose (163, temp);
		// msg 163 writing shadow file %s
		put_int32 (att_file_sequence, /*X.RDB$FILE_SEQUENCE*/
					      isc_104.isc_111);
		put_int32 (att_file_start, /*X.RDB$FILE_START*/
					   isc_104.isc_107);
		put_int32 (att_file_length, /*X.RDB$FILE_LENGTH*/
					    isc_104.isc_106);
		put_int32 (att_file_flags, /*X.RDB$FILE_FLAGS*/
					   isc_104.isc_110);
		put_int32 (att_shadow_number, /*X.RDB$SHADOW_NUMBER*/
					      isc_104.isc_109);
		put(tdgbl, att_end);
	/*END_FOR;*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	MISC_release_request_silent(req_handle1);
}


void write_sql_roles()
{
   struct isc_92_struct {
          char  isc_93 [32];	/* RDB$OWNER_NAME */
          char  isc_94 [32];	/* RDB$ROLE_NAME */
          short isc_95;	/* isc_utility */
   } isc_92;
   struct isc_97_struct {
          ISC_QUAD isc_98;	/* RDB$DESCRIPTION */
          char  isc_99 [32];	/* RDB$OWNER_NAME */
          char  isc_100 [32];	/* RDB$ROLE_NAME */
          short isc_101;	/* isc_utility */
          short isc_102;	/* gds__null_flag */
   } isc_97;
/**************************************
 *
 *	w r i t e _ s q l _ r o l e s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each SQL roles.
 *
 **************************************/
	isc_req_handle req_handle1 = 0;
	TEXT temp[GDS_NAME_LEN];

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	if (tdgbl->runtimeODS >= DB_VERSION_DDL11)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$ROLES
			WITH X.RDB$SYSTEM_FLAG EQ 0 OR X.RDB$SYSTEM_FLAG MISSING*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_96), (char*) isc_96);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 76, &isc_97, (short) 0);
		   if (!isc_97.isc_101 || isc_status [1]) break;

			put(tdgbl, rec_sql_roles);
			const SSHORT l = PUT_TEXT(att_role_name, /*X.RDB$ROLE_NAME*/
								 isc_97.isc_100);
			PUT_TEXT (att_role_owner_name, /*X.RDB$OWNER_NAME*/
						       isc_97.isc_99);
			if (!/*X.RDB$DESCRIPTION.NULL*/
			     isc_97.isc_102) {
				put_source_blob (att_role_description, att_role_description, /*X.RDB$DESCRIPTION*/
											     isc_97.isc_98);
			}
			put(tdgbl, att_end);
			MISC_terminate (/*X.RDB$ROLE_NAME*/
					isc_97.isc_100, temp, l, sizeof(temp));
			BURP_verbose (249, temp);
			// msg 249 writing SQL role: %s

		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$ROLES*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_91), (char*) isc_91);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 66, &isc_92, (short) 0);
		   if (!isc_92.isc_95 || isc_status [1]) break;

			put(tdgbl, rec_sql_roles);
			const SSHORT l = PUT_TEXT(att_role_name, /*X.RDB$ROLE_NAME*/
								 isc_92.isc_94);
			PUT_TEXT (att_role_owner_name, /*X.RDB$OWNER_NAME*/
						       isc_92.isc_93);
			put(tdgbl, att_end);
			MISC_terminate (/*X.RDB$ROLE_NAME*/
					isc_92.isc_94, temp, l, sizeof(temp));
			BURP_verbose (249, temp);
			// msg 249 writing SQL role: %s

		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}

	MISC_release_request_silent(req_handle1);
}


void write_mapping()
{
   struct isc_71_struct {
          short isc_72;	/* isc_utility */
          short isc_73;	/* RDB$SYSTEM_FLAG */
   } isc_71;
   struct isc_69_struct {
          char  isc_70 [32];	/* RDB$ROLE_NAME */
   } isc_69;
   struct isc_75_struct {
          ISC_QUAD isc_76;	/* RDB$DESCRIPTION */
          char  isc_77 [32];	/* RDB$MAP_TO */
          char  isc_78 [256];	/* RDB$MAP_FROM */
          char  isc_79 [32];	/* RDB$MAP_FROM_TYPE */
          char  isc_80 [32];	/* RDB$MAP_DB */
          char  isc_81 [32];	/* RDB$MAP_PLUGIN */
          char  isc_82 [32];	/* RDB$MAP_NAME */
          short isc_83;	/* isc_utility */
          short isc_84;	/* gds__null_flag */
          short isc_85;	/* gds__null_flag */
          short isc_86;	/* RDB$MAP_TO_TYPE */
          short isc_87;	/* gds__null_flag */
          short isc_88;	/* gds__null_flag */
          short isc_89;	/* gds__null_flag */
          char  isc_90 [2];	/* RDB$MAP_USING */
   } isc_75;
/**************************************
 *
 *	w r i t e _ m a p p i n g
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each names mapping.
 *
 **************************************/
	isc_req_handle req_handle = 0;
	TEXT temp[GDS_NAME_LEN];

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	if (tdgbl->runtimeODS >= DB_VERSION_DDL12)
	{
		/*FOR (REQUEST_HANDLE req_handle)
			M IN RDB$MAP
			WITH M.RDB$SYSTEM_FLAG EQ 0*/
		{
                if (!req_handle)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle, (short) sizeof(isc_74), (char*) isc_74);
		if (req_handle)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle, (short) 0, (short) 440, &isc_75, (short) 0);
		   if (!isc_75.isc_83 || isc_status [1]) break;

			put(tdgbl, rec_mapping);
			const SSHORT l = PUT_TEXT(att_map_name, /*M.RDB$MAP_NAME*/
								isc_75.isc_82);
			PUT_TEXT(att_map_using, /*M.RDB$MAP_USING*/
						isc_75.isc_90);

			if (!/*M.RDB$MAP_PLUGIN.NULL*/
			     isc_75.isc_89)
				PUT_TEXT(att_map_plugin, /*M.RDB$MAP_PLUGIN*/
							 isc_75.isc_81);

			if (!/*M.RDB$MAP_DB.NULL*/
			     isc_75.isc_88)
				PUT_TEXT(att_map_db, /*M.RDB$MAP_DB*/
						     isc_75.isc_80);

			PUT_TEXT(att_map_from_type, /*M.RDB$MAP_FROM_TYPE*/
						    isc_75.isc_79);

			if (!/*M.RDB$MAP_FROM.NULL*/
			     isc_75.isc_87)
				PUT_TEXT(att_map_from, /*M.RDB$MAP_FROM*/
						       isc_75.isc_78);

			put_int32(att_map_to_type, /*M.RDB$MAP_TO_TYPE*/
						   isc_75.isc_86);

			if (!/*M.RDB$MAP_TO.NULL*/
			     isc_75.isc_85)
				PUT_TEXT(att_map_to, /*M.RDB$MAP_TO*/
						     isc_75.isc_77);

			if (!/*M.RDB$DESCRIPTION.NULL*/
			     isc_75.isc_84)
				put_source_blob(att_map_description, att_map_description, /*M.RDB$DESCRIPTION*/
											  isc_75.isc_76);

			put(tdgbl, att_end);

			MISC_terminate (/*M.RDB$MAP_NAME*/
					isc_75.isc_82, temp, l, sizeof(temp));
			BURP_verbose (297, temp);
			// msg 297 writing mapping for %s

		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else if (tdgbl->runtimeODS >= DB_VERSION_DDL11_2)
	{
		/*FOR (REQUEST_HANDLE req_handle)
			X IN RDB$ROLES
			WITH X.RDB$ROLE_NAME EQ ADMIN_ROLE*/
		{
                if (!req_handle)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle, (short) sizeof(isc_68), (char*) isc_68);
		isc_vtov ((const char*) ADMIN_ROLE, (char*) isc_69.isc_70, 32);
		if (req_handle)
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &req_handle, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_69, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle, (short) 1, (short) 4, &isc_71, (short) 0);
		   if (!isc_71.isc_72 || isc_status [1]) break;

			if (/*X.RDB$SYSTEM_FLAG*/
			    isc_71.isc_73 == ROLE_FLAG_DBO)
			{
				put(tdgbl, rec_mapping);
				//put_text(att_map_os, DOMAIN-ADMINS, strlen(DOMAIN-ADMINS) + 1);
				//put_text(att_map_role, ADMIN-ROLE, strlen(ADMIN-ROLE) + 1);
				put_text(att_auto_map_role, ADMIN_ROLE, strlen(ADMIN_ROLE) + 1);
				put(tdgbl, att_end);
				BURP_verbose (297, ADMIN_ROLE);
				// msg 297 writing mapping for @1
			}

		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}

	MISC_release_request_silent(req_handle);
}


void write_triggers()
{
   struct isc_31_struct {
          ISC_QUAD isc_32;	/* RDB$DESCRIPTION */
          ISC_QUAD isc_33;	/* RDB$TRIGGER_SOURCE */
          ISC_QUAD isc_34;	/* RDB$TRIGGER_BLR */
          ISC_INT64 isc_35;	/* RDB$TRIGGER_TYPE */
          char  isc_36 [32];	/* RDB$RELATION_NAME */
          char  isc_37 [32];	/* RDB$TRIGGER_NAME */
          short isc_38;	/* isc_utility */
          short isc_39;	/* gds__null_flag */
          short isc_40;	/* RDB$FLAGS */
          short isc_41;	/* RDB$TRIGGER_INACTIVE */
          short isc_42;	/* RDB$SYSTEM_FLAG */
          short isc_43;	/* RDB$TRIGGER_SEQUENCE */
          short isc_44;	/* gds__null_flag */
   } isc_31;
   struct isc_46_struct {
          char  isc_47 [256];	/* RDB$ENTRYPOINT */
          char  isc_48 [32];	/* RDB$ENGINE_NAME */
          ISC_QUAD isc_49;	/* RDB$DEBUG_INFO */
          ISC_QUAD isc_50;	/* RDB$DESCRIPTION */
          ISC_QUAD isc_51;	/* RDB$TRIGGER_SOURCE */
          ISC_QUAD isc_52;	/* RDB$TRIGGER_BLR */
          ISC_INT64 isc_53;	/* RDB$TRIGGER_TYPE */
          char  isc_54 [32];	/* RDB$RELATION_NAME */
          char  isc_55 [32];	/* RDB$TRIGGER_NAME */
          short isc_56;	/* isc_utility */
          short isc_57;	/* gds__null_flag */
          short isc_58;	/* gds__null_flag */
          short isc_59;	/* gds__null_flag */
          short isc_60;	/* gds__null_flag */
          short isc_61;	/* RDB$VALID_BLR */
          short isc_62;	/* gds__null_flag */
          short isc_63;	/* RDB$FLAGS */
          short isc_64;	/* RDB$TRIGGER_INACTIVE */
          short isc_65;	/* RDB$SYSTEM_FLAG */
          short isc_66;	/* RDB$TRIGGER_SEQUENCE */
          short isc_67;	/* gds__null_flag */
   } isc_46;
/**************************************
 *
 *	w r i t e _ t r i g g e r s
 *
 **************************************
 *
 * Functional description
 * 	write the triggers in rdb$triggers
 *
 **************************************/
	TEXT temp[GDS_NAME_LEN];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	// if we have all capabilities, use the first request to get the
	// most performance out of the latest engine; if we don't
	// have one of the capabilities we must use the second set of
	// requests--this requires more code but it is well worth it
	// for the performance benefits, especially remotely--deej

	if (tdgbl->runtimeODS >= DB_VERSION_DDL11_1)
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$TRIGGERS WITH
			X.RDB$SYSTEM_FLAG NE 1 OR
			X.RDB$SYSTEM_FLAG MISSING*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_45), (char*) isc_45);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 416, &isc_46, (short) 0);
		   if (!isc_46.isc_56 || isc_status [1]) break;

			put(tdgbl, rec_trigger);
			const SSHORT l = PUT_TEXT (att_trig_name, /*X.RDB$TRIGGER_NAME*/
								  isc_46.isc_55);
			MISC_terminate (/*X.RDB$TRIGGER_NAME*/
					isc_46.isc_55, temp, l, sizeof(temp));
			BURP_verbose (156, temp);
			// msg 156   writing trigger %s

			if (!/*X.RDB$RELATION_NAME.NULL*/
			     isc_46.isc_67)
				PUT_TEXT (att_trig_relation_name, /*X.RDB$RELATION_NAME*/
								  isc_46.isc_54);

			put_int32 (att_trig_sequence, /*X.RDB$TRIGGER_SEQUENCE*/
						      isc_46.isc_66);

			if (/*X.RDB$TRIGGER_TYPE*/
			    isc_46.isc_53 >= SLONG_MIN && /*X.RDB$TRIGGER_TYPE*/
		 isc_46.isc_53 <= SLONG_MAX)
				put_int32 (att_trig_type, (SLONG) /*X.RDB$TRIGGER_TYPE*/
								  isc_46.isc_53);
			else
				put_int64 (att_trig_type2, /*X.RDB$TRIGGER_TYPE*/
							   isc_46.isc_53);

			put_blr_blob (att_trig_blr, /*X.RDB$TRIGGER_BLR*/
						    isc_46.isc_52);
			put_source_blob (att_trig_source2, att_trig_source, /*X.RDB$TRIGGER_SOURCE*/
									    isc_46.isc_51);
			put_source_blob (att_trig_description2, att_trig_description, /*X.RDB$DESCRIPTION*/
										      isc_46.isc_50);
			put_int32 (att_trig_system_flag, /*X.RDB$SYSTEM_FLAG*/
							 isc_46.isc_65);
			put_int32 (att_trig_inactive, /*X.RDB$TRIGGER_INACTIVE*/
						      isc_46.isc_64);

			if (!/*X.RDB$FLAGS.NULL*/
			     isc_46.isc_62)
				put_int32 (att_trig_flags, /*X.RDB$FLAGS*/
							   isc_46.isc_63);

			if (!/*X.RDB$VALID_BLR.NULL*/
			     isc_46.isc_60)
				put_int32 (att_trig_valid_blr, /*X.RDB$VALID_BLR*/
							       isc_46.isc_61);

			if (!/*X.RDB$DEBUG_INFO.NULL*/
			     isc_46.isc_59)
				put_blr_blob (att_trig_debug_info, /*X.RDB$DEBUG_INFO*/
								   isc_46.isc_49);

			if (!/*X.RDB$ENGINE_NAME.NULL*/
			     isc_46.isc_58)
				PUT_TEXT(att_trig_engine_name, /*X.RDB$ENGINE_NAME*/
							       isc_46.isc_48);

			if (!/*X.RDB$ENTRYPOINT.NULL*/
			     isc_46.isc_57)
				PUT_TEXT(att_trig_entrypoint, /*X.RDB$ENTRYPOINT*/
							      isc_46.isc_47);

			put(tdgbl, att_end);

		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR (REQUEST_HANDLE req_handle1)
			X IN RDB$TRIGGERS WITH
			X.RDB$SYSTEM_FLAG NE 1 OR
			X.RDB$SYSTEM_FLAG MISSING*/
		{
                if (!req_handle1)
                   isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_30), (char*) isc_30);
		if (req_handle1)
                   isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 110, &isc_31, (short) 0);
		   if (!isc_31.isc_38 || isc_status [1]) break;

			put(tdgbl, rec_trigger);
			const SSHORT l = PUT_TEXT (att_trig_name, /*X.RDB$TRIGGER_NAME*/
								  isc_31.isc_37);
			MISC_terminate (/*X.RDB$TRIGGER_NAME*/
					isc_31.isc_37, temp, l, sizeof(temp));
			BURP_verbose (156, temp);
			// msg 156   writing trigger %s

			if (!/*X.RDB$RELATION_NAME.NULL*/
			     isc_31.isc_44)
				PUT_TEXT (att_trig_relation_name, /*X.RDB$RELATION_NAME*/
								  isc_31.isc_36);

			put_int32 (att_trig_sequence, /*X.RDB$TRIGGER_SEQUENCE*/
						      isc_31.isc_43);
			put_int32 (att_trig_type, /*X.RDB$TRIGGER_TYPE*/
						  isc_31.isc_35);
			put_blr_blob (att_trig_blr, /*X.RDB$TRIGGER_BLR*/
						    isc_31.isc_34);
			put_source_blob (att_trig_source2, att_trig_source, /*X.RDB$TRIGGER_SOURCE*/
									    isc_31.isc_33);
			put_source_blob (att_trig_description2, att_trig_description, /*X.RDB$DESCRIPTION*/
										      isc_31.isc_32);
			put_int32 (att_trig_system_flag, /*X.RDB$SYSTEM_FLAG*/
							 isc_31.isc_42);
			put_int32 (att_trig_inactive, /*X.RDB$TRIGGER_INACTIVE*/
						      isc_31.isc_41);

			if (!/*X.RDB$FLAGS.NULL*/
			     isc_31.isc_39)
				put_int32 (att_trig_flags, /*X.RDB$FLAGS*/
							   isc_31.isc_40);

			put(tdgbl, att_end);

		/*END_FOR;*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			general_on_error();
		/*END_ERROR;*/
		   }
		}
	}

	MISC_release_request_silent(req_handle1);
}


void write_trigger_messages()
{
   struct isc_25_struct {
          char  isc_26 [1024];	/* RDB$MESSAGE */
          char  isc_27 [32];	/* RDB$TRIGGER_NAME */
          short isc_28;	/* isc_utility */
          short isc_29;	/* RDB$MESSAGE_NUMBER */
   } isc_25;
/**************************************
 *
 *	w r i t e _ t r i g g e r _ m e s s a g e s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each trigger message.
 *
 **************************************/
	TEXT temp[GDS_NAME_LEN];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	/*FOR (REQUEST_HANDLE req_handle1)
		T IN RDB$TRIGGERS CROSS X IN RDB$TRIGGER_MESSAGES
		OVER RDB$TRIGGER_NAME
		WITH T.RDB$SYSTEM_FLAG NE 1 OR T.RDB$SYSTEM_FLAG MISSING*/
	{
        if (!req_handle1)
           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_24), (char*) isc_24);
	if (req_handle1)
           isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 1060, &isc_25, (short) 0);
	   if (!isc_25.isc_28 || isc_status [1]) break;

		put(tdgbl, rec_trigger_message);
		const SSHORT l = PUT_TEXT (att_trigmsg_name, /*X.RDB$TRIGGER_NAME*/
							     isc_25.isc_27);
		MISC_terminate (/*X.RDB$TRIGGER_NAME*/
				isc_25.isc_27, temp, l, sizeof(temp));
		BURP_verbose (157, temp);
		// msg 157 writing trigger message for *s
		put_int32 (att_trigmsg_number, /*X.RDB$MESSAGE_NUMBER*/
					       isc_25.isc_29);
		PUT_MESSAGE (att_trigmsg_text, att_end, /*X.RDB$MESSAGE*/
							isc_25.isc_26);
		put(tdgbl, att_end);
	/*END_FOR;*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	MISC_release_request_silent(req_handle1);
}


void write_types()
{
   struct isc_17_struct {
          ISC_QUAD isc_18;	/* RDB$DESCRIPTION */
          char  isc_19 [32];	/* RDB$FIELD_NAME */
          char  isc_20 [32];	/* RDB$TYPE_NAME */
          short isc_21;	/* isc_utility */
          short isc_22;	/* RDB$SYSTEM_FLAG */
          short isc_23;	/* RDB$TYPE */
   } isc_17;
/**************************************
 *
 *	w r i t e _ t y p e s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each type.
 *
 **************************************/
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	/*FOR (REQUEST_HANDLE req_handle1)
		X IN RDB$TYPES WITH X.RDB$SYSTEM_FLAG NE 1 OR
		X.RDB$SYSTEM_FLAG MISSING*/
	{
        if (!req_handle1)
           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_16), (char*) isc_16);
	if (req_handle1)
           isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 78, &isc_17, (short) 0);
	   if (!isc_17.isc_21 || isc_status [1]) break;
		put(tdgbl, rec_system_type);
		PUT_TEXT (att_type_name, /*X.RDB$TYPE_NAME*/
					 isc_17.isc_20);
		PUT_TEXT (att_type_field_name, /*X.RDB$FIELD_NAME*/
					       isc_17.isc_19);
		BURP_verbose (160, SafeArg() << /*X.RDB$TYPE_NAME*/
						isc_17.isc_20 << /*X.RDB$FIELD_NAME*/
    isc_17.isc_19);
		// msg 160 writing type %s for field %s
		put_int32 (att_type_type, /*X.RDB$TYPE*/
					  isc_17.isc_23);
		put_source_blob (att_type_description2, att_type_description, /*X.RDB$DESCRIPTION*/
									      isc_17.isc_18);
		if (/*X.RDB$SYSTEM_FLAG*/
		    isc_17.isc_22)
			put_int32 (att_type_system_flag, /*X.RDB$SYSTEM_FLAG*/
							 isc_17.isc_22);
		put(tdgbl, att_end);
	/*END_FOR;*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	MISC_release_request_silent(req_handle1);
}


void write_user_privileges()
{
   struct isc_5_struct {
          char  isc_6 [32];	/* RDB$FIELD_NAME */
          char  isc_7 [32];	/* RDB$RELATION_NAME */
          char  isc_8 [32];	/* RDB$GRANTOR */
          char  isc_9 [32];	/* RDB$USER */
          short isc_10;	/* isc_utility */
          short isc_11;	/* RDB$OBJECT_TYPE */
          short isc_12;	/* RDB$USER_TYPE */
          short isc_13;	/* gds__null_flag */
          short isc_14;	/* RDB$GRANT_OPTION */
          char  isc_15 [7];	/* RDB$PRIVILEGE */
   } isc_5;
/**************************************
 *
 *	w r i t e _ u s e r _ p r i v i l e g e s
 *
 **************************************
 *
 * Functional description
 * 	write a record in the burp file for
 *	each user privilege.
 *
 **************************************/
	TEXT temp[GDS_NAME_LEN];
	isc_req_handle req_handle1 = 0;

	BurpGlobals* tdgbl = BurpGlobals::getSpecific();

	/*FOR (REQUEST_HANDLE req_handle1)
		X IN RDB$USER_PRIVILEGES*/
	{
        if (!req_handle1)
           isc_compile_request (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &req_handle1, (short) sizeof(isc_4), (char*) isc_4);
	if (req_handle1)
           isc_start_request (isc_status, (FB_API_HANDLE*) &req_handle1, (FB_API_HANDLE*) &gds_trans, (short) 0);
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &req_handle1, (short) 0, (short) 145, &isc_5, (short) 0);
	   if (!isc_5.isc_10 || isc_status [1]) break;
		put(tdgbl, rec_user_privilege);
		const SSHORT l = PUT_TEXT (att_priv_user, /*X.RDB$USER*/
							  isc_5.isc_9);
		MISC_terminate (/*X.RDB$USER*/
				isc_5.isc_9, temp, l, sizeof(temp));
		BURP_verbose (152, temp);
		// msg 152 writing privilege for user %s
		PUT_TEXT (att_priv_grantor, /*X.RDB$GRANTOR*/
					    isc_5.isc_8);
		PUT_TEXT (att_priv_privilege, /*X.RDB$PRIVILEGE*/
					      isc_5.isc_15);
		put_int32 (att_priv_grant_option, /*X.RDB$GRANT_OPTION*/
						  isc_5.isc_14);
		PUT_TEXT (att_priv_object_name, /*X.RDB$RELATION_NAME*/
						isc_5.isc_7);
		if (!/*X.RDB$FIELD_NAME.NULL*/
		     isc_5.isc_13)
		   PUT_TEXT (att_priv_field_name, /*X.RDB$FIELD_NAME*/
						  isc_5.isc_6);
		put_int32 (att_priv_user_type, /*X.RDB$USER_TYPE*/
					       isc_5.isc_12);
		put_int32 (att_priv_obj_type, /*X.RDB$OBJECT_TYPE*/
					      isc_5.isc_11);
		put(tdgbl, att_end);
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		general_on_error();
	/*END_ERROR;*/
	   }
	}

	MISC_release_request_silent(req_handle1);
}

} // namespace

