# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fs', [dirname(__file__)])
        except ImportError:
            import _fs
            return _fs
        if fp is not None:
            try:
                _mod = imp.load_module('_fs', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fs = swig_import_helper()
    del swig_import_helper
else:
    import _fs
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

def _copy_metadata_deep(value, old_value):
  """Copy all attributes of old_value into value, recursively traversing
  lists and dicts if needed."""
  if value is None or old_value is None or value is old_value: return
  
  if isinstance(value, dict):
    for k, v in value.iteritems():
      _copy_metadata_deep(v, old_value[k])
  elif isinstance(value, list):
    for v, old_v in zip(value, old_value):
      _copy_metadata_deep(v, old_v)
  else:
    try:
      value.__dict__.update(old_value.__dict__)
    except AttributeError:
      pass
      
def _assert_valid_deep(value):
  """Assert value's validity, recursively traversing lists and dicts."""
  if isinstance(value, dict):
    for v in value.itervalues():
      _assert_valid_deep(v)
  elif isinstance(value, list):
    for v in value:
      _assert_valid_deep(v)
  else:
    if hasattr(value, "assert_valid"):
      value.assert_valid()

import core
import delta

def svn_fs_version():
  """svn_fs_version() -> svn_version_t"""
  return _fs.svn_fs_version()
SVN_FS_CONFIG_BDB_TXN_NOSYNC = _fs.SVN_FS_CONFIG_BDB_TXN_NOSYNC
SVN_FS_CONFIG_BDB_LOG_AUTOREMOVE = _fs.SVN_FS_CONFIG_BDB_LOG_AUTOREMOVE
SVN_FS_CONFIG_FSFS_CACHE_DELTAS = _fs.SVN_FS_CONFIG_FSFS_CACHE_DELTAS
SVN_FS_CONFIG_FSFS_CACHE_FULLTEXTS = _fs.SVN_FS_CONFIG_FSFS_CACHE_FULLTEXTS
SVN_FS_CONFIG_FS_TYPE = _fs.SVN_FS_CONFIG_FS_TYPE
SVN_FS_TYPE_BDB = _fs.SVN_FS_TYPE_BDB
SVN_FS_TYPE_FSFS = _fs.SVN_FS_TYPE_FSFS
SVN_FS_CONFIG_PRE_1_4_COMPATIBLE = _fs.SVN_FS_CONFIG_PRE_1_4_COMPATIBLE
SVN_FS_CONFIG_PRE_1_5_COMPATIBLE = _fs.SVN_FS_CONFIG_PRE_1_5_COMPATIBLE
SVN_FS_CONFIG_PRE_1_6_COMPATIBLE = _fs.SVN_FS_CONFIG_PRE_1_6_COMPATIBLE

def svn_fs_initialize(*args):
  """svn_fs_initialize(apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_initialize(*args)

def svn_fs_create(*args):
  """svn_fs_create(char path, apr_hash_t fs_config, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_create(*args)

def svn_fs_open(*args):
  """svn_fs_open(char path, apr_hash_t fs_config, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_open(*args)

def svn_fs_upgrade(*args):
  """svn_fs_upgrade(char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_upgrade(*args)

def svn_fs_type(*args):
  """svn_fs_type(char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_type(*args)

def svn_fs_path(*args):
  """svn_fs_path(svn_fs_t fs, apr_pool_t pool) -> char"""
  return _fs.svn_fs_path(*args)

def svn_fs_delete_fs(*args):
  """svn_fs_delete_fs(char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_delete_fs(*args)

def svn_fs_hotcopy(*args):
  """
    svn_fs_hotcopy(char src_path, char dest_path, svn_boolean_t clean, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_hotcopy(*args)

def svn_fs_recover(*args):
  """svn_fs_recover(char path, svn_cancel_func_t cancel_func, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_recover(*args)

def svn_fs_berkeley_logfiles(*args):
  """svn_fs_berkeley_logfiles(char path, svn_boolean_t only_unused, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_berkeley_logfiles(*args)

def svn_fs_new(*args):
  """svn_fs_new(apr_hash_t fs_config, apr_pool_t pool) -> svn_fs_t"""
  return _fs.svn_fs_new(*args)

def svn_fs_create_berkeley(*args):
  """svn_fs_create_berkeley(svn_fs_t fs, char path) -> svn_error_t"""
  return _fs.svn_fs_create_berkeley(*args)

def svn_fs_open_berkeley(*args):
  """svn_fs_open_berkeley(svn_fs_t fs, char path) -> svn_error_t"""
  return _fs.svn_fs_open_berkeley(*args)

def svn_fs_berkeley_path(*args):
  """svn_fs_berkeley_path(svn_fs_t fs, apr_pool_t pool) -> char"""
  return _fs.svn_fs_berkeley_path(*args)

def svn_fs_delete_berkeley(*args):
  """svn_fs_delete_berkeley(char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_delete_berkeley(*args)

def svn_fs_hotcopy_berkeley(*args):
  """
    svn_fs_hotcopy_berkeley(char src_path, char dest_path, svn_boolean_t clean_logs, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_hotcopy_berkeley(*args)

def svn_fs_berkeley_recover(*args):
  """svn_fs_berkeley_recover(char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_berkeley_recover(*args)

def svn_fs_create_access(*args):
  """svn_fs_create_access(char username, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_create_access(*args)

def svn_fs_set_access(*args):
  """svn_fs_set_access(svn_fs_t fs, svn_fs_access_t access_ctx) -> svn_error_t"""
  return _fs.svn_fs_set_access(*args)

def svn_fs_get_access(*args):
  """svn_fs_get_access(svn_fs_t fs) -> svn_error_t"""
  return _fs.svn_fs_get_access(*args)

def svn_fs_access_get_username(*args):
  """svn_fs_access_get_username(svn_fs_access_t access_ctx) -> svn_error_t"""
  return _fs.svn_fs_access_get_username(*args)

def svn_fs_access_add_lock_token2(*args):
  """svn_fs_access_add_lock_token2(svn_fs_access_t access_ctx, char path, char token) -> svn_error_t"""
  return _fs.svn_fs_access_add_lock_token2(*args)

def svn_fs_access_add_lock_token(*args):
  """svn_fs_access_add_lock_token(svn_fs_access_t access_ctx, char token) -> svn_error_t"""
  return _fs.svn_fs_access_add_lock_token(*args)

def svn_fs_compare_ids(*args):
  """svn_fs_compare_ids(svn_fs_id_t a, svn_fs_id_t b) -> int"""
  return _fs.svn_fs_compare_ids(*args)

def svn_fs_check_related(*args):
  """svn_fs_check_related(svn_fs_id_t id1, svn_fs_id_t id2) -> svn_boolean_t"""
  return _fs.svn_fs_check_related(*args)

def svn_fs_parse_id(*args):
  """svn_fs_parse_id(char data, apr_pool_t pool) -> svn_fs_id_t"""
  return _fs.svn_fs_parse_id(*args)

def svn_fs_unparse_id(*args):
  """svn_fs_unparse_id(svn_fs_id_t id, apr_pool_t pool) -> svn_string_t"""
  return _fs.svn_fs_unparse_id(*args)
SVN_FS_TXN_CHECK_OOD = _fs.SVN_FS_TXN_CHECK_OOD
SVN_FS_TXN_CHECK_LOCKS = _fs.SVN_FS_TXN_CHECK_LOCKS

def svn_fs_begin_txn2(*args):
  """
    svn_fs_begin_txn2(svn_fs_t fs, svn_revnum_t rev, apr_uint32_t flags, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_begin_txn2(*args)

def svn_fs_begin_txn(*args):
  """svn_fs_begin_txn(svn_fs_t fs, svn_revnum_t rev, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_begin_txn(*args)

def svn_fs_commit_txn(*args):
  """svn_fs_commit_txn(svn_fs_txn_t txn, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_commit_txn(*args)

def svn_fs_abort_txn(*args):
  """svn_fs_abort_txn(svn_fs_txn_t txn, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_abort_txn(*args)

def svn_fs_purge_txn(*args):
  """svn_fs_purge_txn(svn_fs_t fs, char txn_id, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_purge_txn(*args)

def svn_fs_txn_name(*args):
  """svn_fs_txn_name(svn_fs_txn_t txn, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_txn_name(*args)

def svn_fs_txn_base_revision(*args):
  """svn_fs_txn_base_revision(svn_fs_txn_t txn) -> svn_revnum_t"""
  return _fs.svn_fs_txn_base_revision(*args)

def svn_fs_open_txn(*args):
  """svn_fs_open_txn(svn_fs_t fs, char name, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_open_txn(*args)

def svn_fs_list_transactions(*args):
  """svn_fs_list_transactions(svn_fs_t fs, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_list_transactions(*args)

def svn_fs_txn_prop(*args):
  """svn_fs_txn_prop(svn_fs_txn_t txn, char propname, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_txn_prop(*args)

def svn_fs_txn_proplist(*args):
  """svn_fs_txn_proplist(svn_fs_txn_t txn, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_txn_proplist(*args)

def svn_fs_change_txn_prop(*args):
  """svn_fs_change_txn_prop(svn_fs_txn_t txn, char name, svn_string_t value, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_change_txn_prop(*args)

def svn_fs_change_txn_props(*args):
  """svn_fs_change_txn_props(svn_fs_txn_t txn, apr_array_header_t props, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_change_txn_props(*args)

def svn_fs_revision_root(*args):
  """svn_fs_revision_root(svn_fs_t fs, svn_revnum_t rev, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_revision_root(*args)

def svn_fs_txn_root(*args):
  """svn_fs_txn_root(svn_fs_txn_t txn, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_txn_root(*args)

def svn_fs_close_root(*args):
  """svn_fs_close_root(svn_fs_root_t root)"""
  return _fs.svn_fs_close_root(*args)

def svn_fs_root_fs(*args):
  """svn_fs_root_fs(svn_fs_root_t root) -> svn_fs_t"""
  return _fs.svn_fs_root_fs(*args)

def svn_fs_is_txn_root(*args):
  """svn_fs_is_txn_root(svn_fs_root_t root) -> svn_boolean_t"""
  return _fs.svn_fs_is_txn_root(*args)

def svn_fs_is_revision_root(*args):
  """svn_fs_is_revision_root(svn_fs_root_t root) -> svn_boolean_t"""
  return _fs.svn_fs_is_revision_root(*args)

def svn_fs_txn_root_name(*args):
  """svn_fs_txn_root_name(svn_fs_root_t root, apr_pool_t pool) -> char"""
  return _fs.svn_fs_txn_root_name(*args)

def svn_fs_txn_root_base_revision(*args):
  """svn_fs_txn_root_base_revision(svn_fs_root_t root) -> svn_revnum_t"""
  return _fs.svn_fs_txn_root_base_revision(*args)

def svn_fs_revision_root_revision(*args):
  """svn_fs_revision_root_revision(svn_fs_root_t root) -> svn_revnum_t"""
  return _fs.svn_fs_revision_root_revision(*args)
svn_fs_path_change_modify = _fs.svn_fs_path_change_modify
svn_fs_path_change_add = _fs.svn_fs_path_change_add
svn_fs_path_change_delete = _fs.svn_fs_path_change_delete
svn_fs_path_change_replace = _fs.svn_fs_path_change_replace
svn_fs_path_change_reset = _fs.svn_fs_path_change_reset
class svn_fs_path_change2_t:
    """Proxy of C svn_fs_path_change2_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svn_fs_path_change2_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svn_fs_path_change2_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["node_rev_id"] = _fs.svn_fs_path_change2_t_node_rev_id_set
    __swig_getmethods__["node_rev_id"] = _fs.svn_fs_path_change2_t_node_rev_id_get
    __swig_setmethods__["change_kind"] = _fs.svn_fs_path_change2_t_change_kind_set
    __swig_getmethods__["change_kind"] = _fs.svn_fs_path_change2_t_change_kind_get
    __swig_setmethods__["text_mod"] = _fs.svn_fs_path_change2_t_text_mod_set
    __swig_getmethods__["text_mod"] = _fs.svn_fs_path_change2_t_text_mod_get
    __swig_setmethods__["prop_mod"] = _fs.svn_fs_path_change2_t_prop_mod_set
    __swig_getmethods__["prop_mod"] = _fs.svn_fs_path_change2_t_prop_mod_get
    __swig_setmethods__["node_kind"] = _fs.svn_fs_path_change2_t_node_kind_set
    __swig_getmethods__["node_kind"] = _fs.svn_fs_path_change2_t_node_kind_get
    __swig_setmethods__["copyfrom_known"] = _fs.svn_fs_path_change2_t_copyfrom_known_set
    __swig_getmethods__["copyfrom_known"] = _fs.svn_fs_path_change2_t_copyfrom_known_get
    __swig_setmethods__["copyfrom_rev"] = _fs.svn_fs_path_change2_t_copyfrom_rev_set
    __swig_getmethods__["copyfrom_rev"] = _fs.svn_fs_path_change2_t_copyfrom_rev_get
    __swig_setmethods__["copyfrom_path"] = _fs.svn_fs_path_change2_t_copyfrom_path_set
    __swig_getmethods__["copyfrom_path"] = _fs.svn_fs_path_change2_t_copyfrom_path_get
    def set_parent_pool(self, parent_pool=None):
      """Create a new proxy object for svn_fs_path_change2_t"""
      import libsvn.core, weakref
      self.__dict__["_parent_pool"] = \
        parent_pool or libsvn.core.application_pool;
      if self.__dict__["_parent_pool"]:
        self.__dict__["_is_valid"] = weakref.ref(
          self.__dict__["_parent_pool"]._is_valid)

    def assert_valid(self):
      """Assert that this object is using valid pool memory"""
      if "_is_valid" in self.__dict__:
        assert self.__dict__["_is_valid"](), "Variable has already been deleted"

    def __getattr__(self, name):
      """Get an attribute from this object"""
      self.assert_valid()

      value = _swig_getattr(self, self.__class__, name)



      members = self.__dict__.get("_members")
      if members is not None:
        _copy_metadata_deep(value, members.get(name))
          

      _assert_valid_deep(value)

      return value

    def __setattr__(self, name, value):
      """Set an attribute on this object"""
      self.assert_valid()




      self.__dict__.setdefault("_members",{})[name] = value

      return _swig_setattr(self, self.__class__, name, value)

svn_fs_path_change2_t_swigregister = _fs.svn_fs_path_change2_t_swigregister
svn_fs_path_change2_t_swigregister(svn_fs_path_change2_t)

class svn_fs_path_change_t:
    """Proxy of C svn_fs_path_change_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svn_fs_path_change_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svn_fs_path_change_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["node_rev_id"] = _fs.svn_fs_path_change_t_node_rev_id_set
    __swig_getmethods__["node_rev_id"] = _fs.svn_fs_path_change_t_node_rev_id_get
    __swig_setmethods__["change_kind"] = _fs.svn_fs_path_change_t_change_kind_set
    __swig_getmethods__["change_kind"] = _fs.svn_fs_path_change_t_change_kind_get
    __swig_setmethods__["text_mod"] = _fs.svn_fs_path_change_t_text_mod_set
    __swig_getmethods__["text_mod"] = _fs.svn_fs_path_change_t_text_mod_get
    __swig_setmethods__["prop_mod"] = _fs.svn_fs_path_change_t_prop_mod_set
    __swig_getmethods__["prop_mod"] = _fs.svn_fs_path_change_t_prop_mod_get
    def set_parent_pool(self, parent_pool=None):
      """Create a new proxy object for svn_fs_path_change_t"""
      import libsvn.core, weakref
      self.__dict__["_parent_pool"] = \
        parent_pool or libsvn.core.application_pool;
      if self.__dict__["_parent_pool"]:
        self.__dict__["_is_valid"] = weakref.ref(
          self.__dict__["_parent_pool"]._is_valid)

    def assert_valid(self):
      """Assert that this object is using valid pool memory"""
      if "_is_valid" in self.__dict__:
        assert self.__dict__["_is_valid"](), "Variable has already been deleted"

    def __getattr__(self, name):
      """Get an attribute from this object"""
      self.assert_valid()

      value = _swig_getattr(self, self.__class__, name)



      members = self.__dict__.get("_members")
      if members is not None:
        _copy_metadata_deep(value, members.get(name))
          

      _assert_valid_deep(value)

      return value

    def __setattr__(self, name, value):
      """Set an attribute on this object"""
      self.assert_valid()




      self.__dict__.setdefault("_members",{})[name] = value

      return _swig_setattr(self, self.__class__, name, value)

svn_fs_path_change_t_swigregister = _fs.svn_fs_path_change_t_swigregister
svn_fs_path_change_t_swigregister(svn_fs_path_change_t)


def svn_fs_path_change2_create(*args):
  """
    svn_fs_path_change2_create(svn_fs_id_t node_rev_id, svn_fs_path_change_kind_t change_kind, 
        apr_pool_t pool) -> svn_fs_path_change2_t
    """
  return _fs.svn_fs_path_change2_create(*args)

def svn_fs_paths_changed2(*args):
  """svn_fs_paths_changed2(svn_fs_root_t root, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_paths_changed2(*args)

def svn_fs_paths_changed(*args):
  """svn_fs_paths_changed(svn_fs_root_t root, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_paths_changed(*args)

def svn_fs_check_path(*args):
  """svn_fs_check_path(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_check_path(*args)

def svn_fs_node_history(*args):
  """svn_fs_node_history(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_node_history(*args)

def svn_fs_history_prev(*args):
  """
    svn_fs_history_prev(svn_fs_history_t history, svn_boolean_t cross_copies, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_history_prev(*args)

def svn_fs_history_location(*args):
  """svn_fs_history_location(svn_fs_history_t history, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_history_location(*args)

def svn_fs_is_dir(*args):
  """svn_fs_is_dir(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_is_dir(*args)

def svn_fs_is_file(*args):
  """svn_fs_is_file(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_is_file(*args)

def svn_fs_node_id(*args):
  """svn_fs_node_id(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_node_id(*args)

def svn_fs_node_created_rev(*args):
  """svn_fs_node_created_rev(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_node_created_rev(*args)

def svn_fs_node_origin_rev(*args):
  """svn_fs_node_origin_rev(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_node_origin_rev(*args)

def svn_fs_node_created_path(*args):
  """svn_fs_node_created_path(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_node_created_path(*args)

def svn_fs_node_prop(*args):
  """svn_fs_node_prop(svn_fs_root_t root, char path, char propname, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_node_prop(*args)

def svn_fs_node_proplist(*args):
  """svn_fs_node_proplist(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_node_proplist(*args)

def svn_fs_change_node_prop(*args):
  """
    svn_fs_change_node_prop(svn_fs_root_t root, char path, char name, svn_string_t value, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_change_node_prop(*args)

def svn_fs_props_changed(*args):
  """
    svn_fs_props_changed(svn_fs_root_t root1, char path1, svn_fs_root_t root2, 
        char path2, apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_props_changed(*args)

def svn_fs_copied_from(*args):
  """svn_fs_copied_from(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_copied_from(*args)

def svn_fs_closest_copy(*args):
  """svn_fs_closest_copy(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_closest_copy(*args)

def svn_fs_get_mergeinfo(*args):
  """
    svn_fs_get_mergeinfo(svn_fs_root_t root, apr_array_header_t paths, svn_mergeinfo_inheritance_t inherit, 
        svn_boolean_t include_descendants, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_get_mergeinfo(*args)

def svn_fs_merge(*args):
  """
    svn_fs_merge(svn_fs_root_t source_root, char source_path, svn_fs_root_t target_root, 
        char target_path, svn_fs_root_t ancestor_root, 
        char ancestor_path, apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_merge(*args)
class svn_fs_dirent_t:
    """Proxy of C svn_fs_dirent_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svn_fs_dirent_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svn_fs_dirent_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _fs.svn_fs_dirent_t_name_set
    __swig_getmethods__["name"] = _fs.svn_fs_dirent_t_name_get
    __swig_setmethods__["id"] = _fs.svn_fs_dirent_t_id_set
    __swig_getmethods__["id"] = _fs.svn_fs_dirent_t_id_get
    __swig_setmethods__["kind"] = _fs.svn_fs_dirent_t_kind_set
    __swig_getmethods__["kind"] = _fs.svn_fs_dirent_t_kind_get
    def set_parent_pool(self, parent_pool=None):
      """Create a new proxy object for svn_fs_dirent_t"""
      import libsvn.core, weakref
      self.__dict__["_parent_pool"] = \
        parent_pool or libsvn.core.application_pool;
      if self.__dict__["_parent_pool"]:
        self.__dict__["_is_valid"] = weakref.ref(
          self.__dict__["_parent_pool"]._is_valid)

    def assert_valid(self):
      """Assert that this object is using valid pool memory"""
      if "_is_valid" in self.__dict__:
        assert self.__dict__["_is_valid"](), "Variable has already been deleted"

    def __getattr__(self, name):
      """Get an attribute from this object"""
      self.assert_valid()

      value = _swig_getattr(self, self.__class__, name)



      members = self.__dict__.get("_members")
      if members is not None:
        _copy_metadata_deep(value, members.get(name))
          

      _assert_valid_deep(value)

      return value

    def __setattr__(self, name, value):
      """Set an attribute on this object"""
      self.assert_valid()




      self.__dict__.setdefault("_members",{})[name] = value

      return _swig_setattr(self, self.__class__, name, value)

svn_fs_dirent_t_swigregister = _fs.svn_fs_dirent_t_swigregister
svn_fs_dirent_t_swigregister(svn_fs_dirent_t)


def svn_fs_dir_entries(*args):
  """svn_fs_dir_entries(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_dir_entries(*args)

def svn_fs_make_dir(*args):
  """svn_fs_make_dir(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_make_dir(*args)

def svn_fs_delete(*args):
  """svn_fs_delete(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_delete(*args)

def svn_fs_copy(*args):
  """
    svn_fs_copy(svn_fs_root_t from_root, char from_path, svn_fs_root_t to_root, 
        char to_path, apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_copy(*args)

def svn_fs_revision_link(*args):
  """
    svn_fs_revision_link(svn_fs_root_t from_root, svn_fs_root_t to_root, char path, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_revision_link(*args)

def svn_fs_file_length(*args):
  """svn_fs_file_length(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_file_length(*args)

def svn_fs_file_checksum(*args):
  """
    svn_fs_file_checksum(svn_checksum_kind_t kind, svn_fs_root_t root, char path, 
        svn_boolean_t force, apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_file_checksum(*args)

def svn_fs_file_md5_checksum(*args):
  """svn_fs_file_md5_checksum(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_file_md5_checksum(*args)

def svn_fs_file_contents(*args):
  """svn_fs_file_contents(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_file_contents(*args)

def svn_fs_make_file(*args):
  """svn_fs_make_file(svn_fs_root_t root, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_make_file(*args)

def svn_fs_apply_textdelta(*args):
  """
    svn_fs_apply_textdelta(svn_fs_root_t root, char path, char base_checksum, 
        char result_checksum, apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_apply_textdelta(*args)

def svn_fs_apply_text(*args):
  """
    svn_fs_apply_text(svn_fs_root_t root, char path, char result_checksum, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_apply_text(*args)

def svn_fs_contents_changed(*args):
  """
    svn_fs_contents_changed(svn_fs_root_t root1, char path1, svn_fs_root_t root2, 
        char path2, apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_contents_changed(*args)

def svn_fs_youngest_rev(*args):
  """svn_fs_youngest_rev(svn_fs_t fs, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_youngest_rev(*args)

def svn_fs_deltify_revision(*args):
  """svn_fs_deltify_revision(svn_fs_t fs, svn_revnum_t revision, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_deltify_revision(*args)

def svn_fs_revision_prop(*args):
  """svn_fs_revision_prop(svn_fs_t fs, svn_revnum_t rev, char propname, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_revision_prop(*args)

def svn_fs_revision_proplist(*args):
  """svn_fs_revision_proplist(svn_fs_t fs, svn_revnum_t rev, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_revision_proplist(*args)

def svn_fs_change_rev_prop2(*args):
  """
    svn_fs_change_rev_prop2(svn_fs_t fs, svn_revnum_t rev, char name, svn_string_t old_value_p, 
        svn_string_t value, apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_change_rev_prop2(*args)

def svn_fs_change_rev_prop(*args):
  """
    svn_fs_change_rev_prop(svn_fs_t fs, svn_revnum_t rev, char name, svn_string_t value, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_change_rev_prop(*args)

def svn_fs_get_file_delta_stream(*args):
  """
    svn_fs_get_file_delta_stream(svn_fs_root_t source_root, char source_path, svn_fs_root_t target_root, 
        char target_path, apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_get_file_delta_stream(*args)

def svn_fs_get_uuid(*args):
  """svn_fs_get_uuid(svn_fs_t fs, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_get_uuid(*args)

def svn_fs_set_uuid(*args):
  """svn_fs_set_uuid(svn_fs_t fs, char uuid, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_set_uuid(*args)

def svn_fs_lock(*args):
  """
    svn_fs_lock(svn_fs_t fs, char path, char token, char comment, svn_boolean_t is_dav_comment, 
        apr_time_t expiration_date, 
        svn_revnum_t current_rev, svn_boolean_t steal_lock, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_lock(*args)

def svn_fs_generate_lock_token(*args):
  """svn_fs_generate_lock_token(svn_fs_t fs, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_generate_lock_token(*args)

def svn_fs_unlock(*args):
  """
    svn_fs_unlock(svn_fs_t fs, char path, char token, svn_boolean_t break_lock, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_unlock(*args)

def svn_fs_get_lock(*args):
  """svn_fs_get_lock(svn_fs_t fs, char path, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_get_lock(*args)

def svn_fs_get_locks2(*args):
  """
    svn_fs_get_locks2(svn_fs_t fs, char path, svn_depth_t depth, svn_fs_get_locks_callback_t get_locks_func, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_get_locks2(*args)

def svn_fs_get_locks(*args):
  """
    svn_fs_get_locks(svn_fs_t fs, char path, svn_fs_get_locks_callback_t get_locks_func, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_get_locks(*args)

def svn_fs_print_modules(*args):
  """svn_fs_print_modules(svn_stringbuf_t output, apr_pool_t pool) -> svn_error_t"""
  return _fs.svn_fs_print_modules(*args)
svn_fs_pack_notify_start = _fs.svn_fs_pack_notify_start
svn_fs_pack_notify_end = _fs.svn_fs_pack_notify_end
svn_fs_pack_notify_start_revprop = _fs.svn_fs_pack_notify_start_revprop
svn_fs_pack_notify_end_revprop = _fs.svn_fs_pack_notify_end_revprop

def svn_fs_pack(*args):
  """
    svn_fs_pack(char db_path, svn_fs_pack_notify_t notify_func, void notify_baton, 
        svn_cancel_func_t cancel_func, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_pack(*args)
class svn_fs_t:
    """Proxy of C svn_fs_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svn_fs_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svn_fs_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def set_parent_pool(self, parent_pool=None):
      """Create a new proxy object for svn_fs_t"""
      import libsvn.core, weakref
      self.__dict__["_parent_pool"] = \
        parent_pool or libsvn.core.application_pool;
      if self.__dict__["_parent_pool"]:
        self.__dict__["_is_valid"] = weakref.ref(
          self.__dict__["_parent_pool"]._is_valid)

    def assert_valid(self):
      """Assert that this object is using valid pool memory"""
      if "_is_valid" in self.__dict__:
        assert self.__dict__["_is_valid"](), "Variable has already been deleted"

    def __getattr__(self, name):
      """Get an attribute from this object"""
      self.assert_valid()

      value = _swig_getattr(self, self.__class__, name)



      members = self.__dict__.get("_members")
      if members is not None:
        _copy_metadata_deep(value, members.get(name))
          

      _assert_valid_deep(value)

      return value

    def __setattr__(self, name, value):
      """Set an attribute on this object"""
      self.assert_valid()




      self.__dict__.setdefault("_members",{})[name] = value

      return _swig_setattr(self, self.__class__, name, value)

svn_fs_t_swigregister = _fs.svn_fs_t_swigregister
svn_fs_t_swigregister(svn_fs_t)

class svn_fs_access_t:
    """Proxy of C svn_fs_access_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svn_fs_access_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svn_fs_access_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def set_parent_pool(self, parent_pool=None):
      """Create a new proxy object for svn_fs_access_t"""
      import libsvn.core, weakref
      self.__dict__["_parent_pool"] = \
        parent_pool or libsvn.core.application_pool;
      if self.__dict__["_parent_pool"]:
        self.__dict__["_is_valid"] = weakref.ref(
          self.__dict__["_parent_pool"]._is_valid)

    def assert_valid(self):
      """Assert that this object is using valid pool memory"""
      if "_is_valid" in self.__dict__:
        assert self.__dict__["_is_valid"](), "Variable has already been deleted"

    def __getattr__(self, name):
      """Get an attribute from this object"""
      self.assert_valid()

      value = _swig_getattr(self, self.__class__, name)



      members = self.__dict__.get("_members")
      if members is not None:
        _copy_metadata_deep(value, members.get(name))
          

      _assert_valid_deep(value)

      return value

    def __setattr__(self, name, value):
      """Set an attribute on this object"""
      self.assert_valid()




      self.__dict__.setdefault("_members",{})[name] = value

      return _swig_setattr(self, self.__class__, name, value)

svn_fs_access_t_swigregister = _fs.svn_fs_access_t_swigregister
svn_fs_access_t_swigregister(svn_fs_access_t)

class svn_fs_id_t:
    """Proxy of C svn_fs_id_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svn_fs_id_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svn_fs_id_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def set_parent_pool(self, parent_pool=None):
      """Create a new proxy object for svn_fs_id_t"""
      import libsvn.core, weakref
      self.__dict__["_parent_pool"] = \
        parent_pool or libsvn.core.application_pool;
      if self.__dict__["_parent_pool"]:
        self.__dict__["_is_valid"] = weakref.ref(
          self.__dict__["_parent_pool"]._is_valid)

    def assert_valid(self):
      """Assert that this object is using valid pool memory"""
      if "_is_valid" in self.__dict__:
        assert self.__dict__["_is_valid"](), "Variable has already been deleted"

    def __getattr__(self, name):
      """Get an attribute from this object"""
      self.assert_valid()

      value = _swig_getattr(self, self.__class__, name)



      members = self.__dict__.get("_members")
      if members is not None:
        _copy_metadata_deep(value, members.get(name))
          

      _assert_valid_deep(value)

      return value

    def __setattr__(self, name, value):
      """Set an attribute on this object"""
      self.assert_valid()




      self.__dict__.setdefault("_members",{})[name] = value

      return _swig_setattr(self, self.__class__, name, value)

svn_fs_id_t_swigregister = _fs.svn_fs_id_t_swigregister
svn_fs_id_t_swigregister(svn_fs_id_t)

class svn_fs_txn_t:
    """Proxy of C svn_fs_txn_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svn_fs_txn_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svn_fs_txn_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def set_parent_pool(self, parent_pool=None):
      """Create a new proxy object for svn_fs_txn_t"""
      import libsvn.core, weakref
      self.__dict__["_parent_pool"] = \
        parent_pool or libsvn.core.application_pool;
      if self.__dict__["_parent_pool"]:
        self.__dict__["_is_valid"] = weakref.ref(
          self.__dict__["_parent_pool"]._is_valid)

    def assert_valid(self):
      """Assert that this object is using valid pool memory"""
      if "_is_valid" in self.__dict__:
        assert self.__dict__["_is_valid"](), "Variable has already been deleted"

    def __getattr__(self, name):
      """Get an attribute from this object"""
      self.assert_valid()

      value = _swig_getattr(self, self.__class__, name)



      members = self.__dict__.get("_members")
      if members is not None:
        _copy_metadata_deep(value, members.get(name))
          

      _assert_valid_deep(value)

      return value

    def __setattr__(self, name, value):
      """Set an attribute on this object"""
      self.assert_valid()




      self.__dict__.setdefault("_members",{})[name] = value

      return _swig_setattr(self, self.__class__, name, value)

svn_fs_txn_t_swigregister = _fs.svn_fs_txn_t_swigregister
svn_fs_txn_t_swigregister(svn_fs_txn_t)

class svn_fs_root_t:
    """Proxy of C svn_fs_root_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svn_fs_root_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svn_fs_root_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def set_parent_pool(self, parent_pool=None):
      """Create a new proxy object for svn_fs_root_t"""
      import libsvn.core, weakref
      self.__dict__["_parent_pool"] = \
        parent_pool or libsvn.core.application_pool;
      if self.__dict__["_parent_pool"]:
        self.__dict__["_is_valid"] = weakref.ref(
          self.__dict__["_parent_pool"]._is_valid)

    def assert_valid(self):
      """Assert that this object is using valid pool memory"""
      if "_is_valid" in self.__dict__:
        assert self.__dict__["_is_valid"](), "Variable has already been deleted"

    def __getattr__(self, name):
      """Get an attribute from this object"""
      self.assert_valid()

      value = _swig_getattr(self, self.__class__, name)



      members = self.__dict__.get("_members")
      if members is not None:
        _copy_metadata_deep(value, members.get(name))
          

      _assert_valid_deep(value)

      return value

    def __setattr__(self, name, value):
      """Set an attribute on this object"""
      self.assert_valid()




      self.__dict__.setdefault("_members",{})[name] = value

      return _swig_setattr(self, self.__class__, name, value)

svn_fs_root_t_swigregister = _fs.svn_fs_root_t_swigregister
svn_fs_root_t_swigregister(svn_fs_root_t)

class svn_fs_history_t:
    """Proxy of C svn_fs_history_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svn_fs_history_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svn_fs_history_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def set_parent_pool(self, parent_pool=None):
      """Create a new proxy object for svn_fs_history_t"""
      import libsvn.core, weakref
      self.__dict__["_parent_pool"] = \
        parent_pool or libsvn.core.application_pool;
      if self.__dict__["_parent_pool"]:
        self.__dict__["_is_valid"] = weakref.ref(
          self.__dict__["_parent_pool"]._is_valid)

    def assert_valid(self):
      """Assert that this object is using valid pool memory"""
      if "_is_valid" in self.__dict__:
        assert self.__dict__["_is_valid"](), "Variable has already been deleted"

    def __getattr__(self, name):
      """Get an attribute from this object"""
      self.assert_valid()

      value = _swig_getattr(self, self.__class__, name)



      members = self.__dict__.get("_members")
      if members is not None:
        _copy_metadata_deep(value, members.get(name))
          

      _assert_valid_deep(value)

      return value

    def __setattr__(self, name, value):
      """Set an attribute on this object"""
      self.assert_valid()




      self.__dict__.setdefault("_members",{})[name] = value

      return _swig_setattr(self, self.__class__, name, value)

svn_fs_history_t_swigregister = _fs.svn_fs_history_t_swigregister
svn_fs_history_t_swigregister(svn_fs_history_t)


def svn_fs_invoke_warning_callback(*args):
  """svn_fs_invoke_warning_callback(svn_fs_warning_callback_t _obj, void baton, svn_error_t err)"""
  return _fs.svn_fs_invoke_warning_callback(*args)

def svn_fs_invoke_get_locks_callback(*args):
  """
    svn_fs_invoke_get_locks_callback(svn_fs_get_locks_callback_t _obj, void baton, svn_lock_t lock, 
        apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_invoke_get_locks_callback(*args)

def svn_fs_invoke_pack_notify(*args):
  """
    svn_fs_invoke_pack_notify(svn_fs_pack_notify_t _obj, void baton, apr_int64_t shard, 
        svn_fs_pack_notify_action_t action, apr_pool_t pool) -> svn_error_t
    """
  return _fs.svn_fs_invoke_pack_notify(*args)
class svn_fs_warning_callback_t:
    """Proxy of C svn_fs_warning_callback_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svn_fs_warning_callback_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svn_fs_warning_callback_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def set_parent_pool(self, parent_pool=None):
      """Create a new proxy object for svn_fs_warning_callback_t"""
      import libsvn.core, weakref
      self.__dict__["_parent_pool"] = \
        parent_pool or libsvn.core.application_pool;
      if self.__dict__["_parent_pool"]:
        self.__dict__["_is_valid"] = weakref.ref(
          self.__dict__["_parent_pool"]._is_valid)

    def assert_valid(self):
      """Assert that this object is using valid pool memory"""
      if "_is_valid" in self.__dict__:
        assert self.__dict__["_is_valid"](), "Variable has already been deleted"

    def __getattr__(self, name):
      """Get an attribute from this object"""
      self.assert_valid()

      value = _swig_getattr(self, self.__class__, name)



      members = self.__dict__.get("_members")
      if members is not None:
        _copy_metadata_deep(value, members.get(name))
          

      _assert_valid_deep(value)

      return value

    def __setattr__(self, name, value):
      """Set an attribute on this object"""
      self.assert_valid()




      self.__dict__.setdefault("_members",{})[name] = value

      return _swig_setattr(self, self.__class__, name, value)

    def __call__(self, *args):
      return svn_fs_invoke_warning_callback(self, *args)

svn_fs_warning_callback_t_swigregister = _fs.svn_fs_warning_callback_t_swigregister
svn_fs_warning_callback_t_swigregister(svn_fs_warning_callback_t)

class svn_fs_get_locks_callback_t:
    """Proxy of C svn_fs_get_locks_callback_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svn_fs_get_locks_callback_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svn_fs_get_locks_callback_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def set_parent_pool(self, parent_pool=None):
      """Create a new proxy object for svn_fs_get_locks_callback_t"""
      import libsvn.core, weakref
      self.__dict__["_parent_pool"] = \
        parent_pool or libsvn.core.application_pool;
      if self.__dict__["_parent_pool"]:
        self.__dict__["_is_valid"] = weakref.ref(
          self.__dict__["_parent_pool"]._is_valid)

    def assert_valid(self):
      """Assert that this object is using valid pool memory"""
      if "_is_valid" in self.__dict__:
        assert self.__dict__["_is_valid"](), "Variable has already been deleted"

    def __getattr__(self, name):
      """Get an attribute from this object"""
      self.assert_valid()

      value = _swig_getattr(self, self.__class__, name)



      members = self.__dict__.get("_members")
      if members is not None:
        _copy_metadata_deep(value, members.get(name))
          

      _assert_valid_deep(value)

      return value

    def __setattr__(self, name, value):
      """Set an attribute on this object"""
      self.assert_valid()




      self.__dict__.setdefault("_members",{})[name] = value

      return _swig_setattr(self, self.__class__, name, value)

    def __call__(self, *args):
      return svn_fs_invoke_get_locks_callback(self, *args)

svn_fs_get_locks_callback_t_swigregister = _fs.svn_fs_get_locks_callback_t_swigregister
svn_fs_get_locks_callback_t_swigregister(svn_fs_get_locks_callback_t)

class svn_fs_pack_notify_t:
    """Proxy of C svn_fs_pack_notify_t struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svn_fs_pack_notify_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svn_fs_pack_notify_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def set_parent_pool(self, parent_pool=None):
      """Create a new proxy object for svn_fs_pack_notify_t"""
      import libsvn.core, weakref
      self.__dict__["_parent_pool"] = \
        parent_pool or libsvn.core.application_pool;
      if self.__dict__["_parent_pool"]:
        self.__dict__["_is_valid"] = weakref.ref(
          self.__dict__["_parent_pool"]._is_valid)

    def assert_valid(self):
      """Assert that this object is using valid pool memory"""
      if "_is_valid" in self.__dict__:
        assert self.__dict__["_is_valid"](), "Variable has already been deleted"

    def __getattr__(self, name):
      """Get an attribute from this object"""
      self.assert_valid()

      value = _swig_getattr(self, self.__class__, name)



      members = self.__dict__.get("_members")
      if members is not None:
        _copy_metadata_deep(value, members.get(name))
          

      _assert_valid_deep(value)

      return value

    def __setattr__(self, name, value):
      """Set an attribute on this object"""
      self.assert_valid()




      self.__dict__.setdefault("_members",{})[name] = value

      return _swig_setattr(self, self.__class__, name, value)

    def __call__(self, *args):
      return svn_fs_invoke_pack_notify(self, *args)

svn_fs_pack_notify_t_swigregister = _fs.svn_fs_pack_notify_t_swigregister
svn_fs_pack_notify_t_swigregister(svn_fs_pack_notify_t)

# This file is compatible with both classic and new-style classes.


