CREATE TEMP TABLE x (
	a serial,
	b int,
	c text not null default 'stuff',
	d text,
	e text
) WITH OIDS;
NOTICE:  CREATE TABLE will create implicit sequence "x_a_seq" for serial column "x.a"
CREATE FUNCTION fn_x_before () RETURNS TRIGGER AS '
  BEGIN
		NEW.e := ''before trigger fired''::text;
		return NEW;
	END;
' LANGUAGE plpgsql;
CREATE FUNCTION fn_x_after () RETURNS TRIGGER AS '
  BEGIN
		UPDATE x set e=''after trigger fired'' where c=''stuff'';
		return NULL;
	END;
' LANGUAGE plpgsql;
CREATE TRIGGER trg_x_after AFTER INSERT ON x
FOR EACH ROW EXECUTE PROCEDURE fn_x_after();
CREATE TRIGGER trg_x_before BEFORE INSERT ON x
FOR EACH ROW EXECUTE PROCEDURE fn_x_before();
COPY x (a, b, c, d, e) from stdin;
COPY x (b, d) from stdin;
COPY x (b, d) from stdin;
COPY x (a, b, c, d, e) from stdin;
-- non-existent column in column list: should fail
COPY x (xyz) from stdin;
ERROR:  column "xyz" of relation "x" does not exist
-- too many columns in column list: should fail
COPY x (a, b, c, d, e, d, c) from stdin;
ERROR:  column "d" specified more than once
-- missing data: should fail
COPY x from stdin;
ERROR:  invalid input syntax for integer: ""
CONTEXT:  COPY x, line 1, column a: ""
COPY x from stdin;
ERROR:  missing data for column "e"
CONTEXT:  COPY x, line 1: "2000	230	23	23"
COPY x from stdin;
ERROR:  missing data for column "e"
CONTEXT:  COPY x, line 1: "2001	231	\N	\N"
-- extra data: should fail
COPY x from stdin;
ERROR:  extra data after last expected column
CONTEXT:  COPY x, line 1: "2002	232	40	50	60	70	80"
-- various COPY options: delimiters, oids, NULL string, encoding
COPY x (b, c, d, e) from stdin with oids delimiter ',' null 'x';
COPY x from stdin WITH DELIMITER AS ';' NULL AS '';
COPY x from stdin WITH DELIMITER AS ':' NULL AS E'\\X' ENCODING 'sql_ascii';
-- check results of copy in
SELECT * FROM x;
   a   | b  |     c      |   d    |          e           
-------+----+------------+--------+----------------------
  9999 |    | \N         | NN     | before trigger fired
 10000 | 21 | 31         | 41     | before trigger fired
 10001 | 22 | 32         | 42     | before trigger fired
 10002 | 23 | 33         | 43     | before trigger fired
 10003 | 24 | 34         | 44     | before trigger fired
 10004 | 25 | 35         | 45     | before trigger fired
 10005 | 26 | 36         | 46     | before trigger fired
     6 |    | 45         | 80     | before trigger fired
     7 |    | x          | \x     | before trigger fired
     8 |    | ,          | \,     | before trigger fired
  3000 |    | c          |        | before trigger fired
  4000 |    | C          |        | before trigger fired
  4001 |  1 | empty      |        | before trigger fired
  4002 |  2 | null       |        | before trigger fired
  4003 |  3 | Backslash  | \      | before trigger fired
  4004 |  4 | BackslashX | \X     | before trigger fired
  4005 |  5 | N          | N      | before trigger fired
  4006 |  6 | BackslashN | \N     | before trigger fired
  4007 |  7 | XX         | XX     | before trigger fired
  4008 |  8 | Delimiter  | :      | before trigger fired
     1 |  1 | stuff      | test_1 | after trigger fired
     2 |  2 | stuff      | test_2 | after trigger fired
     3 |  3 | stuff      | test_3 | after trigger fired
     4 |  4 | stuff      | test_4 | after trigger fired
     5 |  5 | stuff      | test_5 | after trigger fired
(25 rows)

-- COPY w/ oids on a table w/o oids should fail
CREATE TABLE no_oids (
	a	int,
	b	int
) WITHOUT OIDS;
INSERT INTO no_oids (a, b) VALUES (5, 10);
INSERT INTO no_oids (a, b) VALUES (20, 30);
-- should fail
COPY no_oids FROM stdin WITH OIDS;
ERROR:  table "no_oids" does not have OIDs
COPY no_oids TO stdout WITH OIDS;
ERROR:  table "no_oids" does not have OIDs
-- check copy out
COPY x TO stdout;
9999	\N	\\N	NN	before trigger fired
10000	21	31	41	before trigger fired
10001	22	32	42	before trigger fired
10002	23	33	43	before trigger fired
10003	24	34	44	before trigger fired
10004	25	35	45	before trigger fired
10005	26	36	46	before trigger fired
6	\N	45	80	before trigger fired
7	\N	x	\\x	before trigger fired
8	\N	,	\\,	before trigger fired
3000	\N	c	\N	before trigger fired
4000	\N	C	\N	before trigger fired
4001	1	empty		before trigger fired
4002	2	null	\N	before trigger fired
4003	3	Backslash	\\	before trigger fired
4004	4	BackslashX	\\X	before trigger fired
4005	5	N	N	before trigger fired
4006	6	BackslashN	\\N	before trigger fired
4007	7	XX	XX	before trigger fired
4008	8	Delimiter	:	before trigger fired
1	1	stuff	test_1	after trigger fired
2	2	stuff	test_2	after trigger fired
3	3	stuff	test_3	after trigger fired
4	4	stuff	test_4	after trigger fired
5	5	stuff	test_5	after trigger fired
COPY x (c, e) TO stdout;
\\N	before trigger fired
31	before trigger fired
32	before trigger fired
33	before trigger fired
34	before trigger fired
35	before trigger fired
36	before trigger fired
45	before trigger fired
x	before trigger fired
,	before trigger fired
c	before trigger fired
C	before trigger fired
empty	before trigger fired
null	before trigger fired
Backslash	before trigger fired
BackslashX	before trigger fired
N	before trigger fired
BackslashN	before trigger fired
XX	before trigger fired
Delimiter	before trigger fired
stuff	after trigger fired
stuff	after trigger fired
stuff	after trigger fired
stuff	after trigger fired
stuff	after trigger fired
COPY x (b, e) TO stdout WITH NULL 'I''m null';
I'm null	before trigger fired
21	before trigger fired
22	before trigger fired
23	before trigger fired
24	before trigger fired
25	before trigger fired
26	before trigger fired
I'm null	before trigger fired
I'm null	before trigger fired
I'm null	before trigger fired
I'm null	before trigger fired
I'm null	before trigger fired
1	before trigger fired
2	before trigger fired
3	before trigger fired
4	before trigger fired
5	before trigger fired
6	before trigger fired
7	before trigger fired
8	before trigger fired
1	after trigger fired
2	after trigger fired
3	after trigger fired
4	after trigger fired
5	after trigger fired
CREATE TEMP TABLE y (
	col1 text,
	col2 text
);
INSERT INTO y VALUES ('Jackson, Sam', E'\\h');
INSERT INTO y VALUES ('It is "perfect".',E'\t');
INSERT INTO y VALUES ('', NULL);
COPY y TO stdout WITH CSV;
"Jackson, Sam",\h
"It is ""perfect"".",	
"",
COPY y TO stdout WITH CSV QUOTE '''' DELIMITER '|';
Jackson, Sam|\h
It is "perfect".|	
''|
COPY y TO stdout WITH CSV FORCE QUOTE col2 ESCAPE E'\\' ENCODING 'sql_ascii';
"Jackson, Sam","\\h"
"It is \"perfect\".","	"
"",
COPY y TO stdout WITH CSV FORCE QUOTE *;
"Jackson, Sam","\h"
"It is ""perfect"".","	"
"",
-- Repeat above tests with new 9.0 option syntax
COPY y TO stdout (FORMAT CSV);
"Jackson, Sam",\h
"It is ""perfect"".",	
"",
COPY y TO stdout (FORMAT CSV, QUOTE '''', DELIMITER '|');
Jackson, Sam|\h
It is "perfect".|	
''|
COPY y TO stdout (FORMAT CSV, FORCE_QUOTE (col2), ESCAPE E'\\');
"Jackson, Sam","\\h"
"It is \"perfect\".","	"
"",
COPY y TO stdout (FORMAT CSV, FORCE_QUOTE *);
"Jackson, Sam","\h"
"It is ""perfect"".","	"
"",
\copy y TO stdout (FORMAT CSV)
"Jackson, Sam",\h
"It is ""perfect"".",	
"",
\copy y TO stdout (FORMAT CSV, QUOTE '''', DELIMITER '|')
Jackson, Sam|\h
It is "perfect".|	
''|
\copy y TO stdout (FORMAT CSV, FORCE_QUOTE (col2), ESCAPE E'\\')
"Jackson, Sam","\\h"
"It is \"perfect\".","	"
"",
\copy y TO stdout (FORMAT CSV, FORCE_QUOTE *)
"Jackson, Sam","\h"
"It is ""perfect"".","	"
"",
--test that we read consecutive LFs properly
CREATE TEMP TABLE testnl (a int, b text, c int);
COPY testnl FROM stdin CSV;
-- test end of copy marker
CREATE TEMP TABLE testeoc (a text);
COPY testeoc FROM stdin CSV;
COPY testeoc TO stdout CSV;
a\.
\.b
c\.d
"\."
-- test handling of nonstandard null marker that violates escaping rules
CREATE TEMP TABLE testnull(a int, b text);
INSERT INTO testnull VALUES (1, E'\\0'), (NULL, NULL);
COPY testnull TO stdout WITH NULL AS E'\\0';
1	\\0
\0	\0
COPY testnull FROM stdin WITH NULL AS E'\\0';
SELECT * FROM testnull;
 a  | b  
----+----
  1 | \0
    | 
 42 | \0
    | 
(4 rows)

DROP TABLE x, y;
DROP FUNCTION fn_x_before();
DROP FUNCTION fn_x_after();
