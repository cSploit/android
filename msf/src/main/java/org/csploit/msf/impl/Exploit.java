package org.csploit.msf.impl;

import org.csploit.msf.api.*;
import org.csploit.msf.api.Payload;
import org.csploit.msf.api.module.Target;

import java.io.IOException;
import java.util.List;

/**
 * Concrete implementation of an exploit
 */
class Exploit extends Module implements InternalExploit {
  private Target[] targets;
  private int defaultTarget = -1;

  public Exploit(String refname) {
    super(refname);
  }

  @Override
  public String getType() {
    return "exploit";
  }

  public void setTargets(Target[] targets) {
    this.targets = targets;
  }

  public void setDefaultTarget(int defaultTarget) {
    this.defaultTarget = defaultTarget;
  }

  public Target[] getTargets() {
    return targets;
  }

  public Target getTarget() {
    int i = getTargetIndex();

    if(i>= 0 && i < targets.length) {
      return targets[i];
    }

    return null;
  }

  @Override
  public void setTarget(int i) {
    if (i < 0 || i >= targets.length) {
      throw new IndexOutOfBoundsException();
    }

    datastore.put("TARGET", Integer.toString(i));
  }

  @Override
  public int getTargetIndex() {
    String s = datastore.get("TARGET");

    if(s == null)
      return defaultTarget;

    try {
      int i = Integer.parseInt(s);
      if(i >= 0 && i < targets.length) {
        return i;
      }
    } catch (NumberFormatException e) {
      // ignore
    }

    return defaultTarget;
  }

  @Override
  public List<? extends Payload> getCompatiblePayloads() {
    throw new UnsupportedOperationException("not implemented yet");
  }

  @Override
  public void execute() throws IOException, MsfException {
    throw new UnsupportedOperationException("not implemented yet");
  }
}
